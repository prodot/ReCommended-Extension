using JetBrains.ReSharper.Feature.Services.Daemon;
using JetBrains.ReSharper.Psi;
using JetBrains.ReSharper.Psi.CSharp.Tree;

namespace ReCommendedExtension.Analyzers.UnthrowableException;

[ElementProblemAnalyzer(typeof(ICSharpTreeNode), HighlightingTypes = [typeof(UnthrowableExceptionWarning)])]
public sealed class UnthrowableExceptionAnalyzer : ElementProblemAnalyzer<ICSharpTreeNode>
{
    enum Reason
    {
        ShouldOnlyBeThrownByBuildEngine,
        ShouldOnlyBeThrownByClr,
        ShouldNotBeUsed,
        ShouldOnlyBeThrownBySqlServerApi,
        ShouldOnlyBeThrownByTplApi,
        ShouldUseMoreSpecificException,
        ShouldOnlyBeThrownByMefApi,
        UsesNonGenericCollections,
        ShouldOnlyBeThrownByConfigurationApi,
        ShouldOnlyBeThrownByAdoApi,
        ShouldOnlyBeThrownByClickOnceApi,
        ShouldOnlyBeThrownByWcfApi,
        ShouldOnlyBeThrownByCompressionEngine,
        ShouldOnlyBeThrownByMessageQueueApi,
        ShouldOnlyBeThrownByReflectionApi,
        ShouldOnlyBeThrownByRemotingApi,
        ShouldOnlyBeThrownByWpfApi,
        ShouldOnlyBeThrownByWinUIApi,
    }

    static readonly Dictionary<string, Reason> unthrowableExceptions = new(StringComparer.Ordinal)
    {
        { "Microsoft.Build.BuildEngine.InternalLoggerException", Reason.ShouldOnlyBeThrownByBuildEngine },
        { "Microsoft.Build.BuildEngine.RemoteErrorException", Reason.ShouldOnlyBeThrownByBuildEngine },
        { "Microsoft.Build.Exceptions.InternalLoggerException", Reason.ShouldOnlyBeThrownByBuildEngine },
        { "Microsoft.CSharp.RuntimeBinder.RuntimeBinderException", Reason.ShouldOnlyBeThrownByClr },
        { "Microsoft.CSharp.RuntimeBinder.RuntimeBinderInternalCompilerException", Reason.ShouldOnlyBeThrownByClr },
        { "Microsoft.JScript.BreakOutOfFinally", Reason.ShouldNotBeUsed },
        { "Microsoft.JScript.CmdLineException", Reason.ShouldNotBeUsed },
        { "Microsoft.JScript.ContinueOutOfFinally", Reason.ShouldNotBeUsed },
        { "Microsoft.JScript.EndOfFile", Reason.ShouldNotBeUsed },
        { "Microsoft.JScript.JScriptException", Reason.ShouldNotBeUsed },
        { "Microsoft.JScript.NoContextException", Reason.ShouldNotBeUsed },
        { "Microsoft.JScript.ParserException", Reason.ShouldNotBeUsed },
        { "Microsoft.JScript.ReturnOutOfFinally", Reason.ShouldNotBeUsed },
        { "Microsoft.SqlServer.Server.InvalidUdtException", Reason.ShouldOnlyBeThrownBySqlServerApi },
        { "Microsoft.UI.Xaml.Automation.ElementNotAvailableException", Reason.ShouldOnlyBeThrownByWinUIApi },
        { "Microsoft.UI.Xaml.Automation.ElementNotEnabledException", Reason.ShouldOnlyBeThrownByWinUIApi },
        { "Microsoft.UI.Xaml.LayoutCycleException", Reason.ShouldOnlyBeThrownByWinUIApi },
        { "Microsoft.UI.Xaml.Markup.XamlParseException", Reason.ShouldOnlyBeThrownByWinUIApi },
        { "Microsoft.VisualBasic.CompilerServices.IncompleteInitialization", Reason.ShouldNotBeUsed },
        { "Microsoft.VisualBasic.CompilerServices.InternalErrorException", Reason.ShouldNotBeUsed },
        { "System.AccessViolationException", Reason.ShouldOnlyBeThrownByClr },
        { "System.AggregateException", Reason.ShouldOnlyBeThrownByTplApi },
        { "System.AppDomainUnloadedException", Reason.ShouldOnlyBeThrownByClr },
        { "System.ApplicationException", Reason.ShouldUseMoreSpecificException },
        { "System.ArrayTypeMismatchException", Reason.ShouldOnlyBeThrownByClr },
        { "System.BadImageFormatException", Reason.ShouldOnlyBeThrownByClr },
        { "System.CannotUnloadAppDomainException", Reason.ShouldOnlyBeThrownByClr },
        { "System.ComponentModel.Composition.ChangeRejectedException", Reason.ShouldOnlyBeThrownByMefApi },
        { "System.ComponentModel.Composition.CompositionContractMismatchException", Reason.ShouldOnlyBeThrownByMefApi },
        { "System.ComponentModel.Composition.CompositionException", Reason.ShouldOnlyBeThrownByMefApi },
        { "System.ComponentModel.Composition.ImportCardinalityMismatchException", Reason.ShouldOnlyBeThrownByMefApi },
        { "System.ComponentModel.Composition.Primitives.ComposablePartException", Reason.ShouldOnlyBeThrownByMefApi },
        { "System.ComponentModel.Design.ExceptionCollection", Reason.UsesNonGenericCollections },
        { "System.ComponentModel.WarningException", Reason.ShouldUseMoreSpecificException },
        { "System.Configuration.ConfigurationErrorsException", Reason.ShouldOnlyBeThrownByConfigurationApi },
        { "System.Configuration.ConfigurationException", Reason.ShouldOnlyBeThrownByConfigurationApi },
        { "System.Configuration.Provider.ProviderException", Reason.ShouldOnlyBeThrownByConfigurationApi },
        { "System.Configuration.SettingsPropertyIsReadOnlyException", Reason.ShouldOnlyBeThrownByConfigurationApi },
        { "System.Configuration.SettingsPropertyNotFoundException", Reason.ShouldOnlyBeThrownByConfigurationApi },
        { "System.Configuration.SettingsPropertyWrongTypeException", Reason.ShouldOnlyBeThrownByConfigurationApi },
        { "System.ContextMarshalException", Reason.ShouldOnlyBeThrownByClr },
        { "System.Data.DataException", Reason.ShouldOnlyBeThrownByAdoApi },
        { "System.Data.EntityException", Reason.ShouldUseMoreSpecificException },
        { "System.Data.Odbc.OdbcException", Reason.ShouldOnlyBeThrownByAdoApi },
        { "System.Data.OleDb.OleDbException", Reason.ShouldOnlyBeThrownByAdoApi },
        { "System.Data.OracleClient.OracleException", Reason.ShouldOnlyBeThrownByAdoApi },
        { "System.Data.SqlClient.SqlException", Reason.ShouldOnlyBeThrownByAdoApi },
        { "System.Data.SqlTypes.SqlTypeException", Reason.ShouldUseMoreSpecificException },
        { "System.Data.TypedDataSetGeneratorException", Reason.ShouldUseMoreSpecificException },
        { "System.DataMisalignedException", Reason.ShouldOnlyBeThrownByClr },
        { "System.Deployment.Application.CompatibleFrameworkMissingException", Reason.ShouldOnlyBeThrownByClickOnceApi },
        { "System.Deployment.Application.DependentPlatformMissingException", Reason.ShouldOnlyBeThrownByClickOnceApi },
        { "System.Deployment.Application.DeploymentDownloadException", Reason.ShouldOnlyBeThrownByClickOnceApi },
        { "System.Deployment.Application.DeploymentException", Reason.ShouldOnlyBeThrownByClickOnceApi },
        { "System.Deployment.Application.InvalidDeploymentException", Reason.ShouldOnlyBeThrownByClickOnceApi },
        { "System.Deployment.Application.SupportedRuntimeMissingException", Reason.ShouldOnlyBeThrownByClickOnceApi },
        { "System.Deployment.Application.TrustNotGrantedException", Reason.ShouldOnlyBeThrownByClickOnceApi },
        { "System.DirectoryServices.AccountManagement.PrincipalException", Reason.ShouldUseMoreSpecificException },
        { "System.DirectoryServices.Protocols.DirectoryException", Reason.ShouldUseMoreSpecificException },
        { "System.DllNotFoundException", Reason.ShouldOnlyBeThrownByClr },
        { "System.EntryPointNotFoundException", Reason.ShouldOnlyBeThrownByClr },
        { "System.Exception", Reason.ShouldUseMoreSpecificException },
        { "System.ExecutionEngineException", Reason.ShouldOnlyBeThrownByClr },
        { "System.FieldAccessException", Reason.ShouldOnlyBeThrownByClr },
        { "System.IdentityModel.RequestException", Reason.ShouldUseMoreSpecificException },
        { "System.IdentityModel.Selectors.CardSpaceException", Reason.ShouldOnlyBeThrownByWcfApi },
        { "System.IdentityModel.Services.FederationException", Reason.ShouldUseMoreSpecificException },
        { "System.IndexOutOfRangeException", Reason.ShouldOnlyBeThrownByClr },
        { "System.InsufficientExecutionStackException", Reason.ShouldOnlyBeThrownByClr },
        { "System.InsufficientMemoryException", Reason.ShouldOnlyBeThrownByClr },
        { "System.InvalidProgramException", Reason.ShouldOnlyBeThrownByClr },
        { "System.IO.Compression.ZLibException", Reason.ShouldOnlyBeThrownByCompressionEngine },
        { "System.IO.FileLoadException", Reason.ShouldOnlyBeThrownByClr },
        { "System.Management.Instrumentation.InstrumentationBaseException", Reason.ShouldUseMoreSpecificException },
        { "System.MemberAccessException", Reason.ShouldOnlyBeThrownByClr },
        { "System.Messaging.MessageQueueException", Reason.ShouldOnlyBeThrownByMessageQueueApi },
        { "System.MethodAccessException", Reason.ShouldOnlyBeThrownByClr },
        { "System.MissingFieldException", Reason.ShouldOnlyBeThrownByClr },
        { "System.MissingMemberException", Reason.ShouldOnlyBeThrownByClr },
        { "System.MissingMethodException", Reason.ShouldOnlyBeThrownByClr },
        { "System.MulticastNotSupportedException", Reason.ShouldOnlyBeThrownByClr },
        { "System.Net.Http.HttpRequestException", Reason.ShouldUseMoreSpecificException },
        { "System.Net.Mail.SmtpFailedRecipientsException", Reason.ShouldNotBeUsed },
        { "System.NullReferenceException", Reason.ShouldOnlyBeThrownByClr },
        { "System.OutOfMemoryException", Reason.ShouldOnlyBeThrownByClr },
        { "System.RankException", Reason.ShouldOnlyBeThrownByClr },
        { "System.Reflection.AmbiguousMatchException", Reason.ShouldOnlyBeThrownByReflectionApi },
        { "System.Reflection.ReflectionTypeLoadException", Reason.ShouldOnlyBeThrownByReflectionApi },
        { "System.Reflection.TargetException", Reason.ShouldOnlyBeThrownByReflectionApi },
        { "System.Reflection.TargetInvocationException", Reason.ShouldOnlyBeThrownByReflectionApi },
        { "System.Reflection.TargetParameterCountException", Reason.ShouldOnlyBeThrownByReflectionApi },
        { "System.Resources.MissingManifestResourceException", Reason.ShouldOnlyBeThrownByClr },
        { "System.Resources.MissingSatelliteAssemblyException", Reason.ShouldOnlyBeThrownByClr },
        { "System.Runtime.AmbiguousImplementationException", Reason.ShouldOnlyBeThrownByClr },
        { "System.Runtime.CompilerServices.RuntimeWrappedException", Reason.ShouldOnlyBeThrownByClr },
        { "System.Runtime.CompilerServices.SwitchExpressionException", Reason.ShouldOnlyBeThrownByClr },
        { "System.Runtime.DurableInstancing.InstancePersistenceException", Reason.ShouldUseMoreSpecificException },
        { "System.Runtime.InteropServices.COMException", Reason.ShouldOnlyBeThrownByClr },
        { "System.Runtime.InteropServices.ExternalException", Reason.ShouldOnlyBeThrownByClr },
        { "System.Runtime.InteropServices.InvalidComObjectException", Reason.ShouldOnlyBeThrownByClr },
        { "System.Runtime.InteropServices.InvalidOleVariantTypeException", Reason.ShouldOnlyBeThrownByClr },
        { "System.Runtime.InteropServices.MarshalDirectiveException", Reason.ShouldOnlyBeThrownByClr },
        { "System.Runtime.InteropServices.SafeArrayRankMismatchException", Reason.ShouldOnlyBeThrownByClr },
        { "System.Runtime.InteropServices.SEHException", Reason.ShouldOnlyBeThrownByClr },
        { "System.Runtime.Remoting.MetadataServices.SUDSGeneratorException", Reason.ShouldOnlyBeThrownByRemotingApi },
        { "System.Runtime.Remoting.MetadataServices.SUDSParserException", Reason.ShouldOnlyBeThrownByRemotingApi },
        { "System.Security.HostProtectionException", Reason.ShouldOnlyBeThrownByClr },
        { "System.StackOverflowException", Reason.ShouldOnlyBeThrownByClr },
        { "System.SystemException", Reason.ShouldUseMoreSpecificException },
        { "System.Threading.BarrierPostPhaseException", Reason.ShouldOnlyBeThrownByClr },
        { "System.Threading.ThreadAbortException", Reason.ShouldOnlyBeThrownByClr },
        { "System.Threading.ThreadInterruptedException", Reason.ShouldOnlyBeThrownByClr },
        { "System.Threading.ThreadStartException", Reason.ShouldOnlyBeThrownByClr },
        { "System.Threading.ThreadStateException", Reason.ShouldOnlyBeThrownByClr },
        { "System.TypeAccessException", Reason.ShouldOnlyBeThrownByClr },
        { "System.TypeInitializationException", Reason.ShouldOnlyBeThrownByClr },
        { "System.TypeLoadException", Reason.ShouldOnlyBeThrownByClr },
        { "System.TypeUnloadedException", Reason.ShouldOnlyBeThrownByClr },
        { "System.Windows.Markup.XamlParseException", Reason.ShouldOnlyBeThrownByWpfApi },
        { "System.Windows.Media.Animation.AnimationException", Reason.ShouldOnlyBeThrownByWpfApi },
        { "Windows.UI.Xaml.Automation.ElementNotAvailableException", Reason.ShouldOnlyBeThrownByWinUIApi },
        { "Windows.UI.Xaml.Automation.ElementNotEnabledException", Reason.ShouldOnlyBeThrownByWinUIApi },
        { "Windows.UI.Xaml.LayoutCycleException", Reason.ShouldOnlyBeThrownByWinUIApi },
        { "Windows.UI.Xaml.Markup.XamlParseException", Reason.ShouldOnlyBeThrownByWinUIApi },
    };

    protected override void Run(ICSharpTreeNode element, ElementProblemAnalyzerData data, IHighlightingConsumer consumer)
    {
        var exception = element switch
        {
            IThrowStatement throwStatement => throwStatement.Exception,
            IThrowExpression throwExpression => throwExpression.Exception,

            _ => null,
        };

        if (exception?.GetExpressionType() is IDeclaredType type && unthrowableExceptions.TryGetValue(type.GetClrName().FullName, out var reason))
        {
            consumer.AddHighlighting(
                new UnthrowableExceptionWarning(
                    reason switch
                    {
                        Reason.ShouldOnlyBeThrownByBuildEngine => "The exception should only be thrown by the MSBuild engine.",
                        Reason.ShouldOnlyBeThrownByClr => "The exception should only be thrown by the CLR.",
                        Reason.ShouldNotBeUsed => "The exception should not be used in any way.",
                        Reason.ShouldOnlyBeThrownBySqlServerApi => "The exception should only be thrown by the SQL Server API.",
                        Reason.ShouldOnlyBeThrownByTplApi => "The exception should only be thrown by the TPL API.",
                        Reason.ShouldUseMoreSpecificException => "A more specific exception should be used.",
                        Reason.ShouldOnlyBeThrownByMefApi => "The exception should only be thrown by the MEF API.",
                        Reason.UsesNonGenericCollections => "The exception uses non-generic collections.",
                        Reason.ShouldOnlyBeThrownByConfigurationApi => "The exception should only be thrown by the .NET Configuration API.",
                        Reason.ShouldOnlyBeThrownByAdoApi => "The exception should only be thrown by the ADO API.",
                        Reason.ShouldOnlyBeThrownByClickOnceApi => "The exception should only be thrown by the ClickOnce API.",
                        Reason.ShouldOnlyBeThrownByWcfApi => "The exception should only be thrown by the WCF API.",
                        Reason.ShouldOnlyBeThrownByCompressionEngine => "The exception should only be thrown by the compression engine.",
                        Reason.ShouldOnlyBeThrownByMessageQueueApi => "The exception should only be thrown by the Message Queue API.",
                        Reason.ShouldOnlyBeThrownByReflectionApi => "The exception should only be thrown by the Reflection API.",
                        Reason.ShouldOnlyBeThrownByRemotingApi => "The exception should only be thrown by the Remoting API.",
                        Reason.ShouldOnlyBeThrownByWpfApi => "The exception should only be thrown by the WPF API.",
                        Reason.ShouldOnlyBeThrownByWinUIApi => "The exception should only be thrown by the WinUI API.",

                        _ => throw new NotSupportedException(),
                    },
                    exception));
        }
    }
}