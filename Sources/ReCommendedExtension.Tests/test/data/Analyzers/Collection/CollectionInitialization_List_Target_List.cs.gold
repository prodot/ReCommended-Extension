using System;
using System.Collections.Generic;

namespace TargetList
{
    public class NonGenericClass
    {
        List<int> field01 = |new|(0) List<int>();
        List<int> field02 = |new|(1) List<int>() { 1, 2, 3 };
        List<int> field03 = new List<int>(8);
        List<int> field04 = new List<int>(8) { 1, 2, 3 };
        List<int> field07 = |new|(2)();
        List<int> field08 = |new|(3)() { 1, 2, 3 };
        List<int> field09 = new(8);
        List<int> field10 = new(8) { 1, 2, 3 };

        void Method(int a, int b, int c, IEnumerable<int> seq)
        {
            List<int> var01 = |new|(4) List<int>();
            List<int> var02 = |new|(5) List<int> { a, b, c };
            List<int> var03 = new List<int>(8);
            List<int> var04 = new List<int>(8) { a, b, c };
            List<int> var05 = new List<int>(seq);
            List<int> var06 = |new|(6) List<int>(seq) { a, b, c };
            List<int> var07 = |new|(7)();
            List<int> var08 = |new|(8)() { a, b, c };
            List<int> var09 = new(8);
            List<int> var10 = new(8) { a, b, c};
            List<int> var11 = new(seq);
            List<int> var12 = |new|(9)(seq) { a, b, c };

            Consumer(|new|(10) List<int>());
            Consumer(|new|(11) List<int> { a, b, c });
            Consumer(new List<int>(8));
            Consumer(new List<int>(8) { a, b, c });
            Consumer(|new|(12) List<int>(seq));
            Consumer(|new|(13) List<int>(seq) { a, b, c });
            Consumer(|new|(14)());
            Consumer(|new|(15)() { a, b, c });
            Consumer(new(8));
            Consumer(new(8) { a, b, c });
            Consumer(|new|(16)(seq));
            Consumer(|new|(17)(seq) { a, b, c });

            ConsumerGeneric(|new|(18) List<int>());
            ConsumerGeneric(|new|(19) List<int> { a, b, c });
            ConsumerGeneric<int>(new List<int>(8));
            ConsumerGeneric<int>(new List<int>(8) { a, b, c });
            ConsumerGeneric(|new|(20) List<int>(seq));
            ConsumerGeneric(|new|(21) List<int>(seq) { a, b, c });
        }

        void Consumer(List<int> items) { }
        void ConsumerGeneric<T>(List<T> items) { }

        List<int> Property01 { get; } = |new|(22) List<int>();
        List<int> Property02 { get; } = |new|(23) List<int> { 1, 2, 3 };
        List<int> Property03 { get; set; } = new List<int>(8);
        List<int> Property04 { get; set; } = new List<int>(8) { 1, 2, 3 };
        List<int> Property07 => |new|(24)();
        List<int> Property08 => |new|(25)() { 1, 2, 3 };
        List<int> Property09 => new(8);
        List<int> Property10 => new(8) { 1, 2, 3 };
    }

    public class GenericClass<T> where T : new()
    {
        List<T> field01 = |new|(26) List<T>();
        List<T> field02 = |new|(27) List<T> { default, default(T), new() };
        List<T> field03 = new List<T>(8);
        List<T> field04 = new List<T>(8) { default, default(T), new() };
        List<T> field07 = |new|(28)();
        List<T> field08 = |new|(29)() { default, default(T), new() };
        List<T> field09 = new(8);
        List<T> field10 = new(8) { default, default(T), new() };

        void Method(T a, T b, T c, IEnumerable<T> seq)
        {
            List<T> var01 = |new|(30) List<T>();
            List<T> var02 = |new|(31) List<T> { a, b, c };
            List<T> var03 = new List<T>(8);
            List<T> var04 = new List<T>(8) { a, b, c };
            List<T> var05 = new List<T>(seq);
            List<T> var06 = |new|(32) List<T>(seq) { a, b, c };
            List<T> var07 = |new|(33)();
            List<T> var08 = |new|(34)() { a, b, c };
            List<T> var09 = new(8);
            List<T> var10 = new(8) { a, b, c };
            List<T> var11 = new(seq);
            List<T> var12 = |new|(35)(seq) { a, b, c };

            Consumer(|new|(36) List<T>());
            Consumer(|new|(37) List<T> { a, b, c });
            Consumer(new List<T>(8));
            Consumer(new List<T>(8) { a, b, c });
            Consumer(|new|(38) List<T>(seq));
            Consumer(|new|(39) List<T>(seq) { a, b, c });
            Consumer(|new|(40)());
            Consumer(|new|(41)() { a, b, c });
            Consumer(new(8));
            Consumer(new(8) { a, b, c });
            Consumer(|new|(42)(seq));
            Consumer(|new|(43)(seq) { a, b, c });
        }

        void Consumer(List<T> items) { }

        List<T> Property01 { get; } = |new|(44) List<T>();
        List<T> Property02 { get; } = |new|(45) List<T> { default, default(T), new() };
        List<T> Property03 { get; set; } = new List<T>(8);
        List<T> Property04 { get; set; } = new List<T>(8) { default, default(T), new() };
        List<T> Property07 => |new|(46)();
        List<T> Property08 => |new|(47)() { default, default(T), new() };
        List<T> Property09 => new(8);
        List<T> Property10 => new(8) { default, default(T), new() };
    }

    internal class A { }
    internal class B(int x = 0) : A { }

    public class InferenceClass
    {
        List<A> field08 = |new|(48)() { new B(1), new B(2), new B(3) };
        List<A> field10 = new(8) { new B(1), new B(2), new B(3) };

        void Method(B a, B b, B c, IEnumerable<B> seq)
        {
            List<A> var08 = |new|(49)() { a, b, c };
            List<A> var10 = new(8) { a, b, c };
            List<A> var11 = new(seq);
            List<A> var12 = |new|(50)(seq) { a, b, c };

            Consumer(|new|(51)() { a, b, c });
            Consumer(new(8) { a, b, c });
            Consumer(|new|(52)(seq));
            Consumer(|new|(53)(seq) { a, b, c });
        }

        void Consumer(List<A> items) { }

        List<A> Property08 => |new|(54)() { new B(1), new B(2), new B(3) };
        List<A> Property10 => new(8) { new B(1), new B(2), new B(3) };
    }
}
---------------------------------------------------------
(0): ReSharper Hint: Use collection expression
(1): ReSharper Suggestion: Use collection expression
(2): ReSharper Hint: Use collection expression
(3): ReSharper Suggestion: Use collection expression
(4): ReSharper Hint: Use collection expression
(5): ReSharper Suggestion: Use collection expression
(6): ReSharper Suggestion: Use collection expression
(7): ReSharper Hint: Use collection expression
(8): ReSharper Suggestion: Use collection expression
(9): ReSharper Suggestion: Use collection expression
(10): ReSharper Hint: Use collection expression
(11): ReSharper Suggestion: Use collection expression
(12): ReSharper Suggestion: Use collection expression
(13): ReSharper Suggestion: Use collection expression
(14): ReSharper Hint: Use collection expression
(15): ReSharper Suggestion: Use collection expression
(16): ReSharper Suggestion: Use collection expression
(17): ReSharper Suggestion: Use collection expression
(18): ReSharper Suggestion: Use collection expression.
(19): ReSharper Suggestion: Use collection expression
(20): ReSharper Suggestion: Use collection expression
(21): ReSharper Suggestion: Use collection expression
(22): ReSharper Hint: Use collection expression
(23): ReSharper Suggestion: Use collection expression
(24): ReSharper Hint: Use collection expression
(25): ReSharper Suggestion: Use collection expression
(26): ReSharper Hint: Use collection expression
(27): ReSharper Suggestion: Use collection expression
(28): ReSharper Hint: Use collection expression
(29): ReSharper Suggestion: Use collection expression
(30): ReSharper Hint: Use collection expression
(31): ReSharper Suggestion: Use collection expression
(32): ReSharper Suggestion: Use collection expression
(33): ReSharper Hint: Use collection expression
(34): ReSharper Suggestion: Use collection expression
(35): ReSharper Suggestion: Use collection expression
(36): ReSharper Hint: Use collection expression
(37): ReSharper Suggestion: Use collection expression
(38): ReSharper Suggestion: Use collection expression
(39): ReSharper Suggestion: Use collection expression
(40): ReSharper Hint: Use collection expression
(41): ReSharper Suggestion: Use collection expression
(42): ReSharper Suggestion: Use collection expression
(43): ReSharper Suggestion: Use collection expression
(44): ReSharper Hint: Use collection expression
(45): ReSharper Suggestion: Use collection expression
(46): ReSharper Hint: Use collection expression
(47): ReSharper Suggestion: Use collection expression
(48): ReSharper Suggestion: Use collection expression
(49): ReSharper Suggestion: Use collection expression
(50): ReSharper Suggestion: Use collection expression
(51): ReSharper Suggestion: Use collection expression
(52): ReSharper Suggestion: Use collection expression
(53): ReSharper Suggestion: Use collection expression
(54): ReSharper Suggestion: Use collection expression
