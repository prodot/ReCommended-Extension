using System;

namespace TargetArray
{
    public class NonGenericClass
    {
        int[] field01 = |new int[]|(0) { };
        int[] field02 = |new int[]|(1) { 1, 2, 3 };
        int[] field03 = ||new int[0]|(2)|(3) { };
        int[] field04 = |new int[3]|(4) { 1, 2, 3 };
        int[] field05 = |new int[0]|(5);
        int[] field06 = new int[3];
        int[] field07 = |new[]|(6) { 1, 2, 3 };
        int[] field08 = |{ }|(7);
        int[] field09 = |{|(8) 1, 2, 3 };
        int[] field10 = Array.|Empty<int>()|(9);

        void Method(int a, int b, int c)
        {
            int[] var01 = |new int[]|(10) { };
            int[] var02 = |new int[]|(11) { a, b, c };
            int[] var03 = ||new int[0]|(12)|(13) { };
            int[] var04 = |new int[3]|(14) { a, b, c };
            int[] var05 = |new int[0]|(15);
            int[] var06 = new int[3];
            int[] var07 = |new[]|(16) { a, b, c };
            int[] var08 = |{ }|(17);
            int[] var09 = |{|(18) a, b, c };
            int[] var10 = Array.|Empty<int>()|(19);

            Consumer(|new int[]|(20) { });
            Consumer(|new int[]|(21) { a, b, c });
            Consumer(||new int[0]|(22)|(23) { });
            Consumer(|new int[3]|(24) { a, b, c });
            Consumer(|new int[0]|(25));
            Consumer(new int[3]);
            Consumer(|new[]|(26) { a, b, c });
            Consumer(Array.|Empty<int>()|(27));

            ConsumerGeneric(|new int[]|(28) { });
            ConsumerGeneric(|new int[]|(29) { a, b, c });
            ConsumerGeneric<int>(||new int[0]|(30)|(31) { });
            ConsumerGeneric(|new int[3]|(32) { a, b, c });
            ConsumerGeneric(||new int[0]|(33)|(34));
            ConsumerGeneric(new int[3]);
            ConsumerGeneric(|new[]|(35) { a, b, c });
            ConsumerGeneric(|Array.Empty<int>()|(36));
        }

        void Consumer(int[] items) { }
        void ConsumerGeneric<T>(T[] items) { }

        int[] Property01 { get; } = |new int[]|(37) { };
        int[] Property02 { get; } = |new int[]|(38) { 1, 2, 3 };
        int[] Property03 { get; set; } = ||new int[0]|(39)|(40) { };
        int[] Property04 { get; set; } = |new int[3]|(41) { 1, 2, 3 };
        int[] Property05 => |new int[0]|(42);
        int[] Property06 => new int[3];
        int[] Property07 => |new[]|(43) { 1, 2, 3 };
        int[] Property08 { get; } = |{ }|(44);
        int[] Property09 { get; set; } = |{|(45) 1, 2, 3 };
        int[] Property10 { get; set; } = Array.|Empty<int>()|(46);
    }

    public class GenericClass<T> where T : new()
    {
        T[] field01 = |new T[]|(47) { };
        T[] field02 = |new T[]|(48) { default, default(T), new() };
        T[] field03 = ||new T[0]|(49)|(50) { };
        T[] field04 = |new T[3]|(51) { default, default(T), new() };
        T[] field05 = |new T[0]|(52);
        T[] field06 = new T[3];
        T[] field07 = |new[]|(53) { default, default(T), new() };
        T[] field08 = |{ }|(54);
        T[] field09 = |{|(55) default, default(T), new() };
        T[] field10 = Array.|Empty<T>()|(56);

        void Method(T a, T b, T c)
        {
            T[] var01 = |new T[]|(57) { };
            T[] var02 = |new T[]|(58) { a, b, c };
            T[] var03 = ||new T[0]|(59)|(60) { };
            T[] var04 = |new T[3]|(61) { a, b, c };
            T[] var05 = |new T[0]|(62);
            T[] var06 = new T[3];
            T[] var07 = |new[]|(63) { a, b, c };
            T[] var08 = |{ }|(64);
            T[] var09 = |{|(65) a, b, c };
            T[] var10 = Array.|Empty<T>()|(66);

            Consumer(|new T[]|(67) { });
            Consumer(|new T[]|(68) { a, b, c });
            Consumer(||new T[0]|(69)|(70) { });
            Consumer(|new T[3]|(71) { a, b, c });
            Consumer(|new T[0]|(72));
            Consumer(new T[3]);
            Consumer(|new[]|(73) { a, b, c });
            Consumer(Array.|Empty<T>()|(74));
        }

        void Consumer(T[] items) { }

        T[] Property01 { get; } = |new T[]|(75) { };
        T[] Property02 { get; } = |new T[]|(76) { default, default(T), new() };
        T[] Property03 { get; set; } = ||new T[0]|(77)|(78) { };
        T[] Property04 { get; set; } = |new T[3]|(79) { default, default(T), new() };
        T[] Property05 => |new T[0]|(80);
        T[] Property06 => new T[3];
        T[] Property07 => |new[]|(81) { default, default(T), new() };
        T[] Property08 { get; } = |{ }|(82);
        T[] Property09 { get; set; } = |{|(83) default, default(T), new() };
        T[] Property10 { get; set; } = Array.|Empty<T>()|(84);
    }

    internal class A { }
    internal class B(int x = 0) : A { }

    public class InferenceClass
    {
        A[] field1 = |new B[]|(85) { };
        A[] field2 = new B[] { new(1), new(2), new(3) };
        A[] field3 = ||new B[0]|(86) { }|(87);
        A[] field4 = |new B[3]|(88) { new B(1), new B(2), new B(3) };
        A[] field5 = ||new B[0]|(89)|(90);
        A[] field6 = new B[3];
        A[] field7 = |new[]|(91) { new B(1), new B(2), new B(3) };
        A[] field8 = Array.|Empty<B>()|(92);

        void Method(B a, B b, B c)
        {
            A[] var1 = |new B[]|(93) { };
            A[] var2 = |new B[]|(94) { a, b, c };
            A[] var3 = ||new B[0]|(95) { }|(96);
            A[] var4 = |new B[3]|(97) { a, b, c };
            A[] var5 = ||new B[0]|(98)|(99);
            A[] var6 = new B[3];
            A[] var7 = |new[]|(100) { a, b, c };
            A[] var8 = Array.|Empty<B>()|(101);

            Consumer(|new B[]|(102) { });
            Consumer(|new B[]|(103) { a, b, c });
            Consumer(||new B[0]|(104) { }|(105));
            Consumer(|new B[3]|(106) { a, b, c });
            Consumer(||new B[0]|(107)|(108));
            Consumer(new B[3]);
            Consumer(|new[]|(109) { a, b, c });
            Consumer(Array.|Empty<B>()|(110));
        }

        void Consumer(A[] items) { }

        A[] Property1 { get; } = |new B[]|(111) { };
        A[] Property2 { get; } = new B[] { new(1), new(2), new(3) };
        A[] Property3 { get; set; } = ||new B[0]|(112) { }|(113);
        A[] Property4 { get; set; } = |new B[3]|(114) { new B(1), new B(2), new B(3) };
        A[] Property5 => ||new B[0]|(115)|(116);
        A[] Property6 => new B[3];
        A[] Property7 => |new[]|(117) { new B(1), new B(2), new B(3) };
        A[] Property8 => Array.|Empty<B>()|(118);
    }
}
---------------------------------------------------------
(0): ReSharper Suggestion: Use collection expression
(1): ReSharper Suggestion: Use collection expression
(2):<overlapped> ReSharper Suggestion: Use collection expression
(3): ReSharper Suggestion: Use collection expression
(4): ReSharper Suggestion: Use collection expression
(5): ReSharper Suggestion: Use collection expression
(6): ReSharper Suggestion: Use collection expression
(7): ReSharper Suggestion: Use collection expression
(8): ReSharper Suggestion: Use collection expression
(9): ReSharper Suggestion: Use collection expression
(10): ReSharper Suggestion: Use collection expression
(11): ReSharper Suggestion: Use collection expression
(12):<overlapped> ReSharper Suggestion: Use collection expression
(13): ReSharper Suggestion: Use collection expression
(14): ReSharper Suggestion: Use collection expression
(15): ReSharper Suggestion: Use collection expression
(16): ReSharper Suggestion: Use collection expression
(17): ReSharper Suggestion: Use collection expression
(18): ReSharper Suggestion: Use collection expression
(19): ReSharper Suggestion: Use collection expression
(20): ReSharper Suggestion: Use collection expression
(21): ReSharper Suggestion: Use collection expression
(22):<overlapped> ReSharper Suggestion: Use collection expression
(23): ReSharper Suggestion: Use collection expression
(24): ReSharper Suggestion: Use collection expression
(25): ReSharper Suggestion: Use collection expression
(26): ReSharper Suggestion: Use collection expression
(27): ReSharper Suggestion: Use collection expression
(28): ReSharper Suggestion: Use collection expression.
(29): ReSharper Suggestion: Use collection expression
(30):<overlapped> ReSharper Suggestion: Use collection expression
(31): ReSharper Suggestion: Use collection expression
(32): ReSharper Suggestion: Use collection expression
(33): ReSharper Suggestion: Use 'Array.Empty<int>()' to avoid array allocation
(34): ReSharper Suggestion: Use collection expression.
(35): ReSharper Suggestion: Use collection expression
(36): ReSharper Suggestion: Use collection expression.
(37): ReSharper Suggestion: Use collection expression
(38): ReSharper Suggestion: Use collection expression
(39):<overlapped> ReSharper Suggestion: Use collection expression
(40): ReSharper Suggestion: Use collection expression
(41): ReSharper Suggestion: Use collection expression
(42): ReSharper Suggestion: Use collection expression
(43): ReSharper Suggestion: Use collection expression
(44): ReSharper Suggestion: Use collection expression
(45): ReSharper Suggestion: Use collection expression
(46): ReSharper Suggestion: Use collection expression
(47): ReSharper Suggestion: Use collection expression
(48): ReSharper Suggestion: Use collection expression
(49):<overlapped> ReSharper Suggestion: Use collection expression
(50): ReSharper Suggestion: Use collection expression
(51): ReSharper Suggestion: Use collection expression
(52): ReSharper Suggestion: Use collection expression
(53): ReSharper Suggestion: Use collection expression
(54): ReSharper Suggestion: Use collection expression
(55): ReSharper Suggestion: Use collection expression
(56): ReSharper Suggestion: Use collection expression
(57): ReSharper Suggestion: Use collection expression
(58): ReSharper Suggestion: Use collection expression
(59):<overlapped> ReSharper Suggestion: Use collection expression
(60): ReSharper Suggestion: Use collection expression
(61): ReSharper Suggestion: Use collection expression
(62): ReSharper Suggestion: Use collection expression
(63): ReSharper Suggestion: Use collection expression
(64): ReSharper Suggestion: Use collection expression
(65): ReSharper Suggestion: Use collection expression
(66): ReSharper Suggestion: Use collection expression
(67): ReSharper Suggestion: Use collection expression
(68): ReSharper Suggestion: Use collection expression
(69):<overlapped> ReSharper Suggestion: Use collection expression
(70): ReSharper Suggestion: Use collection expression
(71): ReSharper Suggestion: Use collection expression
(72): ReSharper Suggestion: Use collection expression
(73): ReSharper Suggestion: Use collection expression
(74): ReSharper Suggestion: Use collection expression
(75): ReSharper Suggestion: Use collection expression
(76): ReSharper Suggestion: Use collection expression
(77):<overlapped> ReSharper Suggestion: Use collection expression
(78): ReSharper Suggestion: Use collection expression
(79): ReSharper Suggestion: Use collection expression
(80): ReSharper Suggestion: Use collection expression
(81): ReSharper Suggestion: Use collection expression
(82): ReSharper Suggestion: Use collection expression
(83): ReSharper Suggestion: Use collection expression
(84): ReSharper Suggestion: Use collection expression
(85): ReSharper Suggestion: Use collection expression ('A[]' will be used).
(86): ReSharper Suggestion: Use collection expression ('A[]' will be used).
(87):<overlapped> ReSharper Suggestion: Use 'Array.Empty<B>()' to avoid array allocation
(88): ReSharper Suggestion: Use collection expression ('A[]' will be used).
(89):<overlapped> ReSharper Suggestion: Use 'Array.Empty<B>()' to avoid array allocation
(90): ReSharper Suggestion: Use collection expression ('A[]' will be used).
(91):<overlapped> ReSharper Suggestion: Use collection expression
(92): ReSharper Suggestion: Use collection expression
(93): ReSharper Suggestion: Use collection expression ('A[]' will be used).
(94): ReSharper Suggestion: Use collection expression ('A[]' will be used).
(95): ReSharper Suggestion: Use collection expression ('A[]' will be used).
(96):<overlapped> ReSharper Suggestion: Use 'Array.Empty<B>()' to avoid array allocation
(97): ReSharper Suggestion: Use collection expression ('A[]' will be used).
(98):<overlapped> ReSharper Suggestion: Use 'Array.Empty<B>()' to avoid array allocation
(99): ReSharper Suggestion: Use collection expression ('A[]' will be used).
(100):<overlapped> ReSharper Suggestion: Use collection expression
(101): ReSharper Suggestion: Use collection expression
(102): ReSharper Suggestion: Use collection expression ('A[]' will be used).
(103): ReSharper Suggestion: Use collection expression ('A[]' will be used).
(104): ReSharper Suggestion: Use collection expression ('A[]' will be used).
(105):<overlapped> ReSharper Suggestion: Use 'Array.Empty<B>()' to avoid array allocation
(106): ReSharper Suggestion: Use collection expression ('A[]' will be used).
(107):<overlapped> ReSharper Suggestion: Use 'Array.Empty<B>()' to avoid array allocation
(108): ReSharper Suggestion: Use collection expression ('A[]' will be used).
(109):<overlapped> ReSharper Suggestion: Use collection expression
(110):<overlapped> ReSharper Suggestion: Use collection expression
(111): ReSharper Suggestion: Use collection expression ('A[]' will be used).
(112): ReSharper Suggestion: Use collection expression ('A[]' will be used).
(113):<overlapped> ReSharper Suggestion: Use 'Array.Empty<B>()' to avoid array allocation
(114): ReSharper Suggestion: Use collection expression ('A[]' will be used).
(115):<overlapped> ReSharper Suggestion: Use 'Array.Empty<B>()' to avoid array allocation
(116): ReSharper Suggestion: Use collection expression ('A[]' will be used).
(117):<overlapped> ReSharper Suggestion: Use collection expression
(118):<overlapped> ReSharper Suggestion: Use collection expression
