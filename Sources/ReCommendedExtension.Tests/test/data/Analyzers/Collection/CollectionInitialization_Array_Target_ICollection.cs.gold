using System;
using System.Collections.Generic;

namespace TargetCollection
{
    public class NonGenericClass
    {
        ICollection<int> field1 = |new int[]|(0) { };
        ICollection<int> field2 = |new int[]|(1) { 1, 2, 3 };
        ICollection<int> field3 = ||new int[0]|(2) { }|(3);
        ICollection<int> field4 = |new int[3]|(4) { 1, 2, 3 };
        ICollection<int> field5 = ||new int[0]|(5)|(6);
        ICollection<int> field6 = new int[3];
        ICollection<int> field7 = |new[]|(7) { 1, 2, 3 };
        ICollection<int> field8 = |Array.Empty<int>()|(8);

        void Method(int a, int b, int c)
        {
            ICollection<int> var1 = |new int[]|(9) { };
            ICollection<int> var2 = |new int[]|(10) { a, b, c };
            ICollection<int> var3 = ||new int[0]|(11) { }|(12);
            ICollection<int> var4 = |new int[3]|(13) { a, b, c };
            ICollection<int> var5 = ||new int[0]|(14)|(15);
            ICollection<int> var6 = new int[3];
            ICollection<int> var7 = |new[]|(16) { a, b, c };
            ICollection<int> var8 = |Array.Empty<int>()|(17);

            Consumer(|new int[]|(18) { });
            Consumer(|new int[]|(19) { a, b, c });
            Consumer(||new int[0]|(20) { }|(21));
            Consumer(|new int[3]|(22) { a, b, c });
            Consumer(||new int[0]|(23)|(24));
            Consumer(new int[3]);
            Consumer(|new[]|(25) { a, b, c });
            Consumer(|Array.Empty<int>()|(26));

            ConsumerGeneric(|new int[]|(27) { });
            ConsumerGeneric(|new int[]|(28) { a, b, c });
            ConsumerGeneric<int>(||new int[0]|(29) { }|(30));
            ConsumerGeneric(|new int[3]|(31) { a, b, c });
            ConsumerGeneric(||new int[0]|(32)|(33));
            ConsumerGeneric(new int[3]);
            ConsumerGeneric(|new[]|(34) { a, b, c });
            ConsumerGeneric(|Array.Empty<int>()|(35));
        }

        void Consumer(ICollection<int> items) { }
        void ConsumerGeneric<T>(ICollection<T> items) { }

        ICollection<string?> Property1 { get; } = |new string?[]|(36) { };
        ICollection<string?> Property2 { get; } = |new string?[]|(37) { "one", "two", "three" };
        ICollection<string?> Property3 { get; set; } = ||new string?[0]|(38) { }|(39);
        ICollection<string?> Property4 { get; set; } = |new string?[3]|(40) { "one", "two", "three" };
        ICollection<string?> Property5 => ||new string?[0]|(41)|(42);
        ICollection<string?> Property6 => new string?[3];
        ICollection<string?> Property7 => |new[]|(43) { "one", "two", "three", null };
        ICollection<string?> Property8 => Array.Empty<int>();
    }

    public class GenericClass<T> where T : new()
    {
        ICollection<T> field1 = |new T[]|(44) { };
        ICollection<T> field2 = |new T[]|(45) { default, default(T), new() };
        ICollection<T> field3 = ||new T[0]|(46) { }|(47);
        ICollection<T> field4 = |new T[3]|(48) { default, default(T), new() };
        ICollection<T> field5 = ||new T[0]|(49)|(50);
        ICollection<T> field6 = new T[3];
        ICollection<T> field7 = |new[]|(51) { default, default(T), new() };
        ICollection<T> field8 = |Array.Empty<T>()|(52);

        void Method(T a, T b, T c)
        {
            ICollection<T> var1 = |new T[]|(53) { };
            ICollection<T> var2 = |new T[]|(54) { a, b, c };
            ICollection<T> var3 = ||new T[0]|(55) { }|(56);
            ICollection<T> var4 = |new T[3]|(57) { a, b, c };
            ICollection<T> var5 = ||new T[0]|(58)|(59);
            ICollection<T> var6 = new T[3];
            ICollection<T> var7 = |new[]|(60) { a, b, c };
            ICollection<T> var8 = |Array.Empty<T>()|(61);

            Consumer(|new T[]|(62) { });
            Consumer(|new T[]|(63) { a, b, c });
            Consumer(||new T[0]|(64) { }|(65));
            Consumer(|new T[3]|(66) { a, b, c });
            Consumer(||new T[0]|(67)|(68));
            Consumer(new T[3]);
            Consumer(|new[]|(69) { a, b, c });
            Consumer(|Array.Empty<T>()|(70));
        }

        void Consumer(ICollection<T> items) { }

        ICollection<T> Property1 { get; } = |new T[]|(71) { };
        ICollection<T> Property2 { get; } = |new T[]|(72) { default, default(T), new() };
        ICollection<T> Property3 { get; set; } = ||new T[0]|(73) { }|(74);
        ICollection<T> Property4 { get; set; } = |new T[3]|(75) { default, default(T), new() };
        ICollection<T> Property5 => ||new T[0]|(76)|(77);
        ICollection<T> Property6 => new T[3];
        ICollection<T> Property7 => |new[]|(78) { default, default(T), new() };
        ICollection<T> Property8 => |Array.Empty<T>()|(79);
    }

    internal class A { }
    internal class B(int x = 0) : A { }

    public class InferenceClass
    {
        ICollection<A> field1 = |new B[]|(80) { };
        ICollection<A> field2 = new B[] { new(1), new(2), new(3) };
        ICollection<A> field3 = ||new B[0]|(81) { }|(82);
        ICollection<A> field4 = |new B[3]|(83) { new B(1), new B(2), new B(3) };
        ICollection<A> field5 = ||new B[0]|(84)|(85);
        ICollection<A> field6 = new B[3];
        ICollection<A> field7 = |new[]|(86) { new B(1), new B(2), new B(3) };
        ICollection<A> field8 = |Array.Empty<B>()|(87);

        void Method(B a, B b, B c)
        {
            ICollection<A> var1 = |new B[]|(88) { };
            ICollection<A> var2 = |new B[]|(89) { a, b, c };
            ICollection<A> var3 = ||new B[0]|(90) { }|(91);
            ICollection<A> var4 = |new B[3]|(92) { a, b, c };
            ICollection<A> var5 = ||new B[0]|(93)|(94);
            ICollection<A> var6 = new B[3];
            ICollection<A> var7 = |new[]|(95) { a, b, c };
            ICollection<A> var8 = |Array.Empty<B>()|(96);

            Consumer(|new B[]|(97) { });
            Consumer(|new B[]|(98) { a, b, c });
            Consumer(||new B[0]|(99) { }|(100));
            Consumer(|new B[3]|(101) { a, b, c });
            Consumer(||new B[0]|(102)|(103));
            Consumer(new B[3]);
            Consumer(|new[]|(104) { a, b, c });
            Consumer(|Array.Empty<B>()|(105));
        }

        void Consumer(ICollection<A> items) { }

        ICollection<A> Property1 { get; } = |new B[]|(106) { };
        ICollection<A> Property2 { get; } = new B[] { new(1), new(2), new(3) };
        ICollection<A> Property3 { get; set; } = ||new B[0]|(107) { }|(108);
        ICollection<A> Property4 { get; set; } = |new B[3]|(109) { new B(1), new B(2), new B(3) };
        ICollection<A> Property5 => ||new B[0]|(110)|(111);
        ICollection<A> Property6 => new B[3];
        ICollection<A> Property7 => |new[]|(112) { new B(1), new B(2), new B(3) };
        ICollection<A> Property8 => |Array.Empty<B>()|(113);
    }
}
---------------------------------------------------------
(0): ReSharper Suggestion: Use collection expression
(1): ReSharper Suggestion: Use collection expression
(2): ReSharper Suggestion: Use collection expression
(3):<overlapped> ReSharper Suggestion: Use 'Array.Empty<int>()' to avoid array allocation
(4): ReSharper Suggestion: Use collection expression
(5): ReSharper Suggestion: Use 'Array.Empty<int>()' to avoid array allocation
(6): ReSharper Suggestion: Use collection expression ('List<int>' will be used).
(7): ReSharper Suggestion: Use collection expression
(8): ReSharper Suggestion: Use collection expression ('List<int>' will be used).
(9): ReSharper Suggestion: Use collection expression
(10): ReSharper Suggestion: Use collection expression
(11): ReSharper Suggestion: Use collection expression
(12):<overlapped> ReSharper Suggestion: Use 'Array.Empty<int>()' to avoid array allocation
(13): ReSharper Suggestion: Use collection expression
(14): ReSharper Suggestion: Use 'Array.Empty<int>()' to avoid array allocation
(15): ReSharper Suggestion: Use collection expression ('List<int>' will be used).
(16): ReSharper Suggestion: Use collection expression
(17): ReSharper Suggestion: Use collection expression ('List<int>' will be used).
(18): ReSharper Suggestion: Use collection expression
(19): ReSharper Suggestion: Use collection expression
(20): ReSharper Suggestion: Use collection expression
(21):<overlapped> ReSharper Suggestion: Use 'Array.Empty<int>()' to avoid array allocation
(22): ReSharper Suggestion: Use collection expression
(23): ReSharper Suggestion: Use 'Array.Empty<int>()' to avoid array allocation
(24): ReSharper Suggestion: Use collection expression ('List<int>' will be used).
(25): ReSharper Suggestion: Use collection expression
(26): ReSharper Suggestion: Use collection expression ('List<int>' will be used).
(27): ReSharper Suggestion: Use collection expression ('List<int>' will be used).
(28): ReSharper Suggestion: Use collection expression
(29): ReSharper Suggestion: Use collection expression
(30):<overlapped> ReSharper Suggestion: Use 'Array.Empty<int>()' to avoid array allocation
(31): ReSharper Suggestion: Use collection expression
(32): ReSharper Suggestion: Use 'Array.Empty<int>()' to avoid array allocation
(33): ReSharper Suggestion: Use collection expression ('List<int>' will be used).
(34): ReSharper Suggestion: Use collection expression
(35): ReSharper Suggestion: Use collection expression ('List<int>' will be used).
(36): ReSharper Suggestion: Use collection expression
(37): ReSharper Suggestion: Use collection expression
(38): ReSharper Suggestion: Use collection expression
(39):<overlapped> ReSharper Suggestion: Use 'Array.Empty<string?>()' to avoid array allocation
(40): ReSharper Suggestion: Use collection expression
(41): ReSharper Suggestion: Use 'Array.Empty<string?>()' to avoid array allocation
(42): ReSharper Suggestion: Use collection expression ('List<string?>' will be used).
(43): ReSharper Suggestion: Use collection expression
(44): ReSharper Suggestion: Use collection expression
(45): ReSharper Suggestion: Use collection expression
(46): ReSharper Suggestion: Use collection expression
(47):<overlapped> ReSharper Suggestion: Use 'Array.Empty<T>()' to avoid array allocation
(48): ReSharper Suggestion: Use collection expression
(49): ReSharper Suggestion: Use 'Array.Empty<T>()' to avoid array allocation
(50): ReSharper Suggestion: Use collection expression ('List<T>' will be used).
(51):<overlapped> ReSharper Suggestion: Use collection expression
(52): ReSharper Suggestion: Use collection expression ('List<T>' will be used).
(53): ReSharper Suggestion: Use collection expression
(54): ReSharper Suggestion: Use collection expression
(55): ReSharper Suggestion: Use collection expression
(56):<overlapped> ReSharper Suggestion: Use 'Array.Empty<T>()' to avoid array allocation
(57): ReSharper Suggestion: Use collection expression
(58): ReSharper Suggestion: Use 'Array.Empty<T>()' to avoid array allocation
(59): ReSharper Suggestion: Use collection expression ('List<T>' will be used).
(60): ReSharper Suggestion: Use collection expression
(61): ReSharper Suggestion: Use collection expression ('List<T>' will be used).
(62): ReSharper Suggestion: Use collection expression
(63): ReSharper Suggestion: Use collection expression
(64): ReSharper Suggestion: Use collection expression
(65):<overlapped> ReSharper Suggestion: Use 'Array.Empty<T>()' to avoid array allocation
(66): ReSharper Suggestion: Use collection expression
(67): ReSharper Suggestion: Use 'Array.Empty<T>()' to avoid array allocation
(68): ReSharper Suggestion: Use collection expression ('List<T>' will be used).
(69): ReSharper Suggestion: Use collection expression
(70): ReSharper Suggestion: Use collection expression ('List<T>' will be used).
(71): ReSharper Suggestion: Use collection expression
(72): ReSharper Suggestion: Use collection expression
(73): ReSharper Suggestion: Use collection expression
(74):<overlapped> ReSharper Suggestion: Use 'Array.Empty<T>()' to avoid array allocation
(75): ReSharper Suggestion: Use collection expression
(76): ReSharper Suggestion: Use 'Array.Empty<T>()' to avoid array allocation
(77): ReSharper Suggestion: Use collection expression ('List<T>' will be used).
(78):<overlapped> ReSharper Suggestion: Use collection expression
(79): ReSharper Suggestion: Use collection expression ('List<T>' will be used).
(80): ReSharper Suggestion: Use collection expression ('List<A>' will be used).
(81): ReSharper Suggestion: Use collection expression ('List<A>' will be used).
(82): ReSharper Suggestion: Use 'Array.Empty<B>()' to avoid array allocation
(83): ReSharper Suggestion: Use collection expression ('List<A>' will be used).
(84): ReSharper Suggestion: Use 'Array.Empty<B>()' to avoid array allocation
(85): ReSharper Suggestion: Use collection expression ('List<A>' will be used).
(86): ReSharper Suggestion: Use collection expression
(87): ReSharper Suggestion: Use collection expression ('List<A>' will be used).
(88): ReSharper Suggestion: Use collection expression ('List<A>' will be used).
(89): ReSharper Suggestion: Use collection expression ('List<A>' will be used).
(90): ReSharper Suggestion: Use collection expression ('List<A>' will be used).
(91): ReSharper Suggestion: Use 'Array.Empty<B>()' to avoid array allocation
(92): ReSharper Suggestion: Use collection expression ('List<A>' will be used).
(93): ReSharper Suggestion: Use 'Array.Empty<B>()' to avoid array allocation
(94): ReSharper Suggestion: Use collection expression ('List<A>' will be used).
(95): ReSharper Suggestion: Use collection expression
(96): ReSharper Suggestion: Use collection expression ('List<A>' will be used).
(97): ReSharper Suggestion: Use collection expression ('List<A>' will be used).
(98): ReSharper Suggestion: Use collection expression ('List<A>' will be used).
(99): ReSharper Suggestion: Use collection expression ('List<A>' will be used).
(100): ReSharper Suggestion: Use 'Array.Empty<B>()' to avoid array allocation
(101): ReSharper Suggestion: Use collection expression ('List<A>' will be used).
(102): ReSharper Suggestion: Use 'Array.Empty<B>()' to avoid array allocation
(103): ReSharper Suggestion: Use collection expression ('List<A>' will be used).
(104): ReSharper Suggestion: Use collection expression
(105): ReSharper Suggestion: Use collection expression ('List<A>' will be used).
(106): ReSharper Suggestion: Use collection expression ('List<A>' will be used).
(107): ReSharper Suggestion: Use collection expression ('List<A>' will be used).
(108): ReSharper Suggestion: Use 'Array.Empty<B>()' to avoid array allocation
(109): ReSharper Suggestion: Use collection expression ('List<A>' will be used).
(110): ReSharper Suggestion: Use 'Array.Empty<B>()' to avoid array allocation
(111): ReSharper Suggestion: Use collection expression ('List<A>' will be used).
(112): ReSharper Suggestion: Use collection expression
(113): ReSharper Suggestion: Use collection expression ('List<A>' will be used).
