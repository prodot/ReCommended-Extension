using System.Collections;
using System.Collections.Generic;
using System.Linq;

namespace Test
{
    class CustomList<T> : IList<T>
    {
        public int IndexOf(T item) => throw new NotImplementedException();
    
        public void Insert(int index, T item) => throw new NotImplementedException();
    
        public void RemoveAt(int index) => throw new NotImplementedException();
    
        public T this[int index]
        {
            get => throw new NotImplementedException();
            set => throw new NotImplementedException();
        }
    
        public void Add(T item) => throw new NotImplementedException();
    
        public void Clear() => throw new NotImplementedException();
    
        public bool Contains(T item) => throw new NotImplementedException();
    
        public void CopyTo(T[] array, int arrayIndex) => throw new NotImplementedException();
    
        public bool Remove(T item) => throw new NotImplementedException();
    
        public int Count => throw new NotImplementedException();
    
        public bool IsReadOnly => throw new NotImplementedException();
    
        public IEnumerator<T> GetEnumerator() => throw new NotImplementedException();
    
        IEnumerator IEnumerable.GetEnumerator() => GetEnumerator();
    }

    class CustomListUniqueItems<T> : CustomList<T>, ISet<T>
    {
        public bool Add(T item) => throw new NotImplementedException();

        public void UnionWith(IEnumerable<T> other) => throw new NotImplementedException();

        public void IntersectWith(IEnumerable<T> other) => throw new NotImplementedException();

        public void ExceptWith(IEnumerable<T> other) => throw new NotImplementedException();

        public void SymmetricExceptWith(IEnumerable<T> other) => throw new NotImplementedException();

        public bool IsSubsetOf(IEnumerable<T> other) => throw new NotImplementedException();

        public bool IsSupersetOf(IEnumerable<T> other) => throw new NotImplementedException();

        public bool IsProperSupersetOf(IEnumerable<T> other) => throw new NotImplementedException();

        public bool IsProperSubsetOf(IEnumerable<T> other) => throw new NotImplementedException();

        public bool Overlaps(IEnumerable<T> other) => throw new NotImplementedException();

        public bool SetEquals(IEnumerable<T> other) => throw new NotImplementedException();
    }

    public class IndexableCollections
    {
        public void NonGenericMethod(IList<int> list)
        {
            var last1 = list.|LastOrDefault()|(0);
            var last2 = list.|LastOrDefault(1)|(1);
        }
        
        public void GenericMethod<T>(IList<T> list2, T fallback)
        {
            var last1 = list2.|LastOrDefault()|(2);
            var last2 = list2.|LastOrDefault(fallback)|(3);
        }
        
        public void ConstrainedGenericMethod<L>(L list3) where L : IList<int>
        {
            var last1 = list3.|LastOrDefault()|(4);
            var last2 = list3.|LastOrDefault(1)|(5);
        }
        
        public void Method(object list4)
        {
            var last1 = ((IList<int>)list4).|LastOrDefault()|(6);
            var last2 = ((IList<int>)list4).|LastOrDefault(1)|(7);
        }
        
        public void NonGenericMethod(List<int> list5)
        {
            var last1 = list5.|LastOrDefault()|(8);
            var last2 = list5.|LastOrDefault(1)|(9);
        }

        public void NonGenericMethod(int[] list6)
        {
            var last1 = list6.|LastOrDefault()|(10);
            var last2 = list6.|LastOrDefault(1)|(11);
        }

        public void NonGenericMethod(int[][] list7, int[] fallback)
        {
            var last1 = list7.|LastOrDefault()|(12);
            var last2 = list7.|LastOrDefault(fallback)|(13);
        }

        public void GenericMethod<T>(CustomList<T> list8, T fallback)
        {
            var last1 = list8.|LastOrDefault()|(14);
            var last2 = list8.|LastOrDefault(fallback)|(15);
        }

        public void NonGenericMethod(IReadOnlyList<int> list9)
        {
            var last1 = list9.|LastOrDefault()|(16);
            var last2 = list9.|LastOrDefault(2)|(17);
        }

        public void NonMatch(IList<int> list)
        {
            var last1 = list.LastOrDefault(x => x > 0);
            var last2 = list.LastOrDefault(x => x > 0, 1);
        }
    }

    public class MixedBehaviorCollections
    {
        public void Method(CustomListUniqueItems<int> list)
        {
            var last1 = list.|LastOrDefault()|(18);
            var last2 = list.|LastOrDefault(1)|(19);
            var last3 = list.LastOrDefault(x => x > 0);
            var last4 = list.LastOrDefault(x => x > 0, 1);
        }
    }

    public class DistinctCollections
    {
        public void NonGenericMethod(ISet<int> collection)
        {
            var last1 = collection.|LastOrDefault()|(20);
            var last2 = collection.|LastOrDefault(1)|(21);
            var last3 = collection.|LastOrDefault(x => x > 0)|(22);
            var last4 = collection.|LastOrDefault(x => x > 0, 1)|(23);
        }

        public void NonGenericMethod(IReadOnlySet<int> collection)
        {
            var last1 = collection.|LastOrDefault()|(24);
            var last2 = collection.|LastOrDefault(1)|(25);
            var last3 = collection.|LastOrDefault(x => x > 0)|(26);
            var last4 = collection.|LastOrDefault(x => x > 0, 1)|(27);
        }

        public void NonGenericMethod(Dictionary<int, string>.KeyCollection collection)
        {
            var last1 = collection.|LastOrDefault()|(28);
            var last2 = collection.|LastOrDefault(1)|(29);
            var last3 = collection.|LastOrDefault(x => x > 0)|(30);
            var last4 = collection.|LastOrDefault(x => x > 0, 1)|(31);
        }

        public void NonGenericMethod(HashSet<int> collection)
        {
            var last1 = collection.|LastOrDefault()|(32);
            var last2 = collection.|LastOrDefault(1)|(33);
            var last3 = collection.|LastOrDefault(x => x > 0)|(34);
            var last4 = collection.|LastOrDefault(x => x > 0, 1)|(35);
        }

        public void GenericMethod<T>(HashSet<T> collection, T fallback)
        {
            var last1 = collection.|LastOrDefault()|(36);
            var last2 = collection.|LastOrDefault(fallback)|(37);
            var last3 = collection.|LastOrDefault(x => x.ToString() != "")|(38);
            var last4 = collection.|LastOrDefault(x => x.ToString() != "", fallback)|(39);
        }

        public void ConstrainedGenericMethod<L>(L collection) where L : IReadOnlySet<int>
        {
            var last1 = collection.|LastOrDefault()|(40);
            var last2 = collection.|LastOrDefault(1)|(41);
            var last3 = collection.|LastOrDefault(x => x > 0)|(42);
            var last4 = collection.|LastOrDefault(x => x > 0, 1)|(43);
        }
    }
}
---------------------------------------------------------
(0): ReSharper Suggestion: Use list pattern
(1): ReSharper Suggestion: Use list pattern
(2): ReSharper Suggestion: Use list pattern
(3): ReSharper Suggestion: Use list pattern
(4): ReSharper Suggestion: Use list pattern
(5): ReSharper Suggestion: Use list pattern
(6): ReSharper Suggestion: Use list pattern
(7): ReSharper Suggestion: Use list pattern
(8): ReSharper Suggestion: Use list pattern
(9): ReSharper Suggestion: Use list pattern
(10): ReSharper Suggestion: Use list pattern
(11): ReSharper Suggestion: Use list pattern
(12): ReSharper Suggestion: Use list pattern
(13): ReSharper Suggestion: Use list pattern
(14): ReSharper Suggestion: Use list pattern
(15): ReSharper Suggestion: Use list pattern
(16): ReSharper Suggestion: Use list pattern
(17): ReSharper Suggestion: Use list pattern
(18): ReSharper Suggestion: Use list pattern
(19): ReSharper Suggestion: Use list pattern
(20): ReSharper Warning: The collection doesn't guarantee ordering, so retrieving a "last" item could result in unpredictable behavior.
(21): ReSharper Warning: The collection doesn't guarantee ordering, so retrieving a "last" item could result in unpredictable behavior.
(22): ReSharper Warning: The collection doesn't guarantee ordering, so retrieving a "last" item could result in unpredictable behavior.
(23): ReSharper Warning: The collection doesn't guarantee ordering, so retrieving a "last" item could result in unpredictable behavior.
(24): ReSharper Warning: The collection doesn't guarantee ordering, so retrieving a "last" item could result in unpredictable behavior.
(25): ReSharper Warning: The collection doesn't guarantee ordering, so retrieving a "last" item could result in unpredictable behavior.
(26): ReSharper Warning: The collection doesn't guarantee ordering, so retrieving a "last" item could result in unpredictable behavior.
(27): ReSharper Warning: The collection doesn't guarantee ordering, so retrieving a "last" item could result in unpredictable behavior.
(28): ReSharper Warning: The collection doesn't guarantee ordering, so retrieving a "last" item could result in unpredictable behavior.
(29): ReSharper Warning: The collection doesn't guarantee ordering, so retrieving a "last" item could result in unpredictable behavior.
(30): ReSharper Warning: The collection doesn't guarantee ordering, so retrieving a "last" item could result in unpredictable behavior.
(31): ReSharper Warning: The collection doesn't guarantee ordering, so retrieving a "last" item could result in unpredictable behavior.
(32): ReSharper Warning: The collection doesn't guarantee ordering, so retrieving a "last" item could result in unpredictable behavior.
(33): ReSharper Warning: The collection doesn't guarantee ordering, so retrieving a "last" item could result in unpredictable behavior.
(34): ReSharper Warning: The collection doesn't guarantee ordering, so retrieving a "last" item could result in unpredictable behavior.
(35): ReSharper Warning: The collection doesn't guarantee ordering, so retrieving a "last" item could result in unpredictable behavior.
(36): ReSharper Warning: The collection doesn't guarantee ordering, so retrieving a "last" item could result in unpredictable behavior.
(37): ReSharper Warning: The collection doesn't guarantee ordering, so retrieving a "last" item could result in unpredictable behavior.
(38): ReSharper Warning: The collection doesn't guarantee ordering, so retrieving a "last" item could result in unpredictable behavior.
(39): ReSharper Warning: The collection doesn't guarantee ordering, so retrieving a "last" item could result in unpredictable behavior.
(40): ReSharper Warning: The collection doesn't guarantee ordering, so retrieving a "last" item could result in unpredictable behavior.
(41): ReSharper Warning: The collection doesn't guarantee ordering, so retrieving a "last" item could result in unpredictable behavior.
(42): ReSharper Warning: The collection doesn't guarantee ordering, so retrieving a "last" item could result in unpredictable behavior.
(43): ReSharper Warning: The collection doesn't guarantee ordering, so retrieving a "last" item could result in unpredictable behavior.
