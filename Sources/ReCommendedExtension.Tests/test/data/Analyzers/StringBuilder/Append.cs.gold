using System;
using System.Text;

namespace Test
{
    public class StringBuilders
    {
        public void RedundantInvocation(StringBuilder builder, char c, string s, StringBuilder sb)
        {
            var result11 = builder.|Append(c, 0)|(0);
            var result12 = builder.Append(c).|Append(c, 0)|(1);

            builder.Append(c).|Append(c, 0)|(2);
            |builder.Append(c, 0)|(3);
            builder.|Append(c, 0)|(4).Append(c);

            var result21 = builder.|Append(null as char[])|(5);
            var result22 = builder.|Append((char[]?)null)|(6);
            var result23 = builder.|Append((char[])[])|(7);
            var result24 = builder.|Append(new char[0])|(8);
            var result25 = builder.|Append(new char[] { })|(9);
            var result26 = builder.|Append(Array.Empty<char>())|(10);

            |builder.Append(null as char[])|(11);
            |builder.Append((char[]?)null)|(12);
            |builder.Append((char[])[])|(13);
            |builder.Append(new char[0])|(14);
            |builder.Append(new char[] { })|(15);
            |builder.Append(Array.Empty<char>())|(16);

            var result31 = builder.|Append(null as char[], 0, 0)|(17);
            var result32 = builder.|Append((char[]?)null, 0, 0)|(18);
            var result33 = builder.|Append([], 0, 0)|(19);
            var result34 = builder.|Append(new char[0], 0, 0)|(20);
            var result35 = builder.|Append(new char[] { }, 0, 0)|(21);
            var result36 = builder.|Append(Array.Empty<char>(), 0, 0)|(22);

            |builder.Append(null as char[], 0, 0)|(23);
            |builder.Append((char[]?)null, 0, 0)|(24);
            |builder.Append([], 0, 0)|(25);
            |builder.Append(new char[0], 0, 0)|(26);
            |builder.Append(new char[] { }, 0, 0)|(27);
            |builder.Append(Array.Empty<char>(), 0, 0)|(28);

            var result41 = builder.|Append(null as string)|(29);
            var result42 = builder.|Append("")|(30);

            |builder.Append(null as string)|(31);
            |builder.Append("")|(32);

            var result51 = builder.|Append(null as string, 0, 0)|(33);
            var result52 = builder.|Append(s, 10, 0)|(34);

            |builder.Append(null as string, 0, 0)|(35);
            |builder.Append(s, 10, 0)|(36);

            var result61 = builder.|Append(null as StringBuilder)|(37);

            |builder.Append(null as StringBuilder)|(38);

            var result71 = builder.|Append(null as StringBuilder, 0, 0)|(39);
            var result72 = builder.|Append(sb, 10, 0)|(40);

            |builder.Append(null as StringBuilder, 0, 0)|(41);
            |builder.Append(sb, 10, 0)|(42);

            var result81 = builder.|Append(null as object)|(43);

            |builder.Append(null as object)|(44);
        }

        public void RedundantInvocation_Nullable(StringBuilder? builder, char c, string s, StringBuilder sb)
        {
            var result1 = builder?.|Append(c, 0)|(45);
            var result2 = builder?.Append(c)?.|Append(c, 0)|(46);

            builder?.Append(c)?.|Append(c, 0)|(47);
            |builder?.Append(c, 0)|(48);
            builder?.|Append(c, 0)|(49)?.Append(c);

            var result21 = builder?.|Append(null as char[])|(50);
            var result22 = builder?.|Append((char[]?)null)|(51);
            var result23 = builder?.|Append((char[])[])|(52);
            var result24 = builder?.|Append(new char[0])|(53);
            var result25 = builder?.|Append(new char[] { })|(54);
            var result26 = builder?.|Append(Array.Empty<char>())|(55);

            |builder?.Append(null as char[])|(56);
            |builder?.Append((char[]?)null)|(57);
            |builder?.Append((char[])[])|(58);
            |builder?.Append(new char[0])|(59);
            |builder?.Append(new char[] { })|(60);
            |builder?.Append(Array.Empty<char>())|(61);

            var result31 = builder?.|Append(null as char[], 0, 0)|(62);
            var result32 = builder?.|Append((char[]?)null, 0, 0)|(63);
            var result33 = builder?.|Append([], 0, 0)|(64);
            var result34 = builder?.|Append(new char[0], 0, 0)|(65);
            var result35 = builder?.|Append(new char[] { }, 0, 0)|(66);
            var result36 = builder?.|Append(Array.Empty<char>(), 0, 0)|(67);

            |builder?.Append(null as char[], 0, 0)|(68);
            |builder?.Append((char[]?)null, 0, 0)|(69);
            |builder?.Append([], 0, 0)|(70);
            |builder?.Append(new char[0], 0, 0)|(71);
            |builder?.Append(new char[] { }, 0, 0)|(72);
            |builder?.Append(Array.Empty<char>(), 0, 0)|(73);

            var result41 = builder?.|Append(null as string)|(74);
            var result42 = builder?.|Append("")|(75);

            |builder?.Append(null as string)|(76);
            |builder?.Append("")|(77);

            var result51 = builder?.|Append(null as string, 0, 0)|(78);
            var result52 = builder?.|Append(s, 10, 0)|(79);

            |builder?.Append(null as string, 0, 0)|(80);
            |builder?.Append(s, 10, 0)|(81);

            var result61 = builder?.|Append(null as StringBuilder)|(82);

            |builder?.Append(null as StringBuilder)|(83);

            var result71 = builder?.|Append(null as StringBuilder, 0, 0)|(84);
            var result72 = builder?.|Append(sb, 10, 0)|(85);

            |builder?.Append(null as StringBuilder, 0, 0)|(86);
            |builder?.Append(sb, 10, 0)|(87);

            var result81 = builder?.|Append(null as object)|(88);

            |builder?.Append(null as object)|(89);
        }

        public void RedundantArgument(StringBuilder builder, char c)
        {
            var result = builder.Append(c, |1|(90));

            builder.Append(c, |1|(91));
        }

        public void RedundantArgument_Nullable(StringBuilder? builder, char c)
        {
            var result = builder?.Append(c, |1|(92));

            builder?.Append(c, |1|(93));
        }

        public void SingleCharacter(StringBuilder builder)
        {
            var result1 = builder.Append(|"a"|(94));
            var result2 = builder.Append(|"abcde"|(95), 1, 1);

            builder.Append(|"a"|(96));
            builder.Append(|"abcde"|(97), 1, 1);
        }

        public void SingleCharacter_Nullable(StringBuilder? builder)
        {
            var result1 = builder?.Append(|"a"|(98));
            var result2 = builder?.Append(|"abcde"|(99), 1, 1);

            builder?.Append(|"a"|(100));
            builder?.Append(|"abcde"|(101), 1, 1);
        }

        public void NoDetection(StringBuilder builder, char c, int repeatCount, string s, string? sn, int startIndex, int count, StringBuilder sb, StringBuilder? sbn, object obj)
        {
            var result1 = builder.Append(c, repeatCount);

            var result2 = builder.Append([c]);

            var result31 = builder.Append([c], 0, 0);
            var result32 = builder.Append([], 1, 0);
            var result33 = builder.Append([], 0, 1);

            var result41 = builder.Append(s);

            var result51 = builder.Append(s, startIndex, 0);
            var result52 = builder.Append(s, 0, count);
            var result53 = builder.Append(s, startIndex, count);
            var result54 = builder.Append(sn, 1, 0);
            var result55 = builder.Append(s, 2, 1);
            var result56 = builder.Append("abc", startIndex, 1);
            var result57 = builder.Append("abc", 1, count);

            var result61 = builder.Append(sb);

            var result71 = builder.Append(sb, startIndex, 0);
            var result72 = builder.Append(sb, 0, count);
            var result73 = builder.Append(sb, startIndex, count);
            var result74 = builder.Append(sbn, 1, 0);
            var result75 = builder.Append(sb, 2, 1);

            var result81 = builder.Append(obj);
        }
    }
}
---------------------------------------------------------
(0): ReSharper Dead Code: Calling 'Append' with the repeat count 0 is redundant.
(1): ReSharper Dead Code: Calling 'Append' with the repeat count 0 is redundant.
(2): ReSharper Dead Code: Calling 'Append' with the repeat count 0 is redundant.
(3): ReSharper Dead Code: Calling 'Append' with the repeat count 0 is redundant.
(4): ReSharper Dead Code: Calling 'Append' with the repeat count 0 is redundant.
(5): ReSharper Dead Code: Calling 'Append' with null is redundant.
(6): ReSharper Dead Code: Calling 'Append' with null is redundant.
(7): ReSharper Dead Code: Calling 'Append' with an empty array is redundant.
(8): ReSharper Dead Code: Calling 'Append' with an empty array is redundant.
(9): ReSharper Dead Code: Calling 'Append' with an empty array is redundant.
(10): ReSharper Dead Code: Calling 'Append' with an empty array is redundant.
(11): ReSharper Dead Code: Calling 'Append' with null is redundant.
(12): ReSharper Dead Code: Calling 'Append' with null is redundant.
(13): ReSharper Dead Code: Calling 'Append' with an empty array is redundant.
(14): ReSharper Dead Code: Calling 'Append' with an empty array is redundant.
(15): ReSharper Dead Code: Calling 'Append' with an empty array is redundant.
(16): ReSharper Dead Code: Calling 'Append' with an empty array is redundant.
(17): ReSharper Dead Code: Calling 'Append' with null is redundant.
(18): ReSharper Dead Code: Calling 'Append' with null is redundant.
(19): ReSharper Dead Code: Calling 'Append' with an empty array is redundant.
(20): ReSharper Dead Code: Calling 'Append' with an empty array is redundant.
(21): ReSharper Dead Code: Calling 'Append' with an empty array is redundant.
(22): ReSharper Dead Code: Calling 'Append' with an empty array is redundant.
(23): ReSharper Dead Code: Calling 'Append' with null is redundant.
(24): ReSharper Dead Code: Calling 'Append' with null is redundant.
(25): ReSharper Dead Code: Calling 'Append' with an empty array is redundant.
(26): ReSharper Dead Code: Calling 'Append' with an empty array is redundant.
(27): ReSharper Dead Code: Calling 'Append' with an empty array is redundant.
(28): ReSharper Dead Code: Calling 'Append' with an empty array is redundant.
(29): ReSharper Dead Code: Calling 'Append' with null is redundant.
(30): ReSharper Dead Code: Calling 'Append' with an empty string is redundant.
(31): ReSharper Dead Code: Calling 'Append' with null is redundant.
(32): ReSharper Dead Code: Calling 'Append' with an empty string is redundant.
(33): ReSharper Dead Code: Calling 'Append' with (null, 0, 0) is redundant.
(34): ReSharper Dead Code: Calling 'Append' with the count 0 is redundant.
(35): ReSharper Dead Code: Calling 'Append' with (null, 0, 0) is redundant.
(36): ReSharper Dead Code: Calling 'Append' with the count 0 is redundant.
(37): ReSharper Dead Code: Calling 'Append' with null is redundant.
(38): ReSharper Dead Code: Calling 'Append' with null is redundant.
(39): ReSharper Dead Code: Calling 'Append' with (null, 0, 0) is redundant.
(40): ReSharper Dead Code: Calling 'Append' with the count 0 is redundant.
(41): ReSharper Dead Code: Calling 'Append' with (null, 0, 0) is redundant.
(42): ReSharper Dead Code: Calling 'Append' with the count 0 is redundant.
(43): ReSharper Dead Code: Calling 'Append' with null is redundant.
(44): ReSharper Dead Code: Calling 'Append' with null is redundant.
(45): ReSharper Dead Code: Calling 'Append' with the repeat count 0 is redundant.
(46): ReSharper Dead Code: Calling 'Append' with the repeat count 0 is redundant.
(47): ReSharper Dead Code: Calling 'Append' with the repeat count 0 is redundant.
(48): ReSharper Dead Code: Calling 'Append' with the repeat count 0 is redundant.
(49): ReSharper Dead Code: Calling 'Append' with the repeat count 0 is redundant.
(50): ReSharper Dead Code: Calling 'Append' with null is redundant.
(51): ReSharper Dead Code: Calling 'Append' with null is redundant.
(52): ReSharper Dead Code: Calling 'Append' with an empty array is redundant.
(53): ReSharper Dead Code: Calling 'Append' with an empty array is redundant.
(54): ReSharper Dead Code: Calling 'Append' with an empty array is redundant.
(55): ReSharper Dead Code: Calling 'Append' with an empty array is redundant.
(56): ReSharper Dead Code: Calling 'Append' with null is redundant.
(57): ReSharper Dead Code: Calling 'Append' with null is redundant.
(58): ReSharper Dead Code: Calling 'Append' with an empty array is redundant.
(59): ReSharper Dead Code: Calling 'Append' with an empty array is redundant.
(60): ReSharper Dead Code: Calling 'Append' with an empty array is redundant.
(61): ReSharper Dead Code: Calling 'Append' with an empty array is redundant.
(62): ReSharper Dead Code: Calling 'Append' with null is redundant.
(63): ReSharper Dead Code: Calling 'Append' with null is redundant.
(64): ReSharper Dead Code: Calling 'Append' with an empty array is redundant.
(65): ReSharper Dead Code: Calling 'Append' with an empty array is redundant.
(66): ReSharper Dead Code: Calling 'Append' with an empty array is redundant.
(67): ReSharper Dead Code: Calling 'Append' with an empty array is redundant.
(68): ReSharper Dead Code: Calling 'Append' with null is redundant.
(69): ReSharper Dead Code: Calling 'Append' with null is redundant.
(70): ReSharper Dead Code: Calling 'Append' with an empty array is redundant.
(71): ReSharper Dead Code: Calling 'Append' with an empty array is redundant.
(72): ReSharper Dead Code: Calling 'Append' with an empty array is redundant.
(73): ReSharper Dead Code: Calling 'Append' with an empty array is redundant.
(74): ReSharper Dead Code: Calling 'Append' with null is redundant.
(75): ReSharper Dead Code: Calling 'Append' with an empty string is redundant.
(76): ReSharper Dead Code: Calling 'Append' with null is redundant.
(77): ReSharper Dead Code: Calling 'Append' with an empty string is redundant.
(78): ReSharper Dead Code: Calling 'Append' with (null, 0, 0) is redundant.
(79): ReSharper Dead Code: Calling 'Append' with the count 0 is redundant.
(80): ReSharper Dead Code: Calling 'Append' with (null, 0, 0) is redundant.
(81): ReSharper Dead Code: Calling 'Append' with the count 0 is redundant.
(82): ReSharper Dead Code: Calling 'Append' with null is redundant.
(83): ReSharper Dead Code: Calling 'Append' with null is redundant.
(84): ReSharper Dead Code: Calling 'Append' with (null, 0, 0) is redundant.
(85): ReSharper Dead Code: Calling 'Append' with the count 0 is redundant.
(86): ReSharper Dead Code: Calling 'Append' with (null, 0, 0) is redundant.
(87): ReSharper Dead Code: Calling 'Append' with the count 0 is redundant.
(88): ReSharper Dead Code: Calling 'Append' with null is redundant.
(89): ReSharper Dead Code: Calling 'Append' with null is redundant.
(90): ReSharper Dead Code: Passing 1 is redundant.
(91): ReSharper Dead Code: Passing 1 is redundant.
(92): ReSharper Dead Code: Passing 1 is redundant.
(93): ReSharper Dead Code: Passing 1 is redundant.
(94): ReSharper Suggestion: Pass the single character.
(95): ReSharper Suggestion: Pass the single character.
(96): ReSharper Suggestion: Pass the single character.
(97): ReSharper Suggestion: Pass the single character.
(98): ReSharper Suggestion: Pass the single character.
(99): ReSharper Suggestion: Pass the single character.
(100): ReSharper Suggestion: Pass the single character.
(101): ReSharper Suggestion: Pass the single character.
