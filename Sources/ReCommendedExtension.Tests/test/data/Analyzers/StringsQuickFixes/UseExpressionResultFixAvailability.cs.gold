using System;

namespace Test
{
    public class Strings
    {
        public void Contains(string text, object someObject)
        {
            var result1 = |text.Contains("")|(0);
            var result2 = |text.Contains("", StringComparison.OrdinalIgnoreCase)|(1);

            var result3 = |$"{someObject}".Contains(value: "", StringComparison.OrdinalIgnoreCase)|(2);
        }

        public void EndsWith(string text, object someObject)
        {
            var result1 = |text.EndsWith("")|(3);
            var result2 = |text.EndsWith("", StringComparison.OrdinalIgnoreCase)|(4);

            var result3 = |$"{someObject}".EndsWith(value: "", StringComparison.OrdinalIgnoreCase)|(5);
        }

        public void IndexOf(string text, object someObject)
        {
            var result1 = |text.IndexOf("")|(6);
            var result2 = |text.IndexOf("", StringComparison.OrdinalIgnoreCase)|(7);

            var result3 = |$"{someObject}".IndexOf("", StringComparison.OrdinalIgnoreCase)|(8);
        }

        public void IndexOfAny(string text)
        {
            var result = |text.IndexOfAny([])|(9);
        }

        public void LastIndexOf(string text, char c)
        {
            var result = |text.LastIndexOf(c, 0)|(10);
        }

        public void LastIndexOfAny(string text, char[] c)
        {
            var result1 = |text.LastIndexOfAny([])|(11);
            var result2 = |text.LastIndexOfAny(c, 0)|(12);
            var result3 = |text.LastIndexOfAny(c, 0, 0)|(13);
            var result4 = |text.LastIndexOfAny(c, 0, 1)|(14);
        }

        public void Remove(string text)
        {
            var result = |text.Remove(0)|(15);
        }

        public void Split(string text, string s, int count, StringSplitOptions options)
        {
            var result11 = |text.Split('a', 0)|(16);
            var result12 = |text.Split('a', 0, options)|(17);
            var result13 = |text.Split('a', 1)|(18);
            var result14 = |text.Split('a', 1, StringSplitOptions.None)|(19);
            var result15 = |text.Split('a', 1, StringSplitOptions.TrimEntries)|(20);

            var result21 = |text.Split(['a'], 0)|(21);
            var result22 = |text.Split(['a'], 1)|(22);

            var result31 = |text.Split(['a'], 0, options)|(23);
            var result32 = |text.Split(['a'], 1, StringSplitOptions.None)|(24);
            var result33 = |text.Split(['a'], 1, StringSplitOptions.TrimEntries)|(25);

            var result41 = |text.Split(null as string)|(26);
            var result42 = |text.Split((string?)null)|(27);
            var result43 = |text.Split("")|(28);
            var result44 = |text.Split(null as string, StringSplitOptions.None)|(29);
            var result45 = |text.Split((string?)null, StringSplitOptions.None)|(30);
            var result46 = |text.Split("", StringSplitOptions.None)|(31);
            var result47 = |text.Split(null as string, StringSplitOptions.TrimEntries)|(32);
            var result48 = |text.Split((string?)null, StringSplitOptions.TrimEntries)|(33);
            var result49 = |text.Split("", StringSplitOptions.TrimEntries)|(34);

            var result51 = |text.Split(s, 0)|(35);
            var result52 = |text.Split(s, 0, options)|(36);
            var result53 = |text.Split(s, 1)|(37);
            var result54 = |text.Split(s, 1, StringSplitOptions.None)|(38);
            var result55 = |text.Split(s, 1, StringSplitOptions.TrimEntries)|(39);
            var result56 = |text.Split(null as string, count)|(40);
            var result57 = |text.Split(null as string, count, StringSplitOptions.None)|(41);
            var result58 = |text.Split(null as string, count, StringSplitOptions.TrimEntries)|(42);
            var result59 = |text.Split("", count)|(43);
            var result50 = |text.Split("", count, StringSplitOptions.None)|(44);
            var result5A = |text.Split("", count, StringSplitOptions.TrimEntries)|(45);

            var result61 = |text.Split([""], StringSplitOptions.None)|(46);
            var result62 = |text.Split([""], StringSplitOptions.TrimEntries)|(47);
            var result63 = |text.Split(new[] { "" }, StringSplitOptions.None)|(48);
            var result64 = |text.Split(new[] { "" }, StringSplitOptions.TrimEntries)|(49);

            var result71 = |text.Split([s], 0, options)|(50);
            var result72 = |text.Split([s], 1, StringSplitOptions.None)|(51);
            var result73 = |text.Split([s], 1, StringSplitOptions.TrimEntries)|(52);
            var result74 = |text.Split([""], count, StringSplitOptions.None)|(53);
            var result75 = |text.Split([""], count, StringSplitOptions.TrimEntries)|(54);
            var result76 = |text.Split(new[] { "" }, count, StringSplitOptions.None)|(55);
            var result77 = |text.Split(new[] { "" }, count, StringSplitOptions.TrimEntries)|(56);
        }

        public void StartsWith(string text, object someObject)
        {
            var result1 = |text.StartsWith("")|(57);
            var result2 = |text.StartsWith("", StringComparison.OrdinalIgnoreCase)|(58);

            var result3 = |$"{someObject}".StartsWith(value: "", StringComparison.OrdinalIgnoreCase)|(59);
        }

        public void Join_Empty(string s, char c, string?[] stringItems, string stringItem)
        {
            var result11 = |string.Join(s, (object?[])[])|(60);
            var result12 = |string.Join(s, new object?[0])|(61);
            var result13 = |string.Join(s, new object?[] { })|(62);
            var result14 = |string.Join(s, Array.Empty<object?>())|(63);

            var result21 = |string.Join(s, (int[])[])|(64);
            var result22 = |string.Join(s, new int[0])|(65);
            var result23 = |string.Join(s, new int[] { })|(66);
            var result24 = |string.Join(s, Array.Empty<int>())|(67);

            var result31 = |string.Join(s, (string?[])[])|(68);
            var result32 = |string.Join(s, new string?[0])|(69);
            var result33 = |string.Join(s, new string?[] { })|(70);
            var result34 = |string.Join(s, Array.Empty<string?>())|(71);

            var result41 = |string.Join(c, (object?[])[])|(72);
            var result42 = |string.Join(c, new object?[0])|(73);
            var result43 = |string.Join(c, new object?[] { })|(74);
            var result44 = |string.Join(c, Array.Empty<object?>())|(75);

            var result51 = |string.Join(c, (int[])[])|(76);
            var result52 = |string.Join(c, new int[0])|(77);
            var result53 = |string.Join(c, new int[] { })|(78);
            var result54 = |string.Join(c, Array.Empty<int>())|(79);

            var result61 = |string.Join(c, (string?[])[])|(80);
            var result62 = |string.Join(c, new string?[0])|(81);
            var result63 = |string.Join(c, new string?[] { })|(82);
            var result64 = |string.Join(c, Array.Empty<string?>())|(83);

            var result71 = |string.Join(s, default(ReadOnlySpan<object?>))|(84);
            var result72 = |string.Join(s, new ReadOnlySpan<object?>())|(85);
            var result73 = |string.Join(s, (ReadOnlySpan<object?>)[])|(86);

            var result81 = |string.Join(s, default(ReadOnlySpan<string?>))|(87);
            var result82 = |string.Join(s, new ReadOnlySpan<string?>())|(88);
            var result83 = |string.Join(s, (ReadOnlySpan<string?>)[])|(89);

            var result91 = |string.Join(c, default(ReadOnlySpan<object?>))|(90);
            var result92 = |string.Join(c, new ReadOnlySpan<object?>())|(91);
            var result93 = |string.Join(c, (ReadOnlySpan<object?>)[])|(92);

            var resultA1 = |string.Join(c, default(ReadOnlySpan<string?>))|(93);
            var resultA2 = |string.Join(c, new ReadOnlySpan<string?>())|(94);
            var resultA3 = |string.Join(c, (ReadOnlySpan<string?>)[])|(95);

            var resultB1 = |string.Join(s, stringItems, 0, 0)|(96);
            var resultB2 = |string.Join(s, [stringItem], 1, 0)|(97);

            var resultC1 = |string.Join(c, stringItems, 0, 0)|(98);
            var resultC2 = |string.Join(c, [stringItem], 1, 0)|(99);
        }

        public void Join_Item(string s, char c, object objectItem, int intItem, string stringItem, string?[] stringItems)
        {
            var result11 = |string.Join(s, (object?[])[objectItem])|(100);
            var result12 = |string.Join(s, new[] { objectItem })|(101);

            var result21 = |string.Join(s, (int[])[intItem])|(102);
            var result22 = |string.Join(s, new[] { intItem })|(103);

            var result31 = |string.Join(s, (string?[])[stringItem])|(104);
            var result32 = |string.Join(s, new[] { stringItem })|(105);

            var result41 = |string.Join(c, (object?[])[objectItem])|(106);
            var result43 = |string.Join(c, new[] { objectItem })|(107);

            var result51 = |string.Join(c, (int[])[intItem])|(108);
            var result52 = |string.Join(c, new[] { intItem })|(109);

            var result61 = |string.Join(c, (string?[])[stringItem])|(110);
            var result62 = |string.Join(c, new[] { stringItem })|(111);

            var result71 = |string.Join(s, [objectItem])|(112);
            var result72 = |string.Join(s, objectItem)|(113);

            var result81 = |string.Join(s, (ReadOnlySpan<string?>)[stringItem])|(114);
            var result82 = |string.Join(s, stringItem)|(115);

            var result91 = |string.Join(c, [objectItem])|(116);
            var result92 = |string.Join(c, objectItem)|(117);

            var resultA1 = |string.Join(c, (ReadOnlySpan<string?>)[stringItem])|(118);
            var resultA2 = |string.Join(c, stringItem)|(119);

            var resultB1 = |string.Join(s, [stringItem], 0, 1)|(120);

            var resultC1 = |string.Join(c, [stringItem], 0, 1)|(121);
        }
    }
}
------------------------------------------------
0: The expression is always true.
QUICKFIXES:
Replace with 'true'
1: The expression is always true.
QUICKFIXES:
Replace with 'true'
2: The expression is always true.
QUICKFIXES:
Replace with 'true'
3: The expression is always true.
QUICKFIXES:
Replace with 'true'
4: The expression is always true.
QUICKFIXES:
Replace with 'true'
5: The expression is always true.
QUICKFIXES:
Replace with 'true'
6: The expression is always 0.
QUICKFIXES:
Replace with '0'
7: The expression is always 0.
QUICKFIXES:
Replace with '0'
8: The expression is always 0.
QUICKFIXES:
Replace with '0'
9: The expression is always -1.
QUICKFIXES:
Replace with '-1'
10: The expression is always -1.
QUICKFIXES:
Replace with '-1'
11: The expression is always -1.
QUICKFIXES:
Replace with '-1'
12: The expression is always -1.
QUICKFIXES:
Replace with '-1'
13: The expression is always -1.
QUICKFIXES:
Replace with '-1'
14: The expression is always -1.
QUICKFIXES:
Replace with '-1'
15: The expression is always an empty string.
QUICKFIXES:
Replace with '""'
16: The expression is always an empty array.
QUICKFIXES:
Replace with 'Array.Empty<string>()'
17: The expression is always an empty array.
QUICKFIXES:
Replace with 'Array.Empty<string>()'
18: The expression is always an array with a single element.
QUICKFIXES:
Replace with 'new[] { text }'
19: The expression is always an array with a single element.
QUICKFIXES:
Replace with 'new[] { text }'
20: The expression is always an array with a single trimmed element.
QUICKFIXES:
Replace with 'new[] { text.Trim() }'
21: The expression is always an empty array.
QUICKFIXES:
Replace with 'Array.Empty<string>()'
22: The expression is always an array with a single element.
QUICKFIXES:
Replace with 'new[] { text }'
23: The expression is always an empty array.
QUICKFIXES:
Replace with 'Array.Empty<string>()'
24: The expression is always an array with a single element.
QUICKFIXES:
Replace with 'new[] { text }'
25: The expression is always an array with a single trimmed element.
QUICKFIXES:
Replace with 'new[] { text.Trim() }'
26: The expression is always an array with a single element.
QUICKFIXES:
Replace with 'new[] { text }'
27: The expression is always an array with a single element.
QUICKFIXES:
Replace with 'new[] { text }'
28: The expression is always an array with a single element.
QUICKFIXES:
Replace with 'new[] { text }'
29: The expression is always an array with a single element.
QUICKFIXES:
Replace with 'new[] { text }'
30: The expression is always an array with a single element.
QUICKFIXES:
Replace with 'new[] { text }'
31: The expression is always an array with a single element.
QUICKFIXES:
Replace with 'new[] { text }'
32: The expression is always an array with a single trimmed element.
QUICKFIXES:
Replace with 'new[] { text.Trim() }'
33: The expression is always an array with a single trimmed element.
QUICKFIXES:
Replace with 'new[] { text.Trim() }'
34: The expression is always an array with a single trimmed element.
QUICKFIXES:
Replace with 'new[] { text.Trim() }'
35: The expression is always an empty array.
QUICKFIXES:
Replace with 'Array.Empty<string>()'
36: The expression is always an empty array.
QUICKFIXES:
Replace with 'Array.Empty<string>()'
37: The expression is always an array with a single element.
QUICKFIXES:
Replace with 'new[] { text }'
38: The expression is always an array with a single element.
QUICKFIXES:
Replace with 'new[] { text }'
39: The expression is always an array with a single trimmed element.
QUICKFIXES:
Replace with 'new[] { text.Trim() }'
40: The expression is always an array with a single element.
QUICKFIXES:
Replace with 'new[] { text }'
41: The expression is always an array with a single element.
QUICKFIXES:
Replace with 'new[] { text }'
42: The expression is always an array with a single trimmed element.
QUICKFIXES:
Replace with 'new[] { text.Trim() }'
43: The expression is always an array with a single element.
QUICKFIXES:
Replace with 'new[] { text }'
44: The expression is always an array with a single element.
QUICKFIXES:
Replace with 'new[] { text }'
45: The expression is always an array with a single trimmed element.
QUICKFIXES:
Replace with 'new[] { text.Trim() }'
46: The expression is always an array with a single element.
QUICKFIXES:
Replace with 'new[] { text }'
47: The expression is always an array with a single trimmed element.
QUICKFIXES:
Replace with 'new[] { text.Trim() }'
48: The expression is always an array with a single element.
QUICKFIXES:
Replace with 'new[] { text }'
49: The expression is always an array with a single trimmed element.
QUICKFIXES:
Replace with 'new[] { text.Trim() }'
50: The expression is always an empty array.
QUICKFIXES:
Replace with 'Array.Empty<string>()'
51: The expression is always an array with a single element.
QUICKFIXES:
Replace with 'new[] { text }'
52: The expression is always an array with a single trimmed element.
QUICKFIXES:
Replace with 'new[] { text.Trim() }'
53: The expression is always an array with a single element.
QUICKFIXES:
Replace with 'new[] { text }'
54: The expression is always an array with a single trimmed element.
QUICKFIXES:
Replace with 'new[] { text.Trim() }'
55: The expression is always an array with a single element.
QUICKFIXES:
Replace with 'new[] { text }'
56: The expression is always an array with a single trimmed element.
QUICKFIXES:
Replace with 'new[] { text.Trim() }'
57: The expression is always true.
QUICKFIXES:
Replace with 'true'
58: The expression is always true.
QUICKFIXES:
Replace with 'true'
59: The expression is always true.
QUICKFIXES:
Replace with 'true'
60: The expression is always an empty string.
QUICKFIXES:
Replace with '""'
61: The expression is always an empty string.
QUICKFIXES:
Replace with '""'
62: The expression is always an empty string.
QUICKFIXES:
Replace with '""'
63: The expression is always an empty string.
QUICKFIXES:
Replace with '""'
64: The expression is always an empty string.
QUICKFIXES:
Replace with '""'
65: The expression is always an empty string.
QUICKFIXES:
Replace with '""'
66: The expression is always an empty string.
QUICKFIXES:
Replace with '""'
67: The expression is always an empty string.
QUICKFIXES:
Replace with '""'
68: The expression is always an empty string.
QUICKFIXES:
Replace with '""'
69: The expression is always an empty string.
QUICKFIXES:
Replace with '""'
70: The expression is always an empty string.
QUICKFIXES:
Replace with '""'
71: The expression is always an empty string.
QUICKFIXES:
Replace with '""'
72: The expression is always an empty string.
QUICKFIXES:
Replace with '""'
73: The expression is always an empty string.
QUICKFIXES:
Replace with '""'
74: The expression is always an empty string.
QUICKFIXES:
Replace with '""'
75: The expression is always an empty string.
QUICKFIXES:
Replace with '""'
76: The expression is always an empty string.
QUICKFIXES:
Replace with '""'
77: The expression is always an empty string.
QUICKFIXES:
Replace with '""'
78: The expression is always an empty string.
QUICKFIXES:
Replace with '""'
79: The expression is always an empty string.
QUICKFIXES:
Replace with '""'
80: The expression is always an empty string.
QUICKFIXES:
Replace with '""'
81: The expression is always an empty string.
QUICKFIXES:
Replace with '""'
82: The expression is always an empty string.
QUICKFIXES:
Replace with '""'
83: The expression is always an empty string.
QUICKFIXES:
Replace with '""'
84: The expression is always an empty string.
QUICKFIXES:
Replace with '""'
85: The expression is always an empty string.
QUICKFIXES:
Replace with '""'
86: The expression is always an empty string.
QUICKFIXES:
Replace with '""'
87: The expression is always an empty string.
QUICKFIXES:
Replace with '""'
88: The expression is always an empty string.
QUICKFIXES:
Replace with '""'
89: The expression is always an empty string.
QUICKFIXES:
Replace with '""'
90: The expression is always an empty string.
QUICKFIXES:
Replace with '""'
91: The expression is always an empty string.
QUICKFIXES:
Replace with '""'
92: The expression is always an empty string.
QUICKFIXES:
Replace with '""'
93: The expression is always an empty string.
QUICKFIXES:
Replace with '""'
94: The expression is always an empty string.
QUICKFIXES:
Replace with '""'
95: The expression is always an empty string.
QUICKFIXES:
Replace with '""'
96: The expression is always an empty string.
QUICKFIXES:
Replace with '""'
97: The expression is always an empty string.
QUICKFIXES:
Replace with '""'
98: The expression is always an empty string.
QUICKFIXES:
Replace with '""'
99: The expression is always an empty string.
QUICKFIXES:
Replace with '""'
100: The expression is always the same as the passed element converted to string.
QUICKFIXES:
Replace with '$"{objectItem}"'
101: The expression is always the same as the passed element converted to string.
QUICKFIXES:
Replace with '$"{objectItem}"'
102: The expression is always the same as the passed element converted to string.
QUICKFIXES:
Replace with '$"{intItem}"'
103: The expression is always the same as the passed element converted to string.
QUICKFIXES:
Replace with '$"{intItem}"'
104: The expression is always the same as the passed element.
QUICKFIXES:
Replace with 'stringItem'
105: The expression is always the same as the passed element.
QUICKFIXES:
Replace with 'stringItem'
106: The expression is always the same as the passed element converted to string.
QUICKFIXES:
Replace with '$"{objectItem}"'
107: The expression is always the same as the passed element converted to string.
QUICKFIXES:
Replace with '$"{objectItem}"'
108: The expression is always the same as the passed element converted to string.
QUICKFIXES:
Replace with '$"{intItem}"'
109: The expression is always the same as the passed element converted to string.
QUICKFIXES:
Replace with '$"{intItem}"'
110: The expression is always the same as the passed element.
QUICKFIXES:
Replace with 'stringItem'
111: The expression is always the same as the passed element.
QUICKFIXES:
Replace with 'stringItem'
112: The expression is always the same as the passed element converted to string.
QUICKFIXES:
Replace with '$"{objectItem}"'
113: The expression is always the same as the passed element converted to string.
QUICKFIXES:
Replace with '$"{objectItem}"'
114: The expression is always the same as the passed element.
QUICKFIXES:
Replace with 'stringItem'
115: The expression is always the same as the passed element.
QUICKFIXES:
Replace with 'stringItem'
116: The expression is always the same as the passed element converted to string.
QUICKFIXES:
Replace with '$"{objectItem}"'
117: The expression is always the same as the passed element converted to string.
QUICKFIXES:
Replace with '$"{objectItem}"'
118: The expression is always the same as the passed element.
QUICKFIXES:
Replace with 'stringItem'
119: The expression is always the same as the passed element.
QUICKFIXES:
Replace with 'stringItem'
120: The expression is always the same as the passed element.
QUICKFIXES:
Replace with 'stringItem'
121: The expression is always the same as the passed element.
QUICKFIXES:
Replace with 'stringItem'
