using System.Collections.Generic;
using System.Linq;
using System.Threading;

namespace Test
{
    public class Class
    {
        public void Method(IList<int> list, int fallback)
        {
            var first1 = list.|FirstOrDefault()|(0);
            var first2 = list.|FirstOrDefault(fallback)|(1);

            var last1 = list.|LastOrDefault()|(2);
            var last2 = list.|LastOrDefault(1)|(3);

            var single = list.|Single()|(4);
        }

        public void DefaultValues(
            IList<bool> booleans,
            IList<int> integers,
            IList<long> longs,
            IList<byte> bytes,
            IList<double> doubles,
            IList<decimal> decimals,
            IList<char> chars,
            IList<CancellationToken> structs,
            IList<DayOfWeek> enums,
            IList<string> strings,
            IList<int?> nullableStructs)
        {
            var bool_ = booleans.|FirstOrDefault()|(5);
            var int_ = integers.|FirstOrDefault()|(6);
            var long_ = longs.|FirstOrDefault()|(7);
            var byte_ = bytes.|FirstOrDefault()|(8);
            var double_ = doubles.|FirstOrDefault()|(9);
            var decimal_ = decimals.|FirstOrDefault()|(10);
            var char_ = chars.|LastOrDefault()|(11);
            var struct_ = structs.|LastOrDefault()|(12);
            var enum_ = enums.|LastOrDefault()|(13);
            var string_ = strings.|LastOrDefault()|(14);
            var nullableStruct_ = nullableStructs.|LastOrDefault()|(15);
        }

        public void DefaultValues_Unconstrained<T>(IList<T> items)
        {
            var first = items.|FirstOrDefault()|(16);
        }

        public void DefaultValues_ReferenceType<T>(IList<T> items) where T : class
        {
            var first = items.|FirstOrDefault()|(17);
        }

        class SomeClass { }

        public void DefaultValues_KnownReferenceType<T>(IList<T> items) where T : SomeClass
        {
            var first = items.|FirstOrDefault()|(18);
        }

        public void DefaultValues_ValueType<T>(IList<T> items) where T : struct
        {
            var first = items.|FirstOrDefault()|(19);
        }
    }
}
------------------------------------------------
0: Use list pattern.
QUICKFIXES:
Replace with 'is [var first, ..] ? first : 0'
1: Use list pattern.
QUICKFIXES:
Replace with 'is [var first, ..] ? first : fallback'
2: Use list pattern.
QUICKFIXES:
Replace with 'is [.., var last] ? last : 0'
3: Use list pattern.
QUICKFIXES:
Replace with 'is [.., var last] ? last : 1'
4: Use list pattern.
QUICKFIXES:
Replace with 'is [var item] ? item : throw new InvalidOperationException(...)'
5: Use list pattern.
QUICKFIXES:
Replace with 'is [var first, ..] ? first : false'
6: Use list pattern.
QUICKFIXES:
Replace with 'is [var first, ..] ? first : 0'
7: Use list pattern.
QUICKFIXES:
Replace with 'is [var first, ..] ? first : 0'
8: Use list pattern.
QUICKFIXES:
Replace with 'is [var first, ..] ? first : 0'
9: Use list pattern.
QUICKFIXES:
Replace with 'is [var first, ..] ? first : 0'
10: Use list pattern.
QUICKFIXES:
Replace with 'is [var first, ..] ? first : 0'
11: Use list pattern.
QUICKFIXES:
Replace with 'is [.., var last] ? last : '\0''
12: Use list pattern.
QUICKFIXES:
Replace with 'is [.., var last] ? last : new CancellationToken()'
13: Use list pattern.
QUICKFIXES:
Replace with 'is [.., var last] ? last : default(DayOfWeek)'
14: Use list pattern.
QUICKFIXES:
Replace with 'is [.., var last] ? last : null'
15: Use list pattern.
QUICKFIXES:
Replace with 'is [.., var last] ? last : null'
16: Use list pattern.
QUICKFIXES:
Replace with 'is [var first, ..] ? first : default(T)'
17: Use list pattern.
QUICKFIXES:
Replace with 'is [var first, ..] ? first : null'
18: Use list pattern.
QUICKFIXES:
Replace with 'is [var first, ..] ? first : null'
19: Use list pattern.
QUICKFIXES:
Replace with 'is [var first, ..] ? first : default(T)'
