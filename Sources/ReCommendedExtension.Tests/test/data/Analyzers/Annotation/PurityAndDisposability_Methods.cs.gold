using System;
using System.IO;
using System.Threading.Tasks;
using JetBrains.Annotations;

namespace NonDisposable
{
    internal class Parent
    {
        public virtual int NotAnnotated() => 0;

        [Pure]
        public virtual int AnnotatedWithPure() => 0;

        [MustUseReturnValue]
        public virtual int AnnotatedWithMustUseReturnValue() => 0;

        [|MustDisposeResource|(0)]
        public virtual int AnnotatedWithMustDisposeResource() => 0;

        [|MustDisposeResource(false)|(1)]
        public virtual int AnnotatedWithMustDisposeResourceFalse() => 0;

        [|MustDisposeResource(true)|(2)]
        public virtual int AnnotatedWithMustDisposeResourceTrue() => 0;
    }

    internal class ChildNotAnnotated : Parent
    {
        public override int NotAnnotated() => 0;

        public override int AnnotatedWithPure() => 0;

        public override int AnnotatedWithMustUseReturnValue() => 0;

        public override int AnnotatedWithMustDisposeResource() => 0;

        public override int AnnotatedWithMustDisposeResourceFalse() => 0;

        public override int AnnotatedWithMustDisposeResourceTrue() => 0;

        public int Other() => 0;
    }

    internal class ChildAnnotatedWithPure : Parent
    {
        [Pure]
        public override int NotAnnotated() => 0;

        [|Pure|(3)]
        public override int AnnotatedWithPure() => 0;

        [|Pure|(4)]
        public override int AnnotatedWithMustUseReturnValue() => 0;

        [Pure]
        public override int AnnotatedWithMustDisposeResource() => 0;

        [Pure]
        public override int AnnotatedWithMustDisposeResourceFalse() => 0;

        [Pure]
        public override int AnnotatedWithMustDisposeResourceTrue() => 0;

        [Pure]
        public int Other() => 0;
    }

    internal class ChildAnnotatedWithMustUseReturnValue : Parent
    {
        [MustUseReturnValue]
        public override int NotAnnotated() => 0;

        [|MustUseReturnValue|(5)]
        public override int AnnotatedWithPure() => 0;

        [|MustUseReturnValue|(6)]
        public override int AnnotatedWithMustUseReturnValue() => 0;

        [MustUseReturnValue]
        public override int AnnotatedWithMustDisposeResource() => 0;

        [MustUseReturnValue]
        public override int AnnotatedWithMustDisposeResourceFalse() => 0;

        [MustUseReturnValue]
        public override int AnnotatedWithMustDisposeResourceTrue() => 0;

        [MustUseReturnValue]
        public int Other() => 0;
    }

    internal class ChildAnnotatedWithMustDisposeResource : Parent
    {
        [|MustDisposeResource|(7)]
        public override int NotAnnotated() => 0;

        [|MustDisposeResource|(8)]
        public override int AnnotatedWithPure() => 0;

        [|MustDisposeResource|(9)]
        public override int AnnotatedWithMustUseReturnValue() => 0;

        [|MustDisposeResource|(10)]
        public override int AnnotatedWithMustDisposeResource() => 0;

        [|MustDisposeResource|(11)]
        public override int AnnotatedWithMustDisposeResourceFalse() => 0;

        [|MustDisposeResource|(12)]
        public override int AnnotatedWithMustDisposeResourceTrue() => 0;

        [|MustDisposeResource|(13)]
        public int Other() => 0;
    }

    internal class ChildAnnotatedWithMustDisposeResourceFalse : Parent
    {
        [|MustDisposeResource(false)|(14)]
        public override int NotAnnotated() => 0;

        [|MustDisposeResource(false)|(15)]
        public override int AnnotatedWithPure() => 0;

        [|MustDisposeResource(false)|(16)]
        public override int AnnotatedWithMustUseReturnValue() => 0;

        [|MustDisposeResource(false)|(17)]
        public override int AnnotatedWithMustDisposeResource() => 0;

        [|MustDisposeResource(false)|(18)]
        public override int AnnotatedWithMustDisposeResourceFalse() => 0;

        [|MustDisposeResource(false)|(19)]
        public override int AnnotatedWithMustDisposeResourceTrue() => 0;

        [|MustDisposeResource(false)|(20)]
        public int Other() => 0;
    }

    internal class ChildAnnotatedWithMustDisposeResourceTrue : Parent
    {
        [|MustDisposeResource(true)|(21)]
        public override int NotAnnotated() => 0;

        [|MustDisposeResource(true)|(22)]
        public override int AnnotatedWithPure() => 0;

        [|MustDisposeResource(true)|(23)]
        public override int AnnotatedWithMustUseReturnValue() => 0;

        [|MustDisposeResource(true)|(24)]
        public override int AnnotatedWithMustDisposeResource() => 0;

        [|MustDisposeResource(true)|(25)]
        public override int AnnotatedWithMustDisposeResourceFalse() => 0;

        [|MustDisposeResource(true)|(26)]
        public override int AnnotatedWithMustDisposeResourceTrue() => 0;

        [|MustDisposeResource(true)|(27)]
        public int Other() => 0;
    }

    internal class WithAnnotations
    {
        [Pure]
        public int WithPure() => 0;

        [MustUseReturnValue]
        public int WithMustUseReturnValue() => 0;

        [|MustDisposeResource|(28)]
        public int WithMustDisposeResource() => 0;

        [|MustDisposeResource(false)|(29)]
        public int WithMustDisposeResourceFalse() => 0;

        [|MustDisposeResource(true)|(30)]
        public int WithMustDisposeResourceTrue() => 0;
    }

    internal class WithConflictingAnnotations
    {
        [|Pure|(31)]
        [|MustUseReturnValue|(32)]
        public int Pure_MustUseReturnValue() => 0;

        [Pure]
        [|MustDisposeResource|(33)]
        public int Pure_MustDisposeResource() => 0;

        [MustUseReturnValue]
        [|MustDisposeResource|(34)]
        public int MustUseReturnValue_MustDisposeResource() => 0;

        [|Pure|(35)]
        [|MustUseReturnValue|(36)]
        [|MustDisposeResource|(37)]
        public int All() => 0;
    }
}

namespace Disposable
{
    [method: MustDisposeResource]
    internal ref struct |DisposableRefStruct|(38)()
    {
        public void Dispose() { }
    }

    internal class Parent
    {
        public virtual IDisposable |NotAnnotated|(39)() => throw new NotImplementedException();

        [|Pure|(40)]
        public virtual IAsyncDisposable |AnnotatedWithPure|(41)() => throw new NotImplementedException();

        [|MustUseReturnValue|(42)]
        public virtual Stream |AnnotatedWithMustUseReturnValue|(43)() => throw new NotImplementedException();

        [MustDisposeResource]
        public virtual Stream AnnotatedWithMustDisposeResource() => throw new NotImplementedException();

        [MustDisposeResource(false)]
        public virtual IAsyncDisposable AnnotatedWithMustDisposeResourceFalse() => throw new NotImplementedException();

        [MustDisposeResource(true)]
        public virtual IAsyncDisposable AnnotatedWithMustDisposeResourceTrue() => throw new NotImplementedException();
    }

    internal class ChildNotAnnotated : Parent
    {
        public override IDisposable |NotAnnotated|(44)() => throw new NotImplementedException();

        public override IAsyncDisposable |AnnotatedWithPure|(45)() => throw new NotImplementedException();

        public override Stream |AnnotatedWithMustUseReturnValue|(46)() => throw new NotImplementedException();

        public override Stream AnnotatedWithMustDisposeResource() => throw new NotImplementedException();

        public override IAsyncDisposable |AnnotatedWithMustDisposeResourceFalse|(47)() => throw new NotImplementedException();

        public override IAsyncDisposable AnnotatedWithMustDisposeResourceTrue() => throw new NotImplementedException();

        public DisposableRefStruct |Other|(48)() => throw new NotImplementedException();
    }

    internal class ChildAnnotatedWithPure : Parent
    {
        [|Pure|(49)]
        public override IDisposable |NotAnnotated|(50)() => throw new NotImplementedException();

        [|Pure|(51)]
        public override IAsyncDisposable |AnnotatedWithPure|(52)() => throw new NotImplementedException();

        [|Pure|(53)]
        public override Stream |AnnotatedWithMustUseReturnValue|(54)() => throw new NotImplementedException();

        [|Pure|(55)]
        public override Stream AnnotatedWithMustDisposeResource() => throw new NotImplementedException();

        [|Pure|(56)]
        public override IAsyncDisposable |AnnotatedWithMustDisposeResourceFalse|(57)() => throw new NotImplementedException();

        [|Pure|(58)]
        public override IAsyncDisposable AnnotatedWithMustDisposeResourceTrue() => throw new NotImplementedException();

        [|Pure|(59)]
        public DisposableRefStruct |Other|(60)() => throw new NotImplementedException();
    }

    internal class ChildAnnotatedWithMustUseReturnValue : Parent
    {
        [|MustUseReturnValue|(61)]
        public override IDisposable |NotAnnotated|(62)() => throw new NotImplementedException();

        [|MustUseReturnValue|(63)]
        public override IAsyncDisposable |AnnotatedWithPure|(64)() => throw new NotImplementedException();

        [|MustUseReturnValue|(65)]
        public override Stream |AnnotatedWithMustUseReturnValue|(66)() => throw new NotImplementedException();

        [|MustUseReturnValue|(67)]
        public override Stream AnnotatedWithMustDisposeResource() => throw new NotImplementedException();

        [|MustUseReturnValue|(68)]
        public override IAsyncDisposable |AnnotatedWithMustDisposeResourceFalse|(69)() => throw new NotImplementedException();

        [|MustUseReturnValue|(70)]
        public override IAsyncDisposable AnnotatedWithMustDisposeResourceTrue() => throw new NotImplementedException();

        [|MustUseReturnValue|(71)]
        public DisposableRefStruct |Other|(72)() => throw new NotImplementedException();
    }

    internal class ChildAnnotatedWithMustDisposeResource : Parent
    {
        [MustDisposeResource]
        public override IDisposable NotAnnotated() => throw new NotImplementedException();

        [MustDisposeResource]
        public override IAsyncDisposable AnnotatedWithPure() => throw new NotImplementedException();

        [MustDisposeResource]
        public override Stream AnnotatedWithMustUseReturnValue() => throw new NotImplementedException();

        [|MustDisposeResource|(73)]
        public override Stream AnnotatedWithMustDisposeResource() => throw new NotImplementedException();

        [MustDisposeResource]
        public override IAsyncDisposable AnnotatedWithMustDisposeResourceFalse() => throw new NotImplementedException();

        [|MustDisposeResource|(74)]
        public override IAsyncDisposable AnnotatedWithMustDisposeResourceTrue() => throw new NotImplementedException();

        [MustDisposeResource]
        public DisposableRefStruct Other() => throw new NotImplementedException();
    }

    internal class ChildAnnotatedWithMustDisposeResourceFalse : Parent
    {
        [MustDisposeResource(false)]
        public override IDisposable NotAnnotated() => throw new NotImplementedException();

        [MustDisposeResource(false)]
        public override IAsyncDisposable AnnotatedWithPure() => throw new NotImplementedException();

        [MustDisposeResource(false)]
        public override Stream AnnotatedWithMustUseReturnValue() => throw new NotImplementedException();

        [MustDisposeResource(false)]
        public override Stream AnnotatedWithMustDisposeResource() => throw new NotImplementedException();

        [MustDisposeResource(false)]
        public override IAsyncDisposable AnnotatedWithMustDisposeResourceFalse() => throw new NotImplementedException();

        [MustDisposeResource(false)]
        public override IAsyncDisposable AnnotatedWithMustDisposeResourceTrue() => throw new NotImplementedException();

        [MustDisposeResource(false)]
        public DisposableRefStruct Other() => throw new NotImplementedException();
    }

    internal class ChildAnnotatedWithMustDisposeResourceTrue : Parent
    {
        [MustDisposeResource(true)]
        public override IDisposable NotAnnotated() => throw new NotImplementedException();

        [MustDisposeResource(true)]
        public override IAsyncDisposable AnnotatedWithPure() => throw new NotImplementedException();

        [MustDisposeResource(true)]
        public override Stream AnnotatedWithMustUseReturnValue() => throw new NotImplementedException();

        [|MustDisposeResource(true)|(75)]
        public override Stream AnnotatedWithMustDisposeResource() => throw new NotImplementedException();

        [MustDisposeResource(true)]
        public override IAsyncDisposable AnnotatedWithMustDisposeResourceFalse() => throw new NotImplementedException();

        [|MustDisposeResource(true)|(76)]
        public override IAsyncDisposable AnnotatedWithMustDisposeResourceTrue() => throw new NotImplementedException();

        [MustDisposeResource(true)]
        public DisposableRefStruct Other() => throw new NotImplementedException();
    }

    internal class ParentTaskLike
    {
        public virtual Task<IDisposable> |NotAnnotated|(77)() => throw new NotImplementedException();

        [|Pure|(78)]
        public virtual Task<IAsyncDisposable> |AnnotatedWithPure|(79)() => throw new NotImplementedException();

        [|MustUseReturnValue|(80)]
        public virtual Task<Stream> |AnnotatedWithMustUseReturnValue|(81)() => throw new NotImplementedException();

        [MustDisposeResource]
        public virtual ValueTask<Stream> AnnotatedWithMustDisposeResource() => throw new NotImplementedException();

        [MustDisposeResource(false)]
        public virtual ValueTask<IAsyncDisposable> AnnotatedWithMustDisposeResourceFalse() => throw new NotImplementedException();
    }

    internal class ChildTaskLikeNotAnnotated : ParentTaskLike
    {
        public override Task<IDisposable> |NotAnnotated|(82)() => throw new NotImplementedException();

        public override Task<IAsyncDisposable> |AnnotatedWithPure|(83)() => throw new NotImplementedException();

        public override Task<Stream> |AnnotatedWithMustUseReturnValue|(84)() => throw new NotImplementedException();

        public override ValueTask<Stream> AnnotatedWithMustDisposeResource() => throw new NotImplementedException();

        public override ValueTask<IAsyncDisposable> |AnnotatedWithMustDisposeResourceFalse|(85)() => throw new NotImplementedException();

        public ValueTask<IDisposable> |Other|(86)() => throw new NotImplementedException();
    }

    internal class ChildTaskLikeAnnotatedWithPure : ParentTaskLike
    {
        [|Pure|(87)]
        public override Task<IDisposable> |NotAnnotated|(88)() => throw new NotImplementedException();

        [|Pure|(89)]
        public override Task<IAsyncDisposable> |AnnotatedWithPure|(90)() => throw new NotImplementedException();

        [|Pure|(91)]
        public override Task<Stream> |AnnotatedWithMustUseReturnValue|(92)() => throw new NotImplementedException();

        [|Pure|(93)]
        public override ValueTask<Stream> AnnotatedWithMustDisposeResource() => throw new NotImplementedException();

        [|Pure|(94)]
        public override ValueTask<IAsyncDisposable> |AnnotatedWithMustDisposeResourceFalse|(95)() => throw new NotImplementedException();

        [|Pure|(96)]
        public ValueTask<IDisposable> |Other|(97)() => throw new NotImplementedException();
    }

    internal class ChildTaskLikeAnnotatedWithMustUseReturnValue : ParentTaskLike
    {
        [|MustUseReturnValue|(98)]
        public override Task<IDisposable> |NotAnnotated|(99)() => throw new NotImplementedException();

        [|MustUseReturnValue|(100)]
        public override Task<IAsyncDisposable> |AnnotatedWithPure|(101)() => throw new NotImplementedException();

        [|MustUseReturnValue|(102)]
        public override Task<Stream> |AnnotatedWithMustUseReturnValue|(103)() => throw new NotImplementedException();

        [|MustUseReturnValue|(104)]
        public override ValueTask<Stream> AnnotatedWithMustDisposeResource() => throw new NotImplementedException();

        [|MustUseReturnValue|(105)]
        public override ValueTask<IAsyncDisposable> |AnnotatedWithMustDisposeResourceFalse|(106)() => throw new NotImplementedException();

        [|MustUseReturnValue|(107)]
        public ValueTask<IDisposable> |Other|(108)() => throw new NotImplementedException();
    }

    internal class ChildTaskLikeAnnotatedWithMustDisposeResource : ParentTaskLike
    {
        [MustDisposeResource]
        public override Task<IDisposable> NotAnnotated() => throw new NotImplementedException();

        [MustDisposeResource]
        public override Task<IAsyncDisposable> AnnotatedWithPure() => throw new NotImplementedException();

        [MustDisposeResource]
        public override Task<Stream> AnnotatedWithMustUseReturnValue() => throw new NotImplementedException();

        [|MustDisposeResource|(109)]
        public override ValueTask<Stream> AnnotatedWithMustDisposeResource() => throw new NotImplementedException();

        [MustDisposeResource]
        public override ValueTask<IAsyncDisposable> AnnotatedWithMustDisposeResourceFalse() => throw new NotImplementedException();

        [MustDisposeResource]
        public ValueTask<IDisposable> Other() => throw new NotImplementedException();
    }

    internal class ChildTaskLikeAnnotatedWithMustDisposeResourceFalse : ParentTaskLike
    {
        [MustDisposeResource(false)]
        public override Task<IDisposable> NotAnnotated() => throw new NotImplementedException();

        [MustDisposeResource(false)]
        public override Task<IAsyncDisposable> AnnotatedWithPure() => throw new NotImplementedException();

        [MustDisposeResource(false)]
        public override Task<Stream> AnnotatedWithMustUseReturnValue() => throw new NotImplementedException();

        [MustDisposeResource(false)]
        public override ValueTask<Stream> AnnotatedWithMustDisposeResource() => throw new NotImplementedException();

        [MustDisposeResource(false)]
        public override ValueTask<IAsyncDisposable> AnnotatedWithMustDisposeResourceFalse() => throw new NotImplementedException();

        [MustDisposeResource(false)]
        public ValueTask<IDisposable> Other() => throw new NotImplementedException();
    }

    internal class WithAnnotations
    {
        [|Pure|(110)]
        public IDisposable |WithPure|(111)() => throw new NotImplementedException();

        [|MustUseReturnValue|(112)]
        public IDisposable |WithMustUseReturnValue|(113)() => throw new NotImplementedException();

        [MustDisposeResource]
        public IDisposable WithMustDisposeResource() => throw new NotImplementedException();

        [MustDisposeResource(false)]
        public IDisposable WithMustDisposeResourceFalse() => throw new NotImplementedException();

        [MustDisposeResource(true)]
        public IDisposable WithMustDisposeResourceTrue() => throw new NotImplementedException();
    }

    internal class WithConflictingAnnotations
    {
        [|Pure|(114)]
        [|MustUseReturnValue|(115)]
        public IDisposable |Pure_MustUseReturnValue|(116)() => throw new NotImplementedException();

        [|Pure|(117)]
        [MustDisposeResource]
        public IDisposable Pure_MustDisposeResource() => throw new NotImplementedException();

        [|MustUseReturnValue|(118)]
        [MustDisposeResource]
        public IDisposable MustUseReturnValue_MustDisposeResource() => throw new NotImplementedException();

        [|Pure|(119)]
        [|MustUseReturnValue|(120)]
        [MustDisposeResource]
        public IDisposable All() => throw new NotImplementedException();
    }

    internal class WithConflictingAnnotationsTaskLike
    {
        [|Pure|(121)]
        [|MustUseReturnValue|(122)]
        public Task<IDisposable> |Pure_MustUseReturnValue|(123)() => throw new NotImplementedException();

        [|Pure|(124)]
        [MustDisposeResource]
        public ValueTask<IDisposable> Pure_MustDisposeResource() => throw new NotImplementedException();

        [|MustUseReturnValue|(125)]
        [MustDisposeResource]
        public Task<IDisposable> MustUseReturnValue_MustDisposeResource() => throw new NotImplementedException();

        [|Pure|(126)]
        [|MustUseReturnValue|(127)]
        [MustDisposeResource]
        public ValueTask<IDisposable> All() => throw new NotImplementedException();
    }

    internal class NullableTypes
    {
        [MustDisposeResource]
        public class Class : IDisposable
        {
            public void Dispose() { }
        }

        [method: MustDisposeResource]
        public struct |Struct|(128)() : IDisposable
        {
            public void Dispose() { }
        }

        public Class|?|(129) |NullableClass|(130)() => throw new NotImplementedException();

        public Struct? |NullableStruct|(131)() => throw new NotImplementedException();

        public ValueTask<Class?> |NullableClassTaskLike|(132)() => throw new NotImplementedException();

        public ValueTask<Struct?> |NullableStructTaskLike|(133)() => throw new NotImplementedException();
    }
}
---------------------------------------------------------
(0): ReSharper Warning: Annotation is not valid because the method return type is not disposable.
(1): ReSharper Warning: Annotation is not valid because the method return type is not disposable.
(2): ReSharper Warning: Annotation is not valid because the method return type is not disposable.
(3): ReSharper Suggestion: Annotation is redundant because a base method is already annotated with [Pure].
(4): ReSharper Warning: Annotation is conflicting because a base method is already annotated with [MustUseReturnValue].
(5): ReSharper Warning: Annotation is conflicting because a base method is already annotated with [Pure].
(6): ReSharper Suggestion: Annotation is redundant because a base method is already annotated with [MustUseReturnValue].
(7): ReSharper Warning: Annotation is not valid because the method return type is not disposable.
(8): ReSharper Warning: Annotation is not valid because the method return type is not disposable.
(9): ReSharper Warning: Annotation is not valid because the method return type is not disposable.
(10): ReSharper Warning: Annotation is not valid because the method return type is not disposable.
(11): ReSharper Warning: Annotation is not valid because the method return type is not disposable.
(12): ReSharper Warning: Annotation is not valid because the method return type is not disposable.
(13): ReSharper Warning: Annotation is not valid because the method return type is not disposable.
(14): ReSharper Warning: Annotation is not valid because the method return type is not disposable.
(15): ReSharper Warning: Annotation is not valid because the method return type is not disposable.
(16): ReSharper Warning: Annotation is not valid because the method return type is not disposable.
(17): ReSharper Warning: Annotation is not valid because the method return type is not disposable.
(18): ReSharper Warning: Annotation is not valid because the method return type is not disposable.
(19): ReSharper Warning: Annotation is not valid because the method return type is not disposable.
(20): ReSharper Warning: Annotation is not valid because the method return type is not disposable.
(21): ReSharper Warning: Annotation is not valid because the method return type is not disposable.
(22): ReSharper Warning: Annotation is not valid because the method return type is not disposable.
(23): ReSharper Warning: Annotation is not valid because the method return type is not disposable.
(24): ReSharper Warning: Annotation is not valid because the method return type is not disposable.
(25): ReSharper Warning: Annotation is not valid because the method return type is not disposable.
(26): ReSharper Warning: Annotation is not valid because the method return type is not disposable.
(27): ReSharper Warning: Annotation is not valid because the method return type is not disposable.
(28): ReSharper Warning: Annotation is not valid because the method return type is not disposable.
(29): ReSharper Warning: Annotation is not valid because the method return type is not disposable.
(30): ReSharper Warning: Annotation is not valid because the method return type is not disposable.
(31): ReSharper Warning: Annotation is conflicting because the method is also annotated with [MustUseReturnValue].
(32): ReSharper Warning: Annotation is conflicting because the method is also annotated with [Pure].
(33): ReSharper Warning: Annotation is not valid because the method return type is not disposable.
(34): ReSharper Warning: Annotation is not valid because the method return type is not disposable.
(35): ReSharper Warning: Annotation is conflicting because the method is also annotated with [MustUseReturnValue].
(36): ReSharper Warning: Annotation is conflicting because the method is also annotated with [Pure].
(37): ReSharper Warning: Annotation is not valid because the method return type is not disposable.
(38): ReSharper Warning: Struct is disposable, but not annotated with [MustDisposeResource] or [MustDisposeResource(false)].
(39): ReSharper Warning: Method with the disposable return type is not annotated with [MustDisposeResource] or [MustDisposeResource(false)].
(40): ReSharper Warning: Annotation is not valid because the method return type is disposable.
(41): ReSharper Warning: Method with the disposable return type is not annotated with [MustDisposeResource] or [MustDisposeResource(false)].
(42): ReSharper Warning: Annotation is not valid because the method return type is disposable.
(43): ReSharper Warning: Method with the disposable return type is not annotated with [MustDisposeResource] or [MustDisposeResource(false)].
(44): ReSharper Warning: Method with the disposable return type is not annotated with [MustDisposeResource] or [MustDisposeResource(false)].
(45): ReSharper Warning: Method with the disposable return type is not annotated with [MustDisposeResource] or [MustDisposeResource(false)].
(46): ReSharper Warning: Method with the disposable return type is not annotated with [MustDisposeResource] or [MustDisposeResource(false)].
(47): ReSharper Warning: Method with the disposable return type is not annotated with [MustDisposeResource] or [MustDisposeResource(false)].
(48): ReSharper Warning: Method with the disposable return type is not annotated with [MustDisposeResource] or [MustDisposeResource(false)].
(49): ReSharper Warning: Annotation is not valid because the method return type is disposable.
(50): ReSharper Warning: Method with the disposable return type is not annotated with [MustDisposeResource] or [MustDisposeResource(false)].
(51): ReSharper Warning: Annotation is not valid because the method return type is disposable.
(52): ReSharper Warning: Method with the disposable return type is not annotated with [MustDisposeResource] or [MustDisposeResource(false)].
(53): ReSharper Warning: Annotation is not valid because the method return type is disposable.
(54): ReSharper Warning: Method with the disposable return type is not annotated with [MustDisposeResource] or [MustDisposeResource(false)].
(55): ReSharper Warning: Annotation is not valid because the method return type is disposable.
(56): ReSharper Warning: Annotation is not valid because the method return type is disposable.
(57): ReSharper Warning: Method with the disposable return type is not annotated with [MustDisposeResource] or [MustDisposeResource(false)].
(58): ReSharper Warning: Annotation is not valid because the method return type is disposable.
(59): ReSharper Warning: Annotation is not valid because the method return type is disposable.
(60): ReSharper Warning: Method with the disposable return type is not annotated with [MustDisposeResource] or [MustDisposeResource(false)].
(61): ReSharper Warning: Annotation is not valid because the method return type is disposable.
(62): ReSharper Warning: Method with the disposable return type is not annotated with [MustDisposeResource] or [MustDisposeResource(false)].
(63): ReSharper Warning: Annotation is not valid because the method return type is disposable.
(64): ReSharper Warning: Method with the disposable return type is not annotated with [MustDisposeResource] or [MustDisposeResource(false)].
(65): ReSharper Warning: Annotation is not valid because the method return type is disposable.
(66): ReSharper Warning: Method with the disposable return type is not annotated with [MustDisposeResource] or [MustDisposeResource(false)].
(67): ReSharper Warning: Annotation is not valid because the method return type is disposable.
(68): ReSharper Warning: Annotation is not valid because the method return type is disposable.
(69): ReSharper Warning: Method with the disposable return type is not annotated with [MustDisposeResource] or [MustDisposeResource(false)].
(70): ReSharper Warning: Annotation is not valid because the method return type is disposable.
(71): ReSharper Warning: Annotation is not valid because the method return type is disposable.
(72): ReSharper Warning: Method with the disposable return type is not annotated with [MustDisposeResource] or [MustDisposeResource(false)].
(73): ReSharper Suggestion: Annotation is redundant because a base method is already annotated with [MustDisposeResource].
(74): ReSharper Suggestion: Annotation is redundant because a base method is already annotated with [MustDisposeResource].
(75): ReSharper Suggestion: Annotation is redundant because a base method is already annotated with [MustDisposeResource].
(76): ReSharper Suggestion: Annotation is redundant because a base method is already annotated with [MustDisposeResource].
(77): ReSharper Warning: Method with the disposable return type is not annotated with [MustDisposeResource] or [MustDisposeResource(false)].
(78): ReSharper Warning: Annotation is not valid because the method return type is disposable.
(79): ReSharper Warning: Method with the disposable return type is not annotated with [MustDisposeResource] or [MustDisposeResource(false)].
(80): ReSharper Warning: Annotation is not valid because the method return type is disposable.
(81): ReSharper Warning: Method with the disposable return type is not annotated with [MustDisposeResource] or [MustDisposeResource(false)].
(82): ReSharper Warning: Method with the disposable return type is not annotated with [MustDisposeResource] or [MustDisposeResource(false)].
(83): ReSharper Warning: Method with the disposable return type is not annotated with [MustDisposeResource] or [MustDisposeResource(false)].
(84): ReSharper Warning: Method with the disposable return type is not annotated with [MustDisposeResource] or [MustDisposeResource(false)].
(85): ReSharper Warning: Method with the disposable return type is not annotated with [MustDisposeResource] or [MustDisposeResource(false)].
(86): ReSharper Warning: Method with the disposable return type is not annotated with [MustDisposeResource] or [MustDisposeResource(false)].
(87): ReSharper Warning: Annotation is not valid because the method return type is disposable.
(88): ReSharper Warning: Method with the disposable return type is not annotated with [MustDisposeResource] or [MustDisposeResource(false)].
(89): ReSharper Warning: Annotation is not valid because the method return type is disposable.
(90): ReSharper Warning: Method with the disposable return type is not annotated with [MustDisposeResource] or [MustDisposeResource(false)].
(91): ReSharper Warning: Annotation is not valid because the method return type is disposable.
(92): ReSharper Warning: Method with the disposable return type is not annotated with [MustDisposeResource] or [MustDisposeResource(false)].
(93): ReSharper Warning: Annotation is not valid because the method return type is disposable.
(94): ReSharper Warning: Annotation is not valid because the method return type is disposable.
(95): ReSharper Warning: Method with the disposable return type is not annotated with [MustDisposeResource] or [MustDisposeResource(false)].
(96): ReSharper Warning: Annotation is not valid because the method return type is disposable.
(97): ReSharper Warning: Method with the disposable return type is not annotated with [MustDisposeResource] or [MustDisposeResource(false)].
(98): ReSharper Warning: Annotation is not valid because the method return type is disposable.
(99): ReSharper Warning: Method with the disposable return type is not annotated with [MustDisposeResource] or [MustDisposeResource(false)].
(100): ReSharper Warning: Annotation is not valid because the method return type is disposable.
(101): ReSharper Warning: Method with the disposable return type is not annotated with [MustDisposeResource] or [MustDisposeResource(false)].
(102): ReSharper Warning: Annotation is not valid because the method return type is disposable.
(103): ReSharper Warning: Method with the disposable return type is not annotated with [MustDisposeResource] or [MustDisposeResource(false)].
(104): ReSharper Warning: Annotation is not valid because the method return type is disposable.
(105): ReSharper Warning: Annotation is not valid because the method return type is disposable.
(106): ReSharper Warning: Method with the disposable return type is not annotated with [MustDisposeResource] or [MustDisposeResource(false)].
(107): ReSharper Warning: Annotation is not valid because the method return type is disposable.
(108): ReSharper Warning: Method with the disposable return type is not annotated with [MustDisposeResource] or [MustDisposeResource(false)].
(109): ReSharper Suggestion: Annotation is redundant because a base method is already annotated with [MustDisposeResource].
(110): ReSharper Warning: Annotation is not valid because the method return type is disposable.
(111): ReSharper Warning: Method with the disposable return type is not annotated with [MustDisposeResource] or [MustDisposeResource(false)].
(112): ReSharper Warning: Annotation is not valid because the method return type is disposable.
(113): ReSharper Warning: Method with the disposable return type is not annotated with [MustDisposeResource] or [MustDisposeResource(false)].
(114): ReSharper Warning: Annotation is not valid because the method return type is disposable.
(115): ReSharper Warning: Annotation is not valid because the method return type is disposable.
(116): ReSharper Warning: Method with the disposable return type is not annotated with [MustDisposeResource] or [MustDisposeResource(false)].
(117): ReSharper Warning: Annotation is not valid because the method return type is disposable.
(118): ReSharper Warning: Annotation is not valid because the method return type is disposable.
(119): ReSharper Warning: Annotation is not valid because the method return type is disposable.
(120): ReSharper Warning: Annotation is not valid because the method return type is disposable.
(121): ReSharper Warning: Annotation is not valid because the method return type is disposable.
(122): ReSharper Warning: Annotation is not valid because the method return type is disposable.
(123): ReSharper Warning: Method with the disposable return type is not annotated with [MustDisposeResource] or [MustDisposeResource(false)].
(124): ReSharper Warning: Annotation is not valid because the method return type is disposable.
(125): ReSharper Warning: Annotation is not valid because the method return type is disposable.
(126): ReSharper Warning: Annotation is not valid because the method return type is disposable.
(127): ReSharper Warning: Annotation is not valid because the method return type is disposable.
(128): ReSharper Warning: Struct is disposable, but not annotated with [MustDisposeResource] or [MustDisposeResource(false)].
(129): ReSharper Dead Code: Return type of 'NullableClass' can be made non-nullable
(130): ReSharper Warning: Method with the disposable return type is not annotated with [MustDisposeResource] or [MustDisposeResource(false)].
(131): ReSharper Warning: Method with the disposable return type is not annotated with [MustDisposeResource] or [MustDisposeResource(false)].
(132): ReSharper Warning: Method with the disposable return type is not annotated with [MustDisposeResource] or [MustDisposeResource(false)].
(133): ReSharper Warning: Method with the disposable return type is not annotated with [MustDisposeResource] or [MustDisposeResource(false)].
