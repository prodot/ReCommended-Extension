using System;
using System.IO;
using System.Threading.Tasks;
using JetBrains.Annotations;

namespace NonDisposable
{
    internal class Parent
    {
        public virtual int NotAnnotated() => 0;

        [Pure]
        public virtual int AnnotatedWithPure() => 0;

        [MustUseReturnValue]
        public virtual int AnnotatedWithMustUseReturnValue() => 0;

        [|MustDisposeResource|(0)]
        public virtual int AnnotatedWithMustDisposeResource() => 0;

        [|MustDisposeResource(false)|(1)]
        public virtual int AnnotatedWithMustDisposeResourceFalse() => 0;

        [|MustDisposeResource(true)|(2)]
        public virtual int AnnotatedWithMustDisposeResourceTrue() => 0;
    }

    internal class ChildNotAnnotated : Parent
    {
        public override int NotAnnotated() => 0;

        public override int AnnotatedWithPure() => 0;

        public override int AnnotatedWithMustUseReturnValue() => 0;

        public override int AnnotatedWithMustDisposeResource() => 0;

        public override int AnnotatedWithMustDisposeResourceFalse() => 0;

        public override int AnnotatedWithMustDisposeResourceTrue() => 0;

        public int Other() => 0;
    }

    internal class ChildAnnotatedWithPure : Parent
    {
        [Pure]
        public override int NotAnnotated() => 0;

        [|Pure|(3)]
        public override int AnnotatedWithPure() => 0;

        [|Pure|(4)]
        public override int AnnotatedWithMustUseReturnValue() => 0;

        [Pure]
        public override int AnnotatedWithMustDisposeResource() => 0;

        [Pure]
        public override int AnnotatedWithMustDisposeResourceFalse() => 0;

        [Pure]
        public override int AnnotatedWithMustDisposeResourceTrue() => 0;

        [Pure]
        public int Other() => 0;
    }

    internal class ChildAnnotatedWithMustUseReturnValue : Parent
    {
        [MustUseReturnValue]
        public override int NotAnnotated() => 0;

        [|MustUseReturnValue|(5)]
        public override int AnnotatedWithPure() => 0;

        [|MustUseReturnValue|(6)]
        public override int AnnotatedWithMustUseReturnValue() => 0;

        [MustUseReturnValue]
        public override int AnnotatedWithMustDisposeResource() => 0;

        [MustUseReturnValue]
        public override int AnnotatedWithMustDisposeResourceFalse() => 0;

        [MustUseReturnValue]
        public override int AnnotatedWithMustDisposeResourceTrue() => 0;

        [MustUseReturnValue]
        public int Other() => 0;
    }

    internal class ChildAnnotatedWithMustDisposeResource : Parent
    {
        [|MustDisposeResource|(7)]
        public override int NotAnnotated() => 0;

        [|MustDisposeResource|(8)]
        public override int AnnotatedWithPure() => 0;

        [|MustDisposeResource|(9)]
        public override int AnnotatedWithMustUseReturnValue() => 0;

        [|MustDisposeResource|(10)]
        public override int AnnotatedWithMustDisposeResource() => 0;

        [|MustDisposeResource|(11)]
        public override int AnnotatedWithMustDisposeResourceFalse() => 0;

        [|MustDisposeResource|(12)]
        public override int AnnotatedWithMustDisposeResourceTrue() => 0;

        [|MustDisposeResource|(13)]
        public int Other() => 0;
    }

    internal class ChildAnnotatedWithMustDisposeResourceFalse : Parent
    {
        [|MustDisposeResource(false)|(14)]
        public override int NotAnnotated() => 0;

        [|MustDisposeResource(false)|(15)]
        public override int AnnotatedWithPure() => 0;

        [|MustDisposeResource(false)|(16)]
        public override int AnnotatedWithMustUseReturnValue() => 0;

        [|MustDisposeResource(false)|(17)]
        public override int AnnotatedWithMustDisposeResource() => 0;

        [|MustDisposeResource(false)|(18)]
        public override int AnnotatedWithMustDisposeResourceFalse() => 0;

        [|MustDisposeResource(false)|(19)]
        public override int AnnotatedWithMustDisposeResourceTrue() => 0;

        [|MustDisposeResource(false)|(20)]
        public int Other() => 0;
    }

    internal class ChildAnnotatedWithMustDisposeResourceTrue : Parent
    {
        [|MustDisposeResource(true)|(21)]
        public override int NotAnnotated() => 0;

        [|MustDisposeResource(true)|(22)]
        public override int AnnotatedWithPure() => 0;

        [|MustDisposeResource(true)|(23)]
        public override int AnnotatedWithMustUseReturnValue() => 0;

        [|MustDisposeResource(true)|(24)]
        public override int AnnotatedWithMustDisposeResource() => 0;

        [|MustDisposeResource(true)|(25)]
        public override int AnnotatedWithMustDisposeResourceFalse() => 0;

        [|MustDisposeResource(true)|(26)]
        public override int AnnotatedWithMustDisposeResourceTrue() => 0;

        [|MustDisposeResource(true)|(27)]
        public int Other() => 0;
    }

    internal class WithAnnotations
    {
        [Pure]
        public int WithPure() => 0;

        [MustUseReturnValue]
        public int WithMustUseReturnValue() => 0;

        [|MustDisposeResource|(28)]
        public int WithMustDisposeResource() => 0;

        [|MustDisposeResource(false)|(29)]
        public int WithMustDisposeResourceFalse() => 0;

        [|MustDisposeResource(true)|(30)]
        public int WithMustDisposeResourceTrue() => 0;
    }

    internal class WithConflictingAnnotations
    {
        [|Pure|(31)]
        [|MustUseReturnValue|(32)]
        public int Pure_MustUseReturnValue() => 0;

        [Pure]
        [|MustDisposeResource|(33)]
        public int Pure_MustDisposeResource() => 0;

        [MustUseReturnValue]
        [|MustDisposeResource|(34)]
        public int MustUseReturnValue_MustDisposeResource() => 0;

        [|Pure|(35)]
        [|MustUseReturnValue|(36)]
        [|MustDisposeResource|(37)]
        public int All() => 0;
    }
}

namespace Disposable
{
    [method: MustDisposeResource]
    internal ref struct DisposableRefStruct()
    {
        public void Dispose() { }
    }

    internal class Parent
    {
        public virtual IDisposable |NotAnnotated|(38)() => throw new NotImplementedException();

        [|Pure|(39)]
        public virtual IAsyncDisposable |AnnotatedWithPure|(40)() => throw new NotImplementedException();

        [|MustUseReturnValue|(41)]
        public virtual Stream |AnnotatedWithMustUseReturnValue|(42)() => throw new NotImplementedException();

        [MustDisposeResource]
        public virtual Stream AnnotatedWithMustDisposeResource() => throw new NotImplementedException();

        [MustDisposeResource(false)]
        public virtual IAsyncDisposable AnnotatedWithMustDisposeResourceFalse() => throw new NotImplementedException();

        [MustDisposeResource(true)]
        public virtual IAsyncDisposable AnnotatedWithMustDisposeResourceTrue() => throw new NotImplementedException();
    }

    internal class ChildNotAnnotated : Parent
    {
        public override IDisposable |NotAnnotated|(43)() => throw new NotImplementedException();

        public override IAsyncDisposable |AnnotatedWithPure|(44)() => throw new NotImplementedException();

        public override Stream |AnnotatedWithMustUseReturnValue|(45)() => throw new NotImplementedException();

        public override Stream AnnotatedWithMustDisposeResource() => throw new NotImplementedException();

        public override IAsyncDisposable |AnnotatedWithMustDisposeResourceFalse|(46)() => throw new NotImplementedException();

        public override IAsyncDisposable AnnotatedWithMustDisposeResourceTrue() => throw new NotImplementedException();

        public DisposableRefStruct |Other|(47)() => throw new NotImplementedException();
    }

    internal class ChildAnnotatedWithPure : Parent
    {
        [|Pure|(48)]
        public override IDisposable |NotAnnotated|(49)() => throw new NotImplementedException();

        [|Pure|(50)]
        public override IAsyncDisposable |AnnotatedWithPure|(51)() => throw new NotImplementedException();

        [|Pure|(52)]
        public override Stream |AnnotatedWithMustUseReturnValue|(53)() => throw new NotImplementedException();

        [|Pure|(54)]
        public override Stream AnnotatedWithMustDisposeResource() => throw new NotImplementedException();

        [|Pure|(55)]
        public override IAsyncDisposable |AnnotatedWithMustDisposeResourceFalse|(56)() => throw new NotImplementedException();

        [|Pure|(57)]
        public override IAsyncDisposable AnnotatedWithMustDisposeResourceTrue() => throw new NotImplementedException();

        [|Pure|(58)]
        public DisposableRefStruct |Other|(59)() => throw new NotImplementedException();
    }

    internal class ChildAnnotatedWithMustUseReturnValue : Parent
    {
        [|MustUseReturnValue|(60)]
        public override IDisposable |NotAnnotated|(61)() => throw new NotImplementedException();

        [|MustUseReturnValue|(62)]
        public override IAsyncDisposable |AnnotatedWithPure|(63)() => throw new NotImplementedException();

        [|MustUseReturnValue|(64)]
        public override Stream |AnnotatedWithMustUseReturnValue|(65)() => throw new NotImplementedException();

        [|MustUseReturnValue|(66)]
        public override Stream AnnotatedWithMustDisposeResource() => throw new NotImplementedException();

        [|MustUseReturnValue|(67)]
        public override IAsyncDisposable |AnnotatedWithMustDisposeResourceFalse|(68)() => throw new NotImplementedException();

        [|MustUseReturnValue|(69)]
        public override IAsyncDisposable AnnotatedWithMustDisposeResourceTrue() => throw new NotImplementedException();

        [|MustUseReturnValue|(70)]
        public DisposableRefStruct |Other|(71)() => throw new NotImplementedException();
    }

    internal class ChildAnnotatedWithMustDisposeResource : Parent
    {
        [MustDisposeResource]
        public override IDisposable NotAnnotated() => throw new NotImplementedException();

        [MustDisposeResource]
        public override IAsyncDisposable AnnotatedWithPure() => throw new NotImplementedException();

        [MustDisposeResource]
        public override Stream AnnotatedWithMustUseReturnValue() => throw new NotImplementedException();

        [|MustDisposeResource|(72)]
        public override Stream AnnotatedWithMustDisposeResource() => throw new NotImplementedException();

        [MustDisposeResource]
        public override IAsyncDisposable AnnotatedWithMustDisposeResourceFalse() => throw new NotImplementedException();

        [|MustDisposeResource|(73)]
        public override IAsyncDisposable AnnotatedWithMustDisposeResourceTrue() => throw new NotImplementedException();

        [MustDisposeResource]
        public DisposableRefStruct Other() => throw new NotImplementedException();
    }

    internal class ChildAnnotatedWithMustDisposeResourceFalse : Parent
    {
        [MustDisposeResource(false)]
        public override IDisposable NotAnnotated() => throw new NotImplementedException();

        [MustDisposeResource(false)]
        public override IAsyncDisposable AnnotatedWithPure() => throw new NotImplementedException();

        [MustDisposeResource(false)]
        public override Stream AnnotatedWithMustUseReturnValue() => throw new NotImplementedException();

        [MustDisposeResource(false)]
        public override Stream AnnotatedWithMustDisposeResource() => throw new NotImplementedException();

        [MustDisposeResource(false)]
        public override IAsyncDisposable AnnotatedWithMustDisposeResourceFalse() => throw new NotImplementedException();

        [MustDisposeResource(false)]
        public override IAsyncDisposable AnnotatedWithMustDisposeResourceTrue() => throw new NotImplementedException();

        [MustDisposeResource(false)]
        public DisposableRefStruct Other() => throw new NotImplementedException();
    }

    internal class ChildAnnotatedWithMustDisposeResourceTrue : Parent
    {
        [MustDisposeResource(true)]
        public override IDisposable NotAnnotated() => throw new NotImplementedException();

        [MustDisposeResource(true)]
        public override IAsyncDisposable AnnotatedWithPure() => throw new NotImplementedException();

        [MustDisposeResource(true)]
        public override Stream AnnotatedWithMustUseReturnValue() => throw new NotImplementedException();

        [|MustDisposeResource(true)|(74)]
        public override Stream AnnotatedWithMustDisposeResource() => throw new NotImplementedException();

        [MustDisposeResource(true)]
        public override IAsyncDisposable AnnotatedWithMustDisposeResourceFalse() => throw new NotImplementedException();

        [|MustDisposeResource(true)|(75)]
        public override IAsyncDisposable AnnotatedWithMustDisposeResourceTrue() => throw new NotImplementedException();

        [MustDisposeResource(true)]
        public DisposableRefStruct Other() => throw new NotImplementedException();
    }

    internal class ParentTaskLike
    {
        public virtual Task<IDisposable> |NotAnnotated|(76)() => throw new NotImplementedException();

        [|Pure|(77)]
        public virtual Task<IAsyncDisposable> |AnnotatedWithPure|(78)() => throw new NotImplementedException();

        [|MustUseReturnValue|(79)]
        public virtual Task<Stream> |AnnotatedWithMustUseReturnValue|(80)() => throw new NotImplementedException();

        [MustDisposeResource]
        public virtual ValueTask<Stream> AnnotatedWithMustDisposeResource() => throw new NotImplementedException();

        [MustDisposeResource(false)]
        public virtual ValueTask<IAsyncDisposable> AnnotatedWithMustDisposeResourceFalse() => throw new NotImplementedException();
    }

    internal class ChildTaskLikeNotAnnotated : ParentTaskLike
    {
        public override Task<IDisposable> |NotAnnotated|(81)() => throw new NotImplementedException();

        public override Task<IAsyncDisposable> |AnnotatedWithPure|(82)() => throw new NotImplementedException();

        public override Task<Stream> |AnnotatedWithMustUseReturnValue|(83)() => throw new NotImplementedException();

        public override ValueTask<Stream> AnnotatedWithMustDisposeResource() => throw new NotImplementedException();

        public override ValueTask<IAsyncDisposable> |AnnotatedWithMustDisposeResourceFalse|(84)() => throw new NotImplementedException();

        public ValueTask<IDisposable> |Other|(85)() => throw new NotImplementedException();
    }

    internal class ChildTaskLikeAnnotatedWithPure : ParentTaskLike
    {
        [|Pure|(86)]
        public override Task<IDisposable> |NotAnnotated|(87)() => throw new NotImplementedException();

        [|Pure|(88)]
        public override Task<IAsyncDisposable> |AnnotatedWithPure|(89)() => throw new NotImplementedException();

        [|Pure|(90)]
        public override Task<Stream> |AnnotatedWithMustUseReturnValue|(91)() => throw new NotImplementedException();

        [|Pure|(92)]
        public override ValueTask<Stream> AnnotatedWithMustDisposeResource() => throw new NotImplementedException();

        [|Pure|(93)]
        public override ValueTask<IAsyncDisposable> |AnnotatedWithMustDisposeResourceFalse|(94)() => throw new NotImplementedException();

        [|Pure|(95)]
        public ValueTask<IDisposable> |Other|(96)() => throw new NotImplementedException();
    }

    internal class ChildTaskLikeAnnotatedWithMustUseReturnValue : ParentTaskLike
    {
        [|MustUseReturnValue|(97)]
        public override Task<IDisposable> |NotAnnotated|(98)() => throw new NotImplementedException();

        [|MustUseReturnValue|(99)]
        public override Task<IAsyncDisposable> |AnnotatedWithPure|(100)() => throw new NotImplementedException();

        [|MustUseReturnValue|(101)]
        public override Task<Stream> |AnnotatedWithMustUseReturnValue|(102)() => throw new NotImplementedException();

        [|MustUseReturnValue|(103)]
        public override ValueTask<Stream> AnnotatedWithMustDisposeResource() => throw new NotImplementedException();

        [|MustUseReturnValue|(104)]
        public override ValueTask<IAsyncDisposable> |AnnotatedWithMustDisposeResourceFalse|(105)() => throw new NotImplementedException();

        [|MustUseReturnValue|(106)]
        public ValueTask<IDisposable> |Other|(107)() => throw new NotImplementedException();
    }

    internal class ChildTaskLikeAnnotatedWithMustDisposeResource : ParentTaskLike
    {
        [MustDisposeResource]
        public override Task<IDisposable> NotAnnotated() => throw new NotImplementedException();

        [MustDisposeResource]
        public override Task<IAsyncDisposable> AnnotatedWithPure() => throw new NotImplementedException();

        [MustDisposeResource]
        public override Task<Stream> AnnotatedWithMustUseReturnValue() => throw new NotImplementedException();

        [|MustDisposeResource|(108)]
        public override ValueTask<Stream> AnnotatedWithMustDisposeResource() => throw new NotImplementedException();

        [MustDisposeResource]
        public override ValueTask<IAsyncDisposable> AnnotatedWithMustDisposeResourceFalse() => throw new NotImplementedException();

        [MustDisposeResource]
        public ValueTask<IDisposable> Other() => throw new NotImplementedException();
    }

    internal class ChildTaskLikeAnnotatedWithMustDisposeResourceFalse : ParentTaskLike
    {
        [MustDisposeResource(false)]
        public override Task<IDisposable> NotAnnotated() => throw new NotImplementedException();

        [MustDisposeResource(false)]
        public override Task<IAsyncDisposable> AnnotatedWithPure() => throw new NotImplementedException();

        [MustDisposeResource(false)]
        public override Task<Stream> AnnotatedWithMustUseReturnValue() => throw new NotImplementedException();

        [MustDisposeResource(false)]
        public override ValueTask<Stream> AnnotatedWithMustDisposeResource() => throw new NotImplementedException();

        [MustDisposeResource(false)]
        public override ValueTask<IAsyncDisposable> AnnotatedWithMustDisposeResourceFalse() => throw new NotImplementedException();

        [MustDisposeResource(false)]
        public ValueTask<IDisposable> Other() => throw new NotImplementedException();
    }

    internal class WithAnnotations
    {
        [|Pure|(109)]
        public IDisposable |WithPure|(110)() => throw new NotImplementedException();

        [|MustUseReturnValue|(111)]
        public IDisposable |WithMustUseReturnValue|(112)() => throw new NotImplementedException();

        [MustDisposeResource]
        public IDisposable WithMustDisposeResource() => throw new NotImplementedException();

        [MustDisposeResource(false)]
        public IDisposable WithMustDisposeResourceFalse() => throw new NotImplementedException();

        [MustDisposeResource(true)]
        public IDisposable WithMustDisposeResourceTrue() => throw new NotImplementedException();
    }

    internal class WithConflictingAnnotations
    {
        [|Pure|(113)]
        [|MustUseReturnValue|(114)]
        public IDisposable |Pure_MustUseReturnValue|(115)() => throw new NotImplementedException();

        [|Pure|(116)]
        [MustDisposeResource]
        public IDisposable Pure_MustDisposeResource() => throw new NotImplementedException();

        [|MustUseReturnValue|(117)]
        [MustDisposeResource]
        public IDisposable MustUseReturnValue_MustDisposeResource() => throw new NotImplementedException();

        [|Pure|(118)]
        [|MustUseReturnValue|(119)]
        [MustDisposeResource]
        public IDisposable All() => throw new NotImplementedException();
    }

    internal class WithConflictingAnnotationsTaskLike
    {
        [|Pure|(120)]
        [|MustUseReturnValue|(121)]
        public Task<IDisposable> |Pure_MustUseReturnValue|(122)() => throw new NotImplementedException();

        [|Pure|(123)]
        [MustDisposeResource]
        public ValueTask<IDisposable> Pure_MustDisposeResource() => throw new NotImplementedException();

        [|MustUseReturnValue|(124)]
        [MustDisposeResource]
        public Task<IDisposable> MustUseReturnValue_MustDisposeResource() => throw new NotImplementedException();

        [|Pure|(125)]
        [|MustUseReturnValue|(126)]
        [MustDisposeResource]
        public ValueTask<IDisposable> All() => throw new NotImplementedException();
    }

    internal class NullableTypes
    {
        [MustDisposeResource]
        public class Class : IDisposable
        {
            public void Dispose() { }
        }

        [method: MustDisposeResource]
        public struct Struct() : IDisposable
        {
            public void Dispose() { }
        }

        public Class|?|(127) |NullableClass|(128)() => throw new NotImplementedException();

        public Struct? |NullableStruct|(129)() => throw new NotImplementedException();

        public ValueTask<Class?> |NullableClassTaskLike|(130)() => throw new NotImplementedException();

        public ValueTask<Struct?> |NullableStructTaskLike|(131)() => throw new NotImplementedException();
    }
}
---------------------------------------------------------
(0): ReSharper Warning: Annotation is not valid because the method return type is not disposable.
(1): ReSharper Warning: Annotation is not valid because the method return type is not disposable.
(2): ReSharper Warning: Annotation is not valid because the method return type is not disposable.
(3): ReSharper Suggestion: Annotation is redundant because a base method is already annotated with [Pure].
(4): ReSharper Warning: Annotation is conflicting because a base method is already annotated with [MustUseReturnValue].
(5): ReSharper Warning: Annotation is conflicting because a base method is already annotated with [Pure].
(6): ReSharper Suggestion: Annotation is redundant because a base method is already annotated with [MustUseReturnValue].
(7): ReSharper Warning: Annotation is not valid because the method return type is not disposable.
(8): ReSharper Warning: Annotation is not valid because the method return type is not disposable.
(9): ReSharper Warning: Annotation is not valid because the method return type is not disposable.
(10): ReSharper Warning: Annotation is not valid because the method return type is not disposable.
(11): ReSharper Warning: Annotation is not valid because the method return type is not disposable.
(12): ReSharper Warning: Annotation is not valid because the method return type is not disposable.
(13): ReSharper Warning: Annotation is not valid because the method return type is not disposable.
(14): ReSharper Warning: Annotation is not valid because the method return type is not disposable.
(15): ReSharper Warning: Annotation is not valid because the method return type is not disposable.
(16): ReSharper Warning: Annotation is not valid because the method return type is not disposable.
(17): ReSharper Warning: Annotation is not valid because the method return type is not disposable.
(18): ReSharper Warning: Annotation is not valid because the method return type is not disposable.
(19): ReSharper Warning: Annotation is not valid because the method return type is not disposable.
(20): ReSharper Warning: Annotation is not valid because the method return type is not disposable.
(21): ReSharper Warning: Annotation is not valid because the method return type is not disposable.
(22): ReSharper Warning: Annotation is not valid because the method return type is not disposable.
(23): ReSharper Warning: Annotation is not valid because the method return type is not disposable.
(24): ReSharper Warning: Annotation is not valid because the method return type is not disposable.
(25): ReSharper Warning: Annotation is not valid because the method return type is not disposable.
(26): ReSharper Warning: Annotation is not valid because the method return type is not disposable.
(27): ReSharper Warning: Annotation is not valid because the method return type is not disposable.
(28): ReSharper Warning: Annotation is not valid because the method return type is not disposable.
(29): ReSharper Warning: Annotation is not valid because the method return type is not disposable.
(30): ReSharper Warning: Annotation is not valid because the method return type is not disposable.
(31): ReSharper Warning: Annotation is conflicting because the method is also annotated with [MustUseReturnValue].
(32): ReSharper Warning: Annotation is conflicting because the method is also annotated with [Pure].
(33): ReSharper Warning: Annotation is not valid because the method return type is not disposable.
(34): ReSharper Warning: Annotation is not valid because the method return type is not disposable.
(35): ReSharper Warning: Annotation is conflicting because the method is also annotated with [MustUseReturnValue].
(36): ReSharper Warning: Annotation is conflicting because the method is also annotated with [Pure].
(37): ReSharper Warning: Annotation is not valid because the method return type is not disposable.
(38): ReSharper Warning: Method with the disposable return type is not annotated with [MustDisposeResource] or [MustDisposeResource(false)].
(39): ReSharper Warning: Annotation is not valid because the method return type is disposable.
(40): ReSharper Warning: Method with the disposable return type is not annotated with [MustDisposeResource] or [MustDisposeResource(false)].
(41): ReSharper Warning: Annotation is not valid because the method return type is disposable.
(42): ReSharper Warning: Method with the disposable return type is not annotated with [MustDisposeResource] or [MustDisposeResource(false)].
(43): ReSharper Warning: Method with the disposable return type is not annotated with [MustDisposeResource] or [MustDisposeResource(false)].
(44): ReSharper Warning: Method with the disposable return type is not annotated with [MustDisposeResource] or [MustDisposeResource(false)].
(45): ReSharper Warning: Method with the disposable return type is not annotated with [MustDisposeResource] or [MustDisposeResource(false)].
(46): ReSharper Warning: Method with the disposable return type is not annotated with [MustDisposeResource] or [MustDisposeResource(false)].
(47): ReSharper Warning: Method with the disposable return type is not annotated with [MustDisposeResource] or [MustDisposeResource(false)].
(48): ReSharper Warning: Annotation is not valid because the method return type is disposable.
(49): ReSharper Warning: Method with the disposable return type is not annotated with [MustDisposeResource] or [MustDisposeResource(false)].
(50): ReSharper Warning: Annotation is not valid because the method return type is disposable.
(51): ReSharper Warning: Method with the disposable return type is not annotated with [MustDisposeResource] or [MustDisposeResource(false)].
(52): ReSharper Warning: Annotation is not valid because the method return type is disposable.
(53): ReSharper Warning: Method with the disposable return type is not annotated with [MustDisposeResource] or [MustDisposeResource(false)].
(54): ReSharper Warning: Annotation is not valid because the method return type is disposable.
(55): ReSharper Warning: Annotation is not valid because the method return type is disposable.
(56): ReSharper Warning: Method with the disposable return type is not annotated with [MustDisposeResource] or [MustDisposeResource(false)].
(57): ReSharper Warning: Annotation is not valid because the method return type is disposable.
(58): ReSharper Warning: Annotation is not valid because the method return type is disposable.
(59): ReSharper Warning: Method with the disposable return type is not annotated with [MustDisposeResource] or [MustDisposeResource(false)].
(60): ReSharper Warning: Annotation is not valid because the method return type is disposable.
(61): ReSharper Warning: Method with the disposable return type is not annotated with [MustDisposeResource] or [MustDisposeResource(false)].
(62): ReSharper Warning: Annotation is not valid because the method return type is disposable.
(63): ReSharper Warning: Method with the disposable return type is not annotated with [MustDisposeResource] or [MustDisposeResource(false)].
(64): ReSharper Warning: Annotation is not valid because the method return type is disposable.
(65): ReSharper Warning: Method with the disposable return type is not annotated with [MustDisposeResource] or [MustDisposeResource(false)].
(66): ReSharper Warning: Annotation is not valid because the method return type is disposable.
(67): ReSharper Warning: Annotation is not valid because the method return type is disposable.
(68): ReSharper Warning: Method with the disposable return type is not annotated with [MustDisposeResource] or [MustDisposeResource(false)].
(69): ReSharper Warning: Annotation is not valid because the method return type is disposable.
(70): ReSharper Warning: Annotation is not valid because the method return type is disposable.
(71): ReSharper Warning: Method with the disposable return type is not annotated with [MustDisposeResource] or [MustDisposeResource(false)].
(72): ReSharper Suggestion: Annotation is redundant because a base method is already annotated with [MustDisposeResource].
(73): ReSharper Suggestion: Annotation is redundant because a base method is already annotated with [MustDisposeResource].
(74): ReSharper Suggestion: Annotation is redundant because a base method is already annotated with [MustDisposeResource].
(75): ReSharper Suggestion: Annotation is redundant because a base method is already annotated with [MustDisposeResource].
(76): ReSharper Warning: Method with the disposable return type is not annotated with [MustDisposeResource] or [MustDisposeResource(false)].
(77): ReSharper Warning: Annotation is not valid because the method return type is disposable.
(78): ReSharper Warning: Method with the disposable return type is not annotated with [MustDisposeResource] or [MustDisposeResource(false)].
(79): ReSharper Warning: Annotation is not valid because the method return type is disposable.
(80): ReSharper Warning: Method with the disposable return type is not annotated with [MustDisposeResource] or [MustDisposeResource(false)].
(81): ReSharper Warning: Method with the disposable return type is not annotated with [MustDisposeResource] or [MustDisposeResource(false)].
(82): ReSharper Warning: Method with the disposable return type is not annotated with [MustDisposeResource] or [MustDisposeResource(false)].
(83): ReSharper Warning: Method with the disposable return type is not annotated with [MustDisposeResource] or [MustDisposeResource(false)].
(84): ReSharper Warning: Method with the disposable return type is not annotated with [MustDisposeResource] or [MustDisposeResource(false)].
(85): ReSharper Warning: Method with the disposable return type is not annotated with [MustDisposeResource] or [MustDisposeResource(false)].
(86): ReSharper Warning: Annotation is not valid because the method return type is disposable.
(87): ReSharper Warning: Method with the disposable return type is not annotated with [MustDisposeResource] or [MustDisposeResource(false)].
(88): ReSharper Warning: Annotation is not valid because the method return type is disposable.
(89): ReSharper Warning: Method with the disposable return type is not annotated with [MustDisposeResource] or [MustDisposeResource(false)].
(90): ReSharper Warning: Annotation is not valid because the method return type is disposable.
(91): ReSharper Warning: Method with the disposable return type is not annotated with [MustDisposeResource] or [MustDisposeResource(false)].
(92): ReSharper Warning: Annotation is not valid because the method return type is disposable.
(93): ReSharper Warning: Annotation is not valid because the method return type is disposable.
(94): ReSharper Warning: Method with the disposable return type is not annotated with [MustDisposeResource] or [MustDisposeResource(false)].
(95): ReSharper Warning: Annotation is not valid because the method return type is disposable.
(96): ReSharper Warning: Method with the disposable return type is not annotated with [MustDisposeResource] or [MustDisposeResource(false)].
(97): ReSharper Warning: Annotation is not valid because the method return type is disposable.
(98): ReSharper Warning: Method with the disposable return type is not annotated with [MustDisposeResource] or [MustDisposeResource(false)].
(99): ReSharper Warning: Annotation is not valid because the method return type is disposable.
(100): ReSharper Warning: Method with the disposable return type is not annotated with [MustDisposeResource] or [MustDisposeResource(false)].
(101): ReSharper Warning: Annotation is not valid because the method return type is disposable.
(102): ReSharper Warning: Method with the disposable return type is not annotated with [MustDisposeResource] or [MustDisposeResource(false)].
(103): ReSharper Warning: Annotation is not valid because the method return type is disposable.
(104): ReSharper Warning: Annotation is not valid because the method return type is disposable.
(105): ReSharper Warning: Method with the disposable return type is not annotated with [MustDisposeResource] or [MustDisposeResource(false)].
(106): ReSharper Warning: Annotation is not valid because the method return type is disposable.
(107): ReSharper Warning: Method with the disposable return type is not annotated with [MustDisposeResource] or [MustDisposeResource(false)].
(108): ReSharper Suggestion: Annotation is redundant because a base method is already annotated with [MustDisposeResource].
(109): ReSharper Warning: Annotation is not valid because the method return type is disposable.
(110): ReSharper Warning: Method with the disposable return type is not annotated with [MustDisposeResource] or [MustDisposeResource(false)].
(111): ReSharper Warning: Annotation is not valid because the method return type is disposable.
(112): ReSharper Warning: Method with the disposable return type is not annotated with [MustDisposeResource] or [MustDisposeResource(false)].
(113): ReSharper Warning: Annotation is not valid because the method return type is disposable.
(114): ReSharper Warning: Annotation is not valid because the method return type is disposable.
(115): ReSharper Warning: Method with the disposable return type is not annotated with [MustDisposeResource] or [MustDisposeResource(false)].
(116): ReSharper Warning: Annotation is not valid because the method return type is disposable.
(117): ReSharper Warning: Annotation is not valid because the method return type is disposable.
(118): ReSharper Warning: Annotation is not valid because the method return type is disposable.
(119): ReSharper Warning: Annotation is not valid because the method return type is disposable.
(120): ReSharper Warning: Annotation is not valid because the method return type is disposable.
(121): ReSharper Warning: Annotation is not valid because the method return type is disposable.
(122): ReSharper Warning: Method with the disposable return type is not annotated with [MustDisposeResource] or [MustDisposeResource(false)].
(123): ReSharper Warning: Annotation is not valid because the method return type is disposable.
(124): ReSharper Warning: Annotation is not valid because the method return type is disposable.
(125): ReSharper Warning: Annotation is not valid because the method return type is disposable.
(126): ReSharper Warning: Annotation is not valid because the method return type is disposable.
(127): ReSharper Dead Code: Return type of 'NullableClass' can be non-nullable
(128): ReSharper Warning: Method with the disposable return type is not annotated with [MustDisposeResource] or [MustDisposeResource(false)].
(129): ReSharper Warning: Method with the disposable return type is not annotated with [MustDisposeResource] or [MustDisposeResource(false)].
(130): ReSharper Warning: Method with the disposable return type is not annotated with [MustDisposeResource] or [MustDisposeResource(false)].
(131): ReSharper Warning: Method with the disposable return type is not annotated with [MustDisposeResource] or [MustDisposeResource(false)].
