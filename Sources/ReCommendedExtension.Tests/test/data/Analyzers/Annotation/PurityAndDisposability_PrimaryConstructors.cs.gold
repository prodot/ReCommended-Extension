using System;
using System.Threading.Tasks;
using JetBrains.Annotations;

namespace DisposableAnnotated
{
    [MustDisposeResource]
    internal class Class() : IDisposable
    {
        public void Dispose() { }    
    }

    [MustDisposeResource]
    internal record Record() : IAsyncDisposable
    {
        public ValueTask DisposeAsync() => ValueTask.CompletedTask;
    }

    [MustDisposeResource]
    internal struct Struct() : IDisposable
    {
        public void Dispose() { }
    }

    [MustDisposeResource]
    internal record struct RecordStruct() : IAsyncDisposable
    {
        public ValueTask DisposeAsync() => ValueTask.CompletedTask;
    }
}

namespace DisposableAnnotatedAgain
{
    [MustDisposeResource]
    [method: |MustDisposeResource|(0)]
    internal class Class() : IDisposable
    {
        public void Dispose() { }
    }

    [MustDisposeResource]
    [method: |MustDisposeResource|(1)]
    internal record Record() : IAsyncDisposable
    {
        public ValueTask DisposeAsync() => ValueTask.CompletedTask;
    }

    [MustDisposeResource]
    [method: |MustDisposeResource|(2)]
    internal struct Struct() : IDisposable
    {
        public void Dispose() { }
    }

    [MustDisposeResource]
    [method: |MustDisposeResource|(3)]
    internal record struct RecordStruct() : IAsyncDisposable
    {
        public ValueTask DisposeAsync() => ValueTask.CompletedTask;
    }
}

namespace DisposableAnnotatedWithFalse
{
    [MustDisposeResource(false)]
    internal class Class|()|(4) : IDisposable
    {
        public void Dispose() { }
    }

    [MustDisposeResource(false)]
    internal record Record|()|(5) : IAsyncDisposable
    {
        public ValueTask DisposeAsync() => ValueTask.CompletedTask;
    }

    [MustDisposeResource(false)]
    internal struct Struct|()|(6) : IDisposable
    {
        public void Dispose() { }
    }

    [MustDisposeResource(false)]
    internal record struct RecordStruct|()|(7) : IAsyncDisposable
    {
        public ValueTask DisposeAsync() => ValueTask.CompletedTask;
    }
}

namespace DisposableAnnotatedWithFalseAgain
{
    [MustDisposeResource(false)]
    [method: MustDisposeResource(false)]
    internal class Class() : IDisposable
    {
        public void Dispose() { }
    }

    [MustDisposeResource(false)]
    [method: MustDisposeResource(false)]
    internal record Record() : IAsyncDisposable
    {
        public ValueTask DisposeAsync() => ValueTask.CompletedTask;
    }

    [MustDisposeResource(false)]
    [method: MustDisposeResource(false)]
    internal struct Struct() : IDisposable
    {
        public void Dispose() { }
    }

    [MustDisposeResource(false)]
    [method: MustDisposeResource(false)]
    internal record struct RecordStruct() : IAsyncDisposable
    {
        public ValueTask DisposeAsync() => ValueTask.CompletedTask;
    }
}

namespace DisposableWithNearestTypeAnnotated
{
    [MustDisposeResource]
    internal class GrandParent : IDisposable
    {
        public void Dispose() { }
    }

    internal class Parent : GrandParent { }

    internal class Child() : Parent { }

    internal record |GrandParentRecord|(8) : IDisposable
    {
        public void Dispose() { }
    }

    [MustDisposeResource]
    internal record ParentRecord : GrandParentRecord { }

    internal record ChildRecord() : ParentRecord { }
}

namespace DisposableWithNearestTypeAnnotatedAgain
{
    [MustDisposeResource]
    internal class GrandParent : IDisposable
    {
        public void Dispose() { }
    }

    internal class Parent : GrandParent { }

    [method: |MustDisposeResource|(9)]
    internal class Child() : Parent { }

    internal record |GrandParentRecord|(10) : IDisposable
    {
        public void Dispose() { }
    }

    [MustDisposeResource]
    internal record ParentRecord : GrandParentRecord { }

    [method: |MustDisposeResource|(11)]
    internal record ChildRecord() : ParentRecord { }
}

namespace NonDisposable
{
    [method: |MustDisposeResource|(12)]
    internal class Class() { }

    [method: |MustDisposeResource(false)|(13)]
    internal record Record() { }

    [method: |MustDisposeResource|(14)]
    internal struct Struct() { }

    [method: |MustDisposeResource(false)|(15)]
    internal record struct RecordStruct() { }
}

namespace NonDisposableStructs
{
    [method: |MustDisposeResource|(16)]
    internal struct NonDisposableStruct() { }

    [method: |MustDisposeResource(false)|(17)]
    internal record struct NonDisposableStructRecord() { }
}

namespace RefStructs
{
    [method: |MustDisposeResource|(18)]
    internal ref struct RefStruct() { }
}
---------------------------------------------------------
(0): ReSharper Suggestion: Annotation is redundant because the class or a base class is already annotated with [MustDisposeResource].
(1): ReSharper Suggestion: Annotation is redundant because the record or a base record is already annotated with [MustDisposeResource].
(2): ReSharper Suggestion: Annotation is redundant because the struct is already annotated with [MustDisposeResource].
(3): ReSharper Suggestion: Annotation is redundant because the record is already annotated with [MustDisposeResource].
(4): ReSharper Warning: Constructor of the disposable class (with the [MustDisposeResource(false)] annotation) is not annotated with [MustDisposeResource] or [MustDisposeResource(false)].
(5): ReSharper Warning: Constructor of the disposable record (with the [MustDisposeResource(false)] annotation) is not annotated with [MustDisposeResource] or [MustDisposeResource(false)].
(6): ReSharper Warning: Constructor of the disposable struct (with the [MustDisposeResource(false)] annotation) is not annotated with [MustDisposeResource] or [MustDisposeResource(false)].
(7): ReSharper Warning: Constructor of the disposable record (with the [MustDisposeResource(false)] annotation) is not annotated with [MustDisposeResource] or [MustDisposeResource(false)].
(8): ReSharper Warning: Record is disposable, but not annotated with [MustDisposeResource] or [MustDisposeResource(false)].
(9): ReSharper Suggestion: Annotation is redundant because the class or a base class is already annotated with [MustDisposeResource].
(10): ReSharper Warning: Record is disposable, but not annotated with [MustDisposeResource] or [MustDisposeResource(false)].
(11): ReSharper Suggestion: Annotation is redundant because the record or a base record is already annotated with [MustDisposeResource].
(12): ReSharper Warning: Annotation is not valid because the class is not disposable.
(13): ReSharper Warning: Annotation is not valid because the record is not disposable.
(14): ReSharper Warning: Annotation is not valid because the struct is not disposable.
(15): ReSharper Warning: Annotation is not valid because the record is not disposable.
(16): ReSharper Warning: Annotation is not valid because the struct is not disposable.
(17): ReSharper Warning: Annotation is not valid because the record is not disposable.
(18): ReSharper Warning: Annotation is not valid because the struct is not disposable.
