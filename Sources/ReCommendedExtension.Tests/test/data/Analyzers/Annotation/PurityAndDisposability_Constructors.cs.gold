using System;
using System.Threading.Tasks;
using JetBrains.Annotations;

namespace DisposableAnnotated
{
    [MustDisposeResource]
    internal class Class : IDisposable
    {
        public Class() { }
        public void Dispose() { }    
    }

    [MustDisposeResource]
    internal record Record : IAsyncDisposable
    {
        public Record() { }
        public ValueTask DisposeAsync() => ValueTask.CompletedTask;
    }

    [MustDisposeResource]
    internal struct Struct : IDisposable
    {
        public Struct() { }
        public void Dispose() { }
    }

    [MustDisposeResource]
    internal record struct RecordStruct : IAsyncDisposable
    {
        public RecordStruct() { }
        public ValueTask DisposeAsync() => ValueTask.CompletedTask;
    }
}

namespace DisposableAnnotatedAgain
{
    [MustDisposeResource]
    internal class Class : IDisposable
    {
        [|MustDisposeResource|(0)]
        public Class() { }

        public void Dispose() { }
    }

    [MustDisposeResource]
    internal record Record : IAsyncDisposable
    {
        [|MustDisposeResource|(1)]
        public Record() { }

        public ValueTask DisposeAsync() => ValueTask.CompletedTask;
    }

    [MustDisposeResource]
    internal struct Struct : IDisposable
    {
        [|MustDisposeResource|(2)]
        public Struct() { }

        public void Dispose() { }
    }

    [MustDisposeResource]
    internal record struct RecordStruct : IAsyncDisposable
    {
        [|MustDisposeResource|(3)]
        public RecordStruct() { }

        public ValueTask DisposeAsync() => ValueTask.CompletedTask;
    }
}

namespace DisposableAnnotatedWithFalse
{
    [MustDisposeResource(false)]
    internal class Class : IDisposable
    {
        public |Class|(4)() { }
        public void Dispose() { }
    }

    [MustDisposeResource(false)]
    internal record Record : IAsyncDisposable
    {
        public |Record|(5)() { }
        public ValueTask DisposeAsync() => ValueTask.CompletedTask;
    }

    [MustDisposeResource(false)]
    internal struct Struct : IDisposable
    {
        public |Struct|(6)() { }
        public void Dispose() { }
    }

    [MustDisposeResource(false)]
    internal record struct RecordStruct : IAsyncDisposable
    {
        public |RecordStruct|(7)() { }
        public ValueTask DisposeAsync() => ValueTask.CompletedTask;
    }
}

namespace DisposableAnnotatedWithFalseAgain
{
    [MustDisposeResource(false)]
    internal class Class : IDisposable
    {
        [MustDisposeResource(false)]
        public Class() { }

        public void Dispose() { }
    }

    [MustDisposeResource(false)]
    internal record Record : IAsyncDisposable
    {
        [MustDisposeResource(false)]
        public Record() { }

        public ValueTask DisposeAsync() => ValueTask.CompletedTask;
    }

    [MustDisposeResource(false)]
    internal struct Struct : IDisposable
    {
        [MustDisposeResource(false)]
        public Struct() { }

        public void Dispose() { }
    }

    [MustDisposeResource(false)]
    internal record struct RecordStruct : IAsyncDisposable
    {
        [MustDisposeResource(false)]
        public RecordStruct() { }

        public ValueTask DisposeAsync() => ValueTask.CompletedTask;
    }
}

namespace DisposableWithNearestTypeAnnotatedAgain
{
    [MustDisposeResource]
    internal class GrandParent : IDisposable
    {
        public void Dispose() { }
    }

    internal class Parent : GrandParent { }

    internal class Child : Parent
    {
        [|MustDisposeResource|(8)]
        public Child() { }
    }

    internal record |GrandParentRecord|(9) : IDisposable
    {
        public void Dispose() { }
    }

    [MustDisposeResource]
    internal record ParentRecord : GrandParentRecord { }

    internal record ChildRecord : ParentRecord
    {
        [|MustDisposeResource|(10)]
        public ChildRecord() { }
    }
}

namespace NonDisposable
{
    internal class Class
    {
        [|MustDisposeResource|(11)]
        public Class() { }
    }

    internal record Record
    {
        [|MustDisposeResource(false)|(12)]
        public Record() { }
    }

    internal struct Struct
    {
        [|MustDisposeResource|(13)]
        public Struct() { }
    }

    internal record struct RecordStruct
    {
        [|MustDisposeResource(false)|(14)]
        public RecordStruct() { }
    }
}

namespace RefStructs
{
    internal ref struct RefStruct
    {
        [|MustDisposeResource|(15)]
        public RefStruct() { }
    }
}
---------------------------------------------------------
(0): ReSharper Suggestion: Annotation is redundant because the class or a base class is already annotated with [MustDisposeResource].
(1): ReSharper Suggestion: Annotation is redundant because the record or a base record is already annotated with [MustDisposeResource].
(2): ReSharper Suggestion: Annotation is redundant because the struct is already annotated with [MustDisposeResource].
(3): ReSharper Suggestion: Annotation is redundant because the record is already annotated with [MustDisposeResource].
(4): ReSharper Warning: Constructor of the disposable class (with the [MustDisposeResource(false)] annotation) is not annotated with [MustDisposeResource] or [MustDisposeResource(false)].
(5): ReSharper Warning: Constructor of the disposable record (with the [MustDisposeResource(false)] annotation) is not annotated with [MustDisposeResource] or [MustDisposeResource(false)].
(6): ReSharper Warning: Constructor of the disposable struct (with the [MustDisposeResource(false)] annotation) is not annotated with [MustDisposeResource] or [MustDisposeResource(false)].
(7): ReSharper Warning: Constructor of the disposable record (with the [MustDisposeResource(false)] annotation) is not annotated with [MustDisposeResource] or [MustDisposeResource(false)].
(8): ReSharper Suggestion: Annotation is redundant because the class or a base class is already annotated with [MustDisposeResource].
(9): ReSharper Warning: Record is disposable, but not annotated with [MustDisposeResource] or [MustDisposeResource(false)].
(10): ReSharper Suggestion: Annotation is redundant because the record or a base record is already annotated with [MustDisposeResource].
(11): ReSharper Warning: Annotation is not valid because the class is not disposable.
(12): ReSharper Warning: Annotation is not valid because the record is not disposable.
(13): ReSharper Warning: Annotation is not valid because the struct is not disposable.
(14): ReSharper Warning: Annotation is not valid because the record is not disposable.
(15): ReSharper Warning: Annotation is not valid because the struct is not disposable.
