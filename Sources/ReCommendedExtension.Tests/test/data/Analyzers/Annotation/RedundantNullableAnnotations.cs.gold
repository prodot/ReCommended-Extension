using System;
using System.Collections.Generic;
using System.Threading.Tasks;
using JetBrains.Annotations;

namespace Test
{
    internal class Enumerables
    {
        public IEnumerable<int>? NonIterator() => null;

        public IEnumerable<int>|?|(0) IteratorNullable()
        {
            yield return 1;
        }
    }

    internal class Iterators
    {
        [MustDisposeResource(false)]
        public IEnumerator<int>? NonIterator() => null;

        [MustDisposeResource(false)]
        public IEnumerator<int>|?|(1) IteratorNullable()
        {
            yield return 1;
        }
    }

    internal class AsyncEnumerables
    {
        public IAsyncEnumerable<int>? NonIterator() => null;

        public async IAsyncEnumerable<int>|?|(2) IteratorNullable()
        {
            await Task.Yield();
            yield return 1;
        }
    }

    internal class AsyncIterators
    {
        [MustDisposeResource(false)]
        public IAsyncEnumerator<int>? NonIterator() => null;

        [MustDisposeResource(false)]
        public async IAsyncEnumerator<int>|?|(3) IteratorNullable()
        {
            await Task.Yield();
            yield return 1;
        }
    }

    internal class AsyncMethods
    {
        public async Task||?|(4)|(5) AsyncTask1() => await Task.Yield();

        public async Task|?|(6) AsyncTask2()
        {
            await Task.Yield();
            Console.WriteLine();
        } 

        public async Task<int>||?|(7)|(8) AsyncTaskWithResult()
        {
            await Task.Yield();
            return 1;
        }
    }
}
---------------------------------------------------------
(0): ReSharper Dead Code: Return type of 'IteratorNullable' can be made non-nullable.
(1): ReSharper Dead Code: Return type of 'IteratorNullable' can be made non-nullable.
(2): ReSharper Dead Code: Return type of 'IteratorNullable' can be made non-nullable.
(3): ReSharper Dead Code: Return type of 'IteratorNullable' can be made non-nullable.
(4):<overlapped> ReSharper Dead Code: Return type of 'AsyncTask1' can be made non-nullable.
(5): ReSharper Dead Code: Return type of 'AsyncTask1' can be made non-nullable
(6): ReSharper Dead Code: Return type of 'AsyncTask2' can be made non-nullable.
(7):<overlapped> ReSharper Dead Code: Return type of 'AsyncTaskWithResult' can be made non-nullable.
(8): ReSharper Dead Code: Return type of 'AsyncTaskWithResult' can be made non-nullable
