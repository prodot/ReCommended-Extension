using System;
using System.Threading.Tasks;
using JetBrains.Annotations;

namespace Test
{
    [method: MustDisposeResource]
    internal ref struct |DisposableRefStruct|(0)()
    {
        public void Dispose() { }
    }

    internal class Class
    {
        public void NonAnnotated()
        {
            int NonDisposable() => 0;

            IDisposable |Disposable|(1)() => throw new NotImplementedException();

            IAsyncDisposable |AsyncDisposable|(2)() => throw new NotImplementedException();

            Task<IDisposable> |DisposableTaskLike|(3)() => throw new NotImplementedException();

            ValueTask<IAsyncDisposable> |AsyncDisposableTaskLike|(4)() => throw new NotImplementedException();

            DisposableRefStruct |Disposable2|(5)() => throw new NotImplementedException();
        }

        public void AnnotatedWithPure()
        {
            [Pure]
            int NonDisposable() => 0;

            [|Pure|(6)]
            IDisposable |Disposable|(7)() => throw new NotImplementedException();

            [|Pure|(8)]
            IAsyncDisposable |AsyncDisposable|(9)() => throw new NotImplementedException();

            [|Pure|(10)]
            Task<IDisposable> |DisposableTaskLike|(11)() => throw new NotImplementedException();

            [|Pure|(12)]
            ValueTask<IAsyncDisposable> |AsyncDisposableTaskLike|(13)() => throw new NotImplementedException();

            [|Pure|(14)]
            DisposableRefStruct |Disposable2|(15)() => throw new NotImplementedException();
        }

        public void AnnotatedWithMustUseReturnValue()
        {
            [MustUseReturnValue]
            int NonDisposable() => 0;

            [|MustUseReturnValue|(16)]
            IDisposable |Disposable|(17)() => throw new NotImplementedException();

            [|MustUseReturnValue|(18)]
            IAsyncDisposable |AsyncDisposable|(19)() => throw new NotImplementedException();

            [|MustUseReturnValue|(20)]
            Task<IDisposable> |DisposableTaskLike|(21)() => throw new NotImplementedException();

            [|MustUseReturnValue|(22)]
            ValueTask<IAsyncDisposable> |AsyncDisposableTaskLike|(23)() => throw new NotImplementedException();

            [|MustUseReturnValue|(24)]
            DisposableRefStruct |Disposable2|(25)() => throw new NotImplementedException();
        }

        public void AnnotatedWithMustDisposeResource()
        {
            [|MustDisposeResource|(26)]
            int NonDisposable() => 0;

            [MustDisposeResource]
            IDisposable Disposable() => throw new NotImplementedException();

            [MustDisposeResource]
            IAsyncDisposable AsyncDisposable() => throw new NotImplementedException();

            [MustDisposeResource]
            Task<IDisposable> DisposableTaskLike() => throw new NotImplementedException();

            [MustDisposeResource]
            ValueTask<IAsyncDisposable> AsyncDisposableTaskLike() => throw new NotImplementedException();

            [MustDisposeResource]
            DisposableRefStruct Disposable2() => throw new NotImplementedException();
        }

        public void AnnotatedWithMustDisposeResourceTrue()
        {
            [|MustDisposeResource(true)|(27)]
            int NonDisposable() => 0;

            [MustDisposeResource(true)]
            IDisposable Disposable() => throw new NotImplementedException();

            [MustDisposeResource(true)]
            IAsyncDisposable AsyncDisposable() => throw new NotImplementedException();

            [MustDisposeResource(true)]
            Task<IDisposable> DisposableTaskLike() => throw new NotImplementedException();

            [MustDisposeResource(true)]
            ValueTask<IAsyncDisposable> AsyncDisposableTaskLike() => throw new NotImplementedException();

            [MustDisposeResource(true)]
            DisposableRefStruct Disposable2() => throw new NotImplementedException();
        }

        public void AnnotatedWithMustDisposeResourceFalse()
        {
            [|MustDisposeResource(false)|(28)]
            int NonDisposable() => 0;

            [MustDisposeResource(false)]
            IDisposable Disposable() => throw new NotImplementedException();

            [MustDisposeResource(false)]
            IAsyncDisposable AsyncDisposable() => throw new NotImplementedException();

            [MustDisposeResource(false)]
            Task<IDisposable> DisposableTaskLike() => throw new NotImplementedException();

            [MustDisposeResource(false)]
            ValueTask<IAsyncDisposable> AsyncDisposableTaskLike() => throw new NotImplementedException();

            [MustDisposeResource(false)]
            DisposableRefStruct Disposable2() => throw new NotImplementedException();
        }
    }
}
---------------------------------------------------------
(0): ReSharper Warning: Struct is disposable, but not annotated with [MustDisposeResource] or [MustDisposeResource(false)].
(1): ReSharper Warning: Local function with the disposable return type is not annotated with [MustDisposeResource] or [MustDisposeResource(false)].
(2): ReSharper Warning: Local function with the disposable return type is not annotated with [MustDisposeResource] or [MustDisposeResource(false)].
(3): ReSharper Warning: Local function with the disposable return type is not annotated with [MustDisposeResource] or [MustDisposeResource(false)].
(4): ReSharper Warning: Local function with the disposable return type is not annotated with [MustDisposeResource] or [MustDisposeResource(false)].
(5): ReSharper Warning: Local function with the disposable return type is not annotated with [MustDisposeResource] or [MustDisposeResource(false)].
(6): ReSharper Warning: Annotation is not valid because the local function return type is disposable.
(7): ReSharper Warning: Local function with the disposable return type is not annotated with [MustDisposeResource] or [MustDisposeResource(false)].
(8): ReSharper Warning: Annotation is not valid because the local function return type is disposable.
(9): ReSharper Warning: Local function with the disposable return type is not annotated with [MustDisposeResource] or [MustDisposeResource(false)].
(10): ReSharper Warning: Annotation is not valid because the local function return type is disposable.
(11): ReSharper Warning: Local function with the disposable return type is not annotated with [MustDisposeResource] or [MustDisposeResource(false)].
(12): ReSharper Warning: Annotation is not valid because the local function return type is disposable.
(13): ReSharper Warning: Local function with the disposable return type is not annotated with [MustDisposeResource] or [MustDisposeResource(false)].
(14): ReSharper Warning: Annotation is not valid because the local function return type is disposable.
(15): ReSharper Warning: Local function with the disposable return type is not annotated with [MustDisposeResource] or [MustDisposeResource(false)].
(16): ReSharper Warning: Annotation is not valid because the local function return type is disposable.
(17): ReSharper Warning: Local function with the disposable return type is not annotated with [MustDisposeResource] or [MustDisposeResource(false)].
(18): ReSharper Warning: Annotation is not valid because the local function return type is disposable.
(19): ReSharper Warning: Local function with the disposable return type is not annotated with [MustDisposeResource] or [MustDisposeResource(false)].
(20): ReSharper Warning: Annotation is not valid because the local function return type is disposable.
(21): ReSharper Warning: Local function with the disposable return type is not annotated with [MustDisposeResource] or [MustDisposeResource(false)].
(22): ReSharper Warning: Annotation is not valid because the local function return type is disposable.
(23): ReSharper Warning: Local function with the disposable return type is not annotated with [MustDisposeResource] or [MustDisposeResource(false)].
(24): ReSharper Warning: Annotation is not valid because the local function return type is disposable.
(25): ReSharper Warning: Local function with the disposable return type is not annotated with [MustDisposeResource] or [MustDisposeResource(false)].
(26): ReSharper Warning: Annotation is not valid because the local function return type is not disposable.
(27): ReSharper Warning: Annotation is not valid because the local function return type is not disposable.
(28): ReSharper Warning: Annotation is not valid because the local function return type is not disposable.
