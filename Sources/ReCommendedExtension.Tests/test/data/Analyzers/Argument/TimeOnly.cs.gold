using System;
using System.Globalization;

namespace Test
{
    public class Arguments
    {
        public void RedundantArgument(TimeOnly timeOnly, TimeSpan timeSpanValue, double doubleValue, string s, ReadOnlySpan<char> s1, string format, string[] formats, IFormatProvider provider, out TimeOnly result)
        {
            var result11 = timeOnly.Add(timeSpanValue, |out _|(0));
            var result12 = timeOnly.Add(timeSpanValue, |out int _|(1));

            var result21 = timeOnly.AddHours(doubleValue, |out _|(2));
            var result22 = timeOnly.AddHours(doubleValue, |out int _|(3));

            var result31 = timeOnly.AddMinutes(doubleValue, |out _|(4));
            var result32 = timeOnly.AddMinutes(doubleValue, |out int _|(5));

            var result41 = TimeOnly.Parse(s, |null|(6));
            var result42 = TimeOnly.Parse(s1, |null|(7));

            var result51 = TimeOnly.ParseExact(s, formats, |null|(8));
            var result52 = TimeOnly.ParseExact(s1, formats, |null|(9));

            var result61 = TimeOnly.TryParse(s, |null|(10), out result);
            var result62 = TimeOnly.TryParse(s1, |null|(11), out result);
            var result63 = TimeOnly.TryParse(s, provider, |DateTimeStyles.None|(12), out result);
            var result64 = TimeOnly.TryParse(s1, provider, |DateTimeStyles.None|(13), out result);
        }

        public void RedundantArgumentRange(string s, ReadOnlySpan<char> s1, string format, ReadOnlySpan<char> format1, string[] formats, out TimeOnly result)
        {
            var result11 = TimeOnly.Parse(s, |null|(14), |DateTimeStyles.None|(15));

            var result21 = TimeOnly.ParseExact(s, format, |null|(16), |DateTimeStyles.None|(17));
            var result22 = TimeOnly.ParseExact(s, formats, |null|(18), |DateTimeStyles.None|(19));
            var result23 = TimeOnly.ParseExact(s1, formats, |null|(20), |DateTimeStyles.None|(21));

            var result31 = TimeOnly.TryParseExact(s, format, |null|(22), |DateTimeStyles.None|(23), out result);
            var result32 = TimeOnly.TryParseExact(s1, format1, |null|(24), |DateTimeStyles.None|(25), out result);
            var result33 = TimeOnly.TryParseExact(s, formats, |null|(26), |DateTimeStyles.None|(27), out result);
            var result34 = TimeOnly.TryParseExact(s1, formats, |null|(28), |DateTimeStyles.None|(29), out result);
        }

        public void RedundantCollectionElement(string s, ReadOnlySpan<char> s1, IFormatProvider provider, DateTimeStyles style, out TimeOnly result)
        {
            var result11 = TimeOnly.ParseExact(s, ["t", |"t"|(30), "T", "o", |"O"|(31), "r", |"R"|(32)]);
            var result12 = TimeOnly.ParseExact(s1, ["t", |"t"|(33), "T", "o", |"O"|(34), "r", |"R"|(35)]);
            var result13 = TimeOnly.ParseExact(s, ["t", |"t"|(36), "T", "o", |"O"|(37), "r", |"R"|(38)], provider, style);
            var result14 = TimeOnly.ParseExact(s1, ["t", |"t"|(39), "T", "o", |"O"|(40), "r", |"R"|(41)], provider, style);

            var result21 = TimeOnly.TryParseExact(s, ["t", |"t"|(42), "T", "o", |"O"|(43), "r", |"R"|(44)], out result);
            var result22 = TimeOnly.TryParseExact(s1, ["t", |"t"|(45), "T", "o", |"O"|(46), "r", |"R"|(47)], out result);
            var result23 = TimeOnly.TryParseExact(s, ["t", |"t"|(48), "T", "o", |"O"|(49), "r", |"R"|(50)], provider, style, out result);
            var result24 = TimeOnly.TryParseExact(s1, ["t", |"t"|(51), "T", "o", |"O"|(52), "r", |"R"|(53)], provider, style, out result);
        }

        public void OtherArgument(string s, ReadOnlySpan<char> s1, string format, IFormatProvider provider, DateTimeStyles style, out TimeOnly result)
        {
            var result11 = TimeOnly.ParseExact(s, |[format]|(54));
            var result12 = TimeOnly.ParseExact(s, "o", |provider|(55), style);
            var result13 = TimeOnly.ParseExact(s, "O", |provider|(56), style);
            var result14 = TimeOnly.ParseExact(s, "r", |provider|(57), style);
            var result15 = TimeOnly.ParseExact(s, "R", |provider|(58), style);
            var result16 = TimeOnly.ParseExact(s, |[format]|(59), provider, style);
            var result17 = TimeOnly.ParseExact(s, ["o", "R"], |provider|(60), style);
            var result18 = TimeOnly.ParseExact(s1, ["o", "R"], |provider|(61), style);

            var result21 = TimeOnly.TryParseExact(s, |[format]|(62), out result);
            var result22 = TimeOnly.TryParseExact(s, "o", |provider|(63), style, out result);
            var result23 = TimeOnly.TryParseExact(s, "O", |provider|(64), style, out result);
            var result24 = TimeOnly.TryParseExact(s, "r", |provider|(65), style, out result);
            var result25 = TimeOnly.TryParseExact(s, "R", |provider|(66), style, out result);
            var result26 = TimeOnly.TryParseExact(s, |[format]|(67), provider, style, out result);
            var result27 = TimeOnly.TryParseExact(s, ["o", "R"], |provider|(68), style, out result);
            var result28 = TimeOnly.TryParseExact(s1, ["o", "R"], |provider|(69), style, out result);
        }

        public void NoDetection(TimeOnly timeOnly, TimeSpan timeSpanValue, double doubleValue, string s, ReadOnlySpan<char> s1, IFormatProvider provider, DateTimeStyles style, string format, ReadOnlySpan<char> format1, string[] formats, out int wrappedDays, out TimeOnly result)
        {
            var result11 = timeOnly.Add(timeSpanValue, out wrappedDays);
            var result12 = timeOnly.AddHours(doubleValue, out wrappedDays);
            var result13 = timeOnly.AddMinutes(doubleValue, out wrappedDays);

            int _;

            var result21 = timeOnly.Add(timeSpanValue, out _);
            var result22 = timeOnly.AddHours(doubleValue, out _);
            var result23 = timeOnly.AddMinutes(doubleValue, out _);

            var result31 = TimeOnly.Parse(s, provider, style);
            var result32 = TimeOnly.Parse(s, provider);
            var result33 = TimeOnly.Parse(s1, provider);

            var result41 = TimeOnly.ParseExact(s, format, provider, style);
            var result42 = TimeOnly.ParseExact(s, formats, provider);
            var result43 = TimeOnly.ParseExact(s1, formats, provider);

            var result51 = TimeOnly.TryParse(s, provider, out result);
            var result52 = TimeOnly.TryParse(s1, provider, out result);
            var result53 = TimeOnly.TryParse(s, provider, style, out result);
            var result54 = TimeOnly.TryParse(s1, provider, style, out result);

            var result61 = TimeOnly.ParseExact(s, formats, provider, style);
            var result62 = TimeOnly.ParseExact(s1, formats, provider, style);

            var result71 = TimeOnly.TryParseExact(s, format, provider, style, out result);
            var result72 = TimeOnly.TryParseExact(s1, format1, provider, style, out result);
            var result73 = TimeOnly.TryParseExact(s, formats, provider, style, out result);
            var result74 = TimeOnly.TryParseExact(s1, formats, provider, style, out result);

            var result81 = TimeOnly.ParseExact(s, ["t", "T", "o", "r"]);
            var result82 = TimeOnly.ParseExact(s1, ["t", "T", "o", "r"]);
            var result83 = TimeOnly.ParseExact(s, ["t", "T", "o", "r"], provider, style);
            var result84 = TimeOnly.ParseExact(s1, ["t", "T", "o", "r"], provider, style);

            var result91 = TimeOnly.TryParseExact(s, ["t", "T", "o", "r"], out result);
            var result92 = TimeOnly.TryParseExact(s1, ["t", "T", "o", "r"], out result);
            var result93 = TimeOnly.TryParseExact(s, ["t", "T", "o", "r"], provider, style, out result);
            var result94 = TimeOnly.TryParseExact(s1, ["t", "T", "o", "r"], provider, style, out result);

            var resultA1 = TimeOnly.ParseExact(s, [format, format]);
            var resultA2 = TimeOnly.ParseExact(s, "o", null, style);
            var resultA3 = TimeOnly.ParseExact(s, "O", null, style);
            var resultA4 = TimeOnly.ParseExact(s, "r", null, style);
            var resultA5 = TimeOnly.ParseExact(s, "R", null, style);
            var resultA6 = TimeOnly.ParseExact(s, [format, format], provider, style);
            var resultA7 = TimeOnly.ParseExact(s, ["o", "R"], null, style);
            var resultA8 = TimeOnly.ParseExact(s, ["o", "R", "t"], provider, style);
            var resultA9 = TimeOnly.ParseExact(s1, ["o", "R"], null, style);
            var resultAA = TimeOnly.ParseExact(s1, ["t", "o", "R"], provider, style);

            var resultB1 = TimeOnly.TryParseExact(s, [format, format], out result);
            var resultB2 = TimeOnly.TryParseExact(s, "o", null, style, out result);
            var resultB3 = TimeOnly.TryParseExact(s, "O", null, style, out result);
            var resultB4 = TimeOnly.TryParseExact(s, "r", null, style, out result);
            var resultB5 = TimeOnly.TryParseExact(s, "R", null, style, out result);
            var resultB6 = TimeOnly.TryParseExact(s, [format, format], provider, style, out result);
            var resultB7 = TimeOnly.TryParseExact(s, ["o", "R"], null, style, out result);
            var resultB8 = TimeOnly.TryParseExact(s, ["o", "R", "t"], provider, style, out result);
            var resultB9 = TimeOnly.TryParseExact(s1, ["o", "R"], null, style, out result);
            var resultBA = TimeOnly.TryParseExact(s1, ["t", "o", "R"], provider, style, out result);
        }

        public void NoDetection(TimeOnly timeOnly, TimeSpan timeSpanValue, double doubleValue)
        {
            var result1 = timeOnly.Add(timeSpanValue, out var _);
            var result2 = timeOnly.AddHours(doubleValue, out var _);
            var result3 = timeOnly.AddMinutes(doubleValue, out var _);
        }
    }
}
---------------------------------------------------------
(0): ReSharper Dead Code: Discarding is redundant.
(1): ReSharper Dead Code: Discarding is redundant.
(2): ReSharper Dead Code: Discarding is redundant.
(3): ReSharper Dead Code: Discarding is redundant.
(4): ReSharper Dead Code: Discarding is redundant.
(5): ReSharper Dead Code: Discarding is redundant.
(6): ReSharper Dead Code: Passing null is redundant.
(7): ReSharper Dead Code: Passing null is redundant.
(8): ReSharper Dead Code: Passing null is redundant.
(9): ReSharper Dead Code: Passing null is redundant.
(10): ReSharper Dead Code: Passing null is redundant.
(11): ReSharper Dead Code: Passing null is redundant.
(12): ReSharper Dead Code: Passing DateTimeStyles.None is redundant.
(13): ReSharper Dead Code: Passing DateTimeStyles.None is redundant.
(14): ReSharper Dead Code: Passing 'null, DateTimeStyles.None' is redundant.
(15): ReSharper Dead Code: Passing 'null, DateTimeStyles.None' is redundant.
(16):<overlapped> ReSharper Dead Code: Passing 'null, DateTimeStyles.None' is redundant.
(17):<overlapped> ReSharper Dead Code: Passing 'null, DateTimeStyles.None' is redundant.
(18):<overlapped> ReSharper Dead Code: Passing 'null, DateTimeStyles.None' is redundant.
(19):<overlapped> ReSharper Dead Code: Passing 'null, DateTimeStyles.None' is redundant.
(20):<overlapped> ReSharper Dead Code: Passing 'null, DateTimeStyles.None' is redundant.
(21):<overlapped> ReSharper Dead Code: Passing 'null, DateTimeStyles.None' is redundant.
(22): ReSharper Dead Code: Passing 'null, DateTimeStyles.None' is redundant.
(23): ReSharper Dead Code: Passing 'null, DateTimeStyles.None' is redundant.
(24): ReSharper Dead Code: Passing 'null, DateTimeStyles.None' is redundant.
(25): ReSharper Dead Code: Passing 'null, DateTimeStyles.None' is redundant.
(26): ReSharper Dead Code: Passing 'null, DateTimeStyles.None' is redundant.
(27): ReSharper Dead Code: Passing 'null, DateTimeStyles.None' is redundant.
(28): ReSharper Dead Code: Passing 'null, DateTimeStyles.None' is redundant.
(29): ReSharper Dead Code: Passing 'null, DateTimeStyles.None' is redundant.
(30): ReSharper Dead Code: The string is already passed.
(31): ReSharper Dead Code: The equivalent string is already passed.
(32): ReSharper Dead Code: The equivalent string is already passed.
(33): ReSharper Dead Code: The string is already passed.
(34): ReSharper Dead Code: The equivalent string is already passed.
(35): ReSharper Dead Code: The equivalent string is already passed.
(36): ReSharper Dead Code: The string is already passed.
(37): ReSharper Dead Code: The equivalent string is already passed.
(38): ReSharper Dead Code: The equivalent string is already passed.
(39): ReSharper Dead Code: The string is already passed.
(40): ReSharper Dead Code: The equivalent string is already passed.
(41): ReSharper Dead Code: The equivalent string is already passed.
(42): ReSharper Dead Code: The string is already passed.
(43): ReSharper Dead Code: The equivalent string is already passed.
(44): ReSharper Dead Code: The equivalent string is already passed.
(45): ReSharper Dead Code: The string is already passed.
(46): ReSharper Dead Code: The equivalent string is already passed.
(47): ReSharper Dead Code: The equivalent string is already passed.
(48): ReSharper Dead Code: The string is already passed.
(49): ReSharper Dead Code: The equivalent string is already passed.
(50): ReSharper Dead Code: The equivalent string is already passed.
(51): ReSharper Dead Code: The string is already passed.
(52): ReSharper Dead Code: The equivalent string is already passed.
(53): ReSharper Dead Code: The equivalent string is already passed.
(54): ReSharper Suggestion: The only collection element should be passed directly.
(55): ReSharper Suggestion: The format provider is ignored (pass null instead).
(56): ReSharper Suggestion: The format provider is ignored (pass null instead).
(57): ReSharper Suggestion: The format provider is ignored (pass null instead).
(58): ReSharper Suggestion: The format provider is ignored (pass null instead).
(59): ReSharper Suggestion: The only collection element should be passed directly.
(60): ReSharper Suggestion: The format provider is ignored (pass null instead).
(61): ReSharper Suggestion: The format provider is ignored (pass null instead).
(62): ReSharper Suggestion: The only collection element should be passed directly.
(63): ReSharper Suggestion: The format provider is ignored (pass null instead).
(64): ReSharper Suggestion: The format provider is ignored (pass null instead).
(65): ReSharper Suggestion: The format provider is ignored (pass null instead).
(66): ReSharper Suggestion: The format provider is ignored (pass null instead).
(67): ReSharper Suggestion: The only collection element should be passed directly.
(68): ReSharper Suggestion: The format provider is ignored (pass null instead).
(69): ReSharper Suggestion: The format provider is ignored (pass null instead).
