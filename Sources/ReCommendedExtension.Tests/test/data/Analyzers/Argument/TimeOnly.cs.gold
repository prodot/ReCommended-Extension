using System;
using System.Globalization;

namespace Test
{
    public class Arguments
    {
        public void RedundantArgument(TimeOnly timeOnly, TimeSpan timeSpanValue, double doubleValue, string s, ReadOnlySpan<char> s1, string format, string[] formats, IFormatProvider provider, out TimeOnly result)
        {
            var result11 = timeOnly.Add(timeSpanValue, |out _|(0));
            var result12 = timeOnly.Add(timeSpanValue, |out int _|(1));

            var result21 = timeOnly.AddHours(doubleValue, |out _|(2));
            var result22 = timeOnly.AddHours(doubleValue, |out int _|(3));

            var result31 = timeOnly.AddMinutes(doubleValue, |out _|(4));
            var result32 = timeOnly.AddMinutes(doubleValue, |out int _|(5));

            var result41 = TimeOnly.Parse(s, |null|(6));
            var result42 = TimeOnly.Parse(s1, |null|(7));

            var result51 = TimeOnly.ParseExact(s, formats, |null|(8));
            var result52 = TimeOnly.ParseExact(s1, formats, |null|(9));

            var result61 = TimeOnly.TryParse(s, |null|(10), out result);
            var result62 = TimeOnly.TryParse(s1, |null|(11), out result);
            var result63 = TimeOnly.TryParse(s, provider, |DateTimeStyles.None|(12), out result);
            var result64 = TimeOnly.TryParse(s1, provider, |DateTimeStyles.None|(13), out result);
        }

        public void RedundantArgumentRange(string s, ReadOnlySpan<char> s1, string format, ReadOnlySpan<char> format1, string[] formats, out TimeOnly result)
        {
            var result11 = TimeOnly.Parse(s, |null, DateTimeStyles.None|(14));

            var result21 = TimeOnly.ParseExact(s, format, |null, DateTimeStyles.None|(15));
            var result22 = TimeOnly.ParseExact(s, formats, |null, DateTimeStyles.None|(16));
            var result23 = TimeOnly.ParseExact(s1, formats, |null, DateTimeStyles.None|(17));

            var result31 = TimeOnly.TryParseExact(s, format, |null, DateTimeStyles.None|(18), out result);
            var result32 = TimeOnly.TryParseExact(s1, format1, |null, DateTimeStyles.None|(19), out result);
            var result33 = TimeOnly.TryParseExact(s, formats, |null, DateTimeStyles.None|(20), out result);
            var result34 = TimeOnly.TryParseExact(s1, formats, |null, DateTimeStyles.None|(21), out result);
        }

        public void RedundantCollectionElement(string s, ReadOnlySpan<char> s1, IFormatProvider provider, DateTimeStyles style, out TimeOnly result)
        {
            var result11 = TimeOnly.ParseExact(s, ["t", |"t"|(22), "T", "o", |"O"|(23), "r", |"R"|(24)]);
            var result12 = TimeOnly.ParseExact(s1, ["t", |"t"|(25), "T", "o", |"O"|(26), "r", |"R"|(27)]);
            var result13 = TimeOnly.ParseExact(s, ["t", |"t"|(28), "T", "o", |"O"|(29), "r", |"R"|(30)], provider, style);
            var result14 = TimeOnly.ParseExact(s1, ["t", |"t"|(31), "T", "o", |"O"|(32), "r", |"R"|(33)], provider, style);

            var result21 = TimeOnly.TryParseExact(s, ["t", |"t"|(34), "T", "o", |"O"|(35), "r", |"R"|(36)], out result);
            var result22 = TimeOnly.TryParseExact(s1, ["t", |"t"|(37), "T", "o", |"O"|(38), "r", |"R"|(39)], out result);
            var result23 = TimeOnly.TryParseExact(s, ["t", |"t"|(40), "T", "o", |"O"|(41), "r", |"R"|(42)], provider, style, out result);
            var result24 = TimeOnly.TryParseExact(s1, ["t", |"t"|(43), "T", "o", |"O"|(44), "r", |"R"|(45)], provider, style, out result);
        }

        public void NoDetection(TimeOnly timeOnly, TimeSpan timeSpanValue, double doubleValue, string s, ReadOnlySpan<char> s1, IFormatProvider provider, DateTimeStyles style, string format, ReadOnlySpan<char> format1, string[] formats, out int wrappedDays, out TimeOnly result)
        {
            var result11 = timeOnly.Add(timeSpanValue, out wrappedDays);
            var result12 = timeOnly.AddHours(doubleValue, out wrappedDays);
            var result13 = timeOnly.AddMinutes(doubleValue, out wrappedDays);

            int _;

            var result21 = timeOnly.Add(timeSpanValue, out _);
            var result22 = timeOnly.AddHours(doubleValue, out _);
            var result23 = timeOnly.AddMinutes(doubleValue, out _);

            var result31 = TimeOnly.Parse(s, provider, style);
            var result32 = TimeOnly.Parse(s, provider);
            var result33 = TimeOnly.Parse(s1, provider);

            var result41 = TimeOnly.ParseExact(s, format, provider, style);
            var result42 = TimeOnly.ParseExact(s, formats, provider);
            var result43 = TimeOnly.ParseExact(s1, formats, provider);

            var result51 = TimeOnly.TryParse(s, provider, out result);
            var result52 = TimeOnly.TryParse(s1, provider, out result);
            var result53 = TimeOnly.TryParse(s, provider, style, out result);
            var result54 = TimeOnly.TryParse(s1, provider, style, out result);

            var result61 = TimeOnly.Parse(s, style: DateTimeStyles.None, provider: null);

            var result71 = TimeOnly.ParseExact(s, formats, provider, style);
            var result72 = TimeOnly.ParseExact(s1, formats, provider, style);

            var result81 = TimeOnly.TryParseExact(s, format, provider, style, out result);
            var result82 = TimeOnly.TryParseExact(s1, format1, provider, style, out result);
            var result83 = TimeOnly.TryParseExact(s, formats, provider, style, out result);
            var result84 = TimeOnly.TryParseExact(s1, formats, provider, style, out result);

            var result91 = TimeOnly.ParseExact(s, ["t", "T", "o", "r"]);
            var result92 = TimeOnly.ParseExact(s1, ["t", "T", "o", "r"]);
            var result93 = TimeOnly.ParseExact(s, ["t", "T", "o", "r"], provider, style);
            var result94 = TimeOnly.ParseExact(s1, ["t", "T", "o", "r"], provider, style);

            var resultA1 = TimeOnly.TryParseExact(s, ["t", "T", "o", "r"], out result);
            var resultA2 = TimeOnly.TryParseExact(s1, ["t", "T", "o", "r"], out result);
            var resultA3 = TimeOnly.TryParseExact(s, ["t", "T", "o", "r"], provider, style, out result);
            var resultA4 = TimeOnly.TryParseExact(s1, ["t", "T", "o", "r"], provider, style, out result);
        }

        public void NoDetection(TimeOnly timeOnly, TimeSpan timeSpanValue, double doubleValue)
        {
            var result1 = timeOnly.Add(timeSpanValue, out var _);
            var result2 = timeOnly.AddHours(doubleValue, out var _);
            var result3 = timeOnly.AddMinutes(doubleValue, out var _);
        }
    }
}
---------------------------------------------------------
(0): ReSharper Dead Code: Discarding is redundant.
(1): ReSharper Dead Code: Discarding is redundant.
(2): ReSharper Dead Code: Discarding is redundant.
(3): ReSharper Dead Code: Discarding is redundant.
(4): ReSharper Dead Code: Discarding is redundant.
(5): ReSharper Dead Code: Discarding is redundant.
(6): ReSharper Dead Code: Passing null is redundant.
(7): ReSharper Dead Code: Passing null is redundant.
(8): ReSharper Dead Code: Passing null is redundant.
(9): ReSharper Dead Code: Passing null is redundant.
(10): ReSharper Dead Code: Passing null is redundant.
(11): ReSharper Dead Code: Passing null is redundant.
(12): ReSharper Dead Code: Passing DateTimeStyles.None is redundant.
(13): ReSharper Dead Code: Passing DateTimeStyles.None is redundant.
(14): ReSharper Dead Code: Passing 'null, DateTimeStyles.None' is redundant.
(15): ReSharper Dead Code: Passing 'null, DateTimeStyles.None' is redundant.
(16): ReSharper Dead Code: Passing 'null, DateTimeStyles.None' is redundant.
(17): ReSharper Dead Code: Passing 'null, DateTimeStyles.None' is redundant.
(18): ReSharper Dead Code: Passing 'null, DateTimeStyles.None' is redundant.
(19): ReSharper Dead Code: Passing 'null, DateTimeStyles.None' is redundant.
(20): ReSharper Dead Code: Passing 'null, DateTimeStyles.None' is redundant.
(21): ReSharper Dead Code: Passing 'null, DateTimeStyles.None' is redundant.
(22): ReSharper Dead Code: The string is already passed.
(23): ReSharper Dead Code: The equivalent string is already passed.
(24): ReSharper Dead Code: The equivalent string is already passed.
(25): ReSharper Dead Code: The string is already passed.
(26): ReSharper Dead Code: The equivalent string is already passed.
(27): ReSharper Dead Code: The equivalent string is already passed.
(28): ReSharper Dead Code: The string is already passed.
(29): ReSharper Dead Code: The equivalent string is already passed.
(30): ReSharper Dead Code: The equivalent string is already passed.
(31): ReSharper Dead Code: The string is already passed.
(32): ReSharper Dead Code: The equivalent string is already passed.
(33): ReSharper Dead Code: The equivalent string is already passed.
(34): ReSharper Dead Code: The string is already passed.
(35): ReSharper Dead Code: The equivalent string is already passed.
(36): ReSharper Dead Code: The equivalent string is already passed.
(37): ReSharper Dead Code: The string is already passed.
(38): ReSharper Dead Code: The equivalent string is already passed.
(39): ReSharper Dead Code: The equivalent string is already passed.
(40): ReSharper Dead Code: The string is already passed.
(41): ReSharper Dead Code: The equivalent string is already passed.
(42): ReSharper Dead Code: The equivalent string is already passed.
(43): ReSharper Dead Code: The string is already passed.
(44): ReSharper Dead Code: The equivalent string is already passed.
(45): ReSharper Dead Code: The equivalent string is already passed.
