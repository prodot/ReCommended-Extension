using System;
using System.Globalization;

namespace Test
{
    public class Arguments
    {
        public void RedundantArgument(decimal n, string s, ReadOnlySpan<char> s1, ReadOnlySpan<byte> utf8Text, NumberStyles style, IFormatProvider provider, out decimal result)
        {
            var result11 = decimal.Parse(s, |NumberStyles.AllowLeadingWhite | NumberStyles.AllowTrailingWhite | NumberStyles.AllowLeadingSign | NumberStyles.AllowTrailingSign | NumberStyles.AllowDecimalPoint | NumberStyles.AllowThousands|(0));
            var result12 = decimal.Parse(s, |null|(1));
            var result13 = decimal.Parse(s, |NumberStyles.Number|(2), |null|(3));
            var result14 = decimal.Parse(s1, |null|(4));
            var result15 = decimal.Parse(utf8Text, |null|(5));

            var result21 = decimal.TryParse(s, |null|(6), out result);
            var result22 = decimal.TryParse(s1, |null|(7), out result);
            var result23 = decimal.TryParse(utf8Text, |null|(8), out result);
            var result24 = decimal.TryParse(s, |NumberStyles.Number|(9), provider, out result);
            var result25 = decimal.TryParse(s1, |NumberStyles.Number|(10), provider, out result);
            var result26 = decimal.TryParse(utf8Text, |NumberStyles.Number|(11), provider, out result);

            var result31 = decimal.Round(n, |0|(12));
            var result32 = decimal.Round(n, |MidpointRounding.ToEven|(13));
            var result33 = decimal.Round(n, |0|(14), |MidpointRounding.ToEven|(15));
        }

        public void NoDetection(decimal n, string s, ReadOnlySpan<char> s1, ReadOnlySpan<byte> utf8Text, NumberStyles style, IFormatProvider provider, int decimals, MidpointRounding rounding, out decimal result)
        {
            var result11 = decimal.Parse(s, style);
            var result12 = decimal.Parse(s, provider);
            var result13 = decimal.Parse(s, style, provider);
            var result14 = decimal.Parse(s1, provider);
            var result15 = decimal.Parse(utf8Text, provider);

            var result21 = decimal.TryParse(s, provider, out result);
            var result22 = decimal.TryParse(s1, provider, out result);
            var result23 = decimal.TryParse(utf8Text, provider, out result);
            var result24 = decimal.TryParse(s, style, provider, out result);
            var result25 = decimal.TryParse(s1, style, provider, out result);
            var result26 = decimal.TryParse(utf8Text, style, provider, out result);

            var result31 = decimal.Round(n, decimals);
            var result32 = decimal.Round(n, rounding);
            var result33 = decimal.Round(n, decimals, rounding);
        }
    }
}
---------------------------------------------------------
(0): ReSharper Dead Code: Passing NumberStyles.Number is redundant.
(1): ReSharper Dead Code: Passing null is redundant.
(2): ReSharper Dead Code: Passing NumberStyles.Number is redundant.
(3): ReSharper Dead Code: Passing null is redundant.
(4): ReSharper Dead Code: Passing null is redundant.
(5): ReSharper Dead Code: Passing null is redundant.
(6): ReSharper Dead Code: Passing null is redundant.
(7): ReSharper Dead Code: Passing null is redundant.
(8): ReSharper Dead Code: Passing null is redundant.
(9): ReSharper Dead Code: Passing NumberStyles.Number is redundant.
(10): ReSharper Dead Code: Passing NumberStyles.Number is redundant.
(11): ReSharper Dead Code: Passing NumberStyles.Number is redundant.
(12): ReSharper Dead Code: Passing 0 is redundant.
(13): ReSharper Dead Code: Passing MidpointRounding.ToEven is redundant.
(14): ReSharper Dead Code: Passing 0 is redundant.
(15): ReSharper Dead Code: Passing MidpointRounding.ToEven is redundant.
