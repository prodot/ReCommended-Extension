using System;
using System.Globalization;

namespace Test
{
    public class Arguments
    {
        public void RedundantArgument(string s, ReadOnlySpan<char> s1, ReadOnlySpan<byte> utf8Text, NumberStyles style, IFormatProvider provider, out nint result)
        {
            var result11 = nint.Parse(s, |NumberStyles.AllowLeadingSign | NumberStyles.AllowTrailingWhite | NumberStyles.AllowLeadingWhite|(0));
            var result12 = nint.Parse(s, |null|(1));
            var result13 = nint.Parse(s, |NumberStyles.Integer|(2), |null|(3));
            var result14 = nint.Parse(s1, |null|(4));
            var result15 = nint.Parse(utf8Text, |null|(5));

            var result21 = nint.TryParse(s, |null|(6), out result);
            var result22 = nint.TryParse(s1, |null|(7), out result);
            var result23 = nint.TryParse(utf8Text, |null|(8), out result);
            var result24 = nint.TryParse(s, |NumberStyles.Integer|(9), provider, out result);
            var result25 = nint.TryParse(s1, |NumberStyles.Integer|(10), provider, out result);
            var result26 = nint.TryParse(utf8Text, |NumberStyles.Integer|(11), provider, out result);
        }

        public void NoDetection(string s, ReadOnlySpan<char> s1, ReadOnlySpan<byte> utf8Text, NumberStyles style, IFormatProvider provider, out nint result)
        {
            var result11 = nint.Parse(s, style);
            var result12 = nint.Parse(s, provider);
            var result13 = nint.Parse(s, style, provider);
            var result14 = nint.Parse(s1, provider);
            var result15 = nint.Parse(utf8Text, provider);

            var result21 = nint.TryParse(s, provider, out result);
            var result22 = nint.TryParse(s1, provider, out result);
            var result23 = nint.TryParse(utf8Text, provider, out result);
            var result24 = nint.TryParse(s, style, provider, out result);
            var result25 = nint.TryParse(s1, style, provider, out result);
            var result26 = nint.TryParse(utf8Text, style, provider, out result);
        }
    }
}
---------------------------------------------------------
(0): ReSharper Dead Code: Passing NumberStyles.Integer is redundant.
(1): ReSharper Dead Code: Passing null is redundant.
(2): ReSharper Dead Code: Passing NumberStyles.Integer is redundant.
(3): ReSharper Dead Code: Passing null is redundant.
(4): ReSharper Dead Code: Passing null is redundant.
(5): ReSharper Dead Code: Passing null is redundant.
(6): ReSharper Dead Code: Passing null is redundant.
(7): ReSharper Dead Code: Passing null is redundant.
(8): ReSharper Dead Code: Passing null is redundant.
(9): ReSharper Dead Code: Passing NumberStyles.Integer is redundant.
(10): ReSharper Dead Code: Passing NumberStyles.Integer is redundant.
(11): ReSharper Dead Code: Passing NumberStyles.Integer is redundant.
