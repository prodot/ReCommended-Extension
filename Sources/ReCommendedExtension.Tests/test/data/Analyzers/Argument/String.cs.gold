using System;
using System.Collections.Generic;

namespace Test
{
    public class Arguments
    {
        public void RedundantArgument(string text, char c, char[] charArray, string s, StringComparison comparison, int totalWidth)
        {
            var result11 = text.IndexOf(c, |0|(0));
            var result12 = text.IndexOf(s, |0|(1));
            var result13 = text.IndexOf(s, |0|(2), comparison);

            var result21 = text.IndexOfAny(charArray, |0|(3));

            var result31 = text.PadLeft(totalWidth, |' '|(4));

            var result41 = text.PadRight(totalWidth, |' '|(5));

            var result51 = text.Split(';', |';'|(6), |';'|(7));

            var result61 = text.Trim(|null|(8));
            var result62 = text.Trim(|Array.Empty<char>()|(9));
            var result63 = text.Trim('.', |'.'|(10), |'.'|(11));

            var result71 = text.TrimEnd(|null|(12));
            var result72 = text.TrimEnd(|Array.Empty<char>()|(13));
            var result73 = text.TrimEnd('.', |'.'|(14), |'.'|(15));

            var result81 = text.TrimStart(|null|(16));
            var |result82|(17) = text.TrimStart(|Array.Empty<char>()|(18));
            var |result82|(19) = text.TrimStart('.', |'.'|(20), |'.'|(21));
        }

        public void RedundantCollectionElement(string text, int startIndex, int count, StringSplitOptions options)
        {
            var result11 = text.IndexOfAny(['a', |'a'|(22)]);
            var result12 = text.IndexOfAny(['a', |'a'|(23)], startIndex);
            var result13 = text.IndexOfAny(['a', |'a'|(24)], startIndex, count);

            var result21 = text.LastIndexOfAny(['a', |'a'|(25)]);
            var result22 = text.LastIndexOfAny(['a', |'a'|(26)], startIndex);
            var result23 = text.LastIndexOfAny(['a', |'a'|(27)], startIndex, count);

            var result31 = text.Split(new[] { ';', |';'|(28) });
            var result32 = text.Split([';', |';'|(29)], count);
            var result33 = text.Split([';', |';'|(30)], options);
            var result34 = text.Split([';', |';'|(31)], count, options);
            var result35 = text.Split([";;", |";;"|(32)], options);
            var result36 = text.Split([";;", |";;"|(33)], count, options);

            var result41 = text.Trim(new [] { '.', |'.'|(34), |'.'|(35) });

            var result51 = text.TrimEnd(new[] { '.', |'.'|(36), |'.'|(37) });

            var result61 = text.TrimStart(new[] { '.', |'.'|(38), |'.'|(39) });
        }

        public void OtherArgument(string text, int startIndex, int count, IEnumerable<int> valuesGenericEnumerable, string[] valuesStringArray, object[] valuesObjectArray, ReadOnlySpan<string> valuesStrings, ReadOnlySpan<object> valuesObjects, StringComparison comparison, StringSplitOptions options)
        {
            var result11 = text.Contains(|"c"|(40));
            var result12 = text.Contains(|"c"|(41), comparison);

            var result21 = text.IndexOf(|"c"|(42));
            var result22 = text.IndexOf(|"c"|(43), comparison);

            var result31 = string.Join(|";"|(44), valuesGenericEnumerable);
            var result32 = string.Join(|";"|(45), valuesStringArray);
            var result33 = string.Join(|";"|(46), valuesStringArray, startIndex, count);
            var result34 = string.Join(|";"|(47), valuesObjectArray);
            var result35 = string.Join(|";"|(48), valuesStrings);
            var result36 = string.Join(|";"|(49), valuesObjects);

            var result41 = text.LastIndexOf(|"c"|(50), StringComparison.Ordinal);

            var result51 = text.Split(|";"|(51), options);
            var result52 = text.Split(|";"|(52), count, options);
            var result53 = text.Split(|[";", ":"]|(53), options);
            var result54 = text.Split(|new[] { ";", ":" }|(54), options);
            var result55 = text.Split(|[";", ":"]|(55), count, options);
            var result56 = text.Split(|new[] { ";", ":" }|(56), count, options);
        }

        public void OtherArgumentRange(string text)
        {
            var result1 = text.Replace(|"c"|(57), |"x"|(58));
            var result2 = text.Replace(|"c"|(59), |"x"|(60), StringComparison.Ordinal);
        }

        public void NoDetection(string text, char c, char[] charArray, string s, int startIndex, int count, StringComparison comparison, int totalWidth, StringSplitOptions options, IEnumerable<int> valuesGenericEnumerable, string[] valuesStringArray, object[] valuesObjectArray, ReadOnlySpan<string> valuesStrings, ReadOnlySpan<object> valuesObjects)
        {
            var result11 = text.IndexOf(c, startIndex);
            var result12 = text.IndexOf(s, startIndex);
            var result13 = text.IndexOf(s, startIndex, comparison);

            var result21 = text.IndexOfAny(charArray, startIndex);

            var result31 = text.PadLeft(totalWidth, c);

            var result41 = text.PadRight(totalWidth, c);

            var result51 = text.Split(';', '.');

            var result61 = text.Trim(charArray);
            var result62 = text.Trim(';', '.');

            var result71 = text.TrimEnd(charArray);
            var result72 = text.TrimEnd(';', '.');

            var result81 = text.TrimStart(charArray);
            var result82 = text.TrimStart(';', '.');

            var result91 = text.IndexOfAny([c, c]);
            var result92 = text.IndexOfAny([c, c], startIndex);
            var result93 = text.IndexOfAny([c, c], startIndex, count);

            var resultA1 = text.LastIndexOfAny([c, c]);
            var resultA2 = text.LastIndexOfAny([c, c], startIndex);
            var resultA3 = text.LastIndexOfAny([c, c], startIndex, count);

            var resultB1 = text.Split([c, c]);
            var resultB2 = text.Split([c, c], count);
            var resultB3 = text.Split([c, c], options);
            var resultB4 = text.Split([c, c], count, options);
            var resultB5 = text.Split([s, s], options);
            var resultB6 = text.Split([s, s], count, options);

            var resultC1 = text.Trim([';', '.']);

            var resultD1 = text.TrimEnd([';', '.']);

            var resultE1 = text.TrimStart([';', '.']);

            var resultF1 = text.Contains("cc");
            var resultF2 = text.Contains(s);
            var resultF3 = text.Contains("cc", comparison);
            var resultF4 = text.Contains(s, comparison);

            var resultG1 = text.IndexOf("cc");
            var resultG2 = text.IndexOf(s);
            var resultG3 = text.IndexOf("cc", comparison);
            var resultG4 = text.IndexOf(s, comparison);

            var resultH1 = string.Join(";;", valuesGenericEnumerable);
            var resultH2 = string.Join(s, valuesGenericEnumerable);
            var resultH3 = string.Join(";;", valuesStringArray);
            var resultH4 = string.Join(s, valuesStringArray);
            var resultH5 = string.Join(";;", valuesStringArray, startIndex, count);
            var resultH6 = string.Join(s, valuesStringArray, startIndex, count);
            var resultH7 = string.Join(";;", valuesObjectArray);
            var resultH8 = string.Join(s, valuesObjectArray);
            var resultH9 = string.Join(";;", valuesStrings);
            var resultHA = string.Join(s, valuesStrings);
            var resultHB = string.Join("dd", valuesObjects);
            var resultHC = string.Join(s, valuesObjects);

            var resultI1 = text.LastIndexOf("cc", StringComparison.Ordinal);
            var resultI2 = text.LastIndexOf(s, StringComparison.Ordinal);
            var resultI3 = text.LastIndexOf("c", StringComparison.OrdinalIgnoreCase);

            var resultJ1 = text.Split(";;", options);
            var resultJ2 = text.Split(s, options);
            var resultJ3 = text.Split(";;", count, options);
            var resultJ4 = text.Split(s, count, options);
            var resultJ5 = text.Split([";;", ":"], options);
            var resultJ6 = text.Split([s, ":"], options);
            var resultJ7 = text.Split(new[] { ";;", ":" }, options);
            var resultJ8 = text.Split(new[] { s, ":" }, options);
            var resultJ9 = text.Split([";;", ":"], count, options);
            var resultJA = text.Split([s, ":"], count, options);
            var resultJB = text.Split(new[] { ";;", ":" }, count, options);
            var resultJC = text.Split(new[] { s, ":" }, count, options);

            var resultK1 = text.Replace("cc", "x");
            var resultK2 = text.Replace("c", "xx");
            var resultK3 = text.Replace(s, "x");
            var resultK4 = text.Replace("c", s);
            var resultK5 = text.Replace("cc", "x", StringComparison.Ordinal);
            var resultK6 = text.Replace("c", "xx", StringComparison.Ordinal);
            var resultK7 = text.Replace(s, "x", StringComparison.Ordinal);
            var resultK8 = text.Replace("c", s, StringComparison.Ordinal);
            var resultK9 = text.Replace("c", "x", StringComparison.OrdinalIgnoreCase);
        }
    }
}
---------------------------------------------------------
(0): ReSharper Dead Code: Passing 0 is redundant.
(1): ReSharper Dead Code: Passing 0 is redundant.
(2): ReSharper Dead Code: Passing 0 is redundant.
(3): ReSharper Dead Code: Passing 0 is redundant.
(4): ReSharper Dead Code: Passing ' ' is redundant.
(5): ReSharper Dead Code: Passing ' ' is redundant.
(6): ReSharper Dead Code: The character is already passed.
(7): ReSharper Dead Code: The character is already passed.
(8): ReSharper Dead Code: Passing null is redundant.
(9): ReSharper Dead Code: Passing an empty array is redundant.
(10): ReSharper Dead Code: The character is already passed.
(11): ReSharper Dead Code: The character is already passed.
(12): ReSharper Dead Code: Passing null is redundant.
(13): ReSharper Dead Code: Passing an empty array is redundant.
(14): ReSharper Dead Code: The character is already passed.
(15): ReSharper Dead Code: The character is already passed.
(16): ReSharper Dead Code: Passing null is redundant.
(17): ReSharper Warning: Conflicting variable 'result82' is defined below
(18): ReSharper Dead Code: Passing an empty array is redundant.
(19): ReSharper Underlined Error Highlighting: A local variable named 'result82' cannot be declared in this scope because it would give a different meaning to 'result82', which is already used in a parent or current scope to denote something else
(20): ReSharper Dead Code: The character is already passed.
(21): ReSharper Dead Code: The character is already passed.
(22): ReSharper Dead Code: The character is already passed.
(23): ReSharper Dead Code: The character is already passed.
(24): ReSharper Dead Code: The character is already passed.
(25): ReSharper Dead Code: The character is already passed.
(26): ReSharper Dead Code: The character is already passed.
(27): ReSharper Dead Code: The character is already passed.
(28): ReSharper Dead Code: The character is already passed.
(29): ReSharper Dead Code: The character is already passed.
(30): ReSharper Dead Code: The character is already passed.
(31): ReSharper Dead Code: The character is already passed.
(32): ReSharper Dead Code: The string is already passed.
(33): ReSharper Dead Code: The string is already passed.
(34): ReSharper Dead Code: The character is already passed.
(35): ReSharper Dead Code: The character is already passed.
(36): ReSharper Dead Code: The character is already passed.
(37): ReSharper Dead Code: The character is already passed.
(38): ReSharper Dead Code: The character is already passed.
(39): ReSharper Dead Code: The character is already passed.
(40): ReSharper Suggestion: The only character should be passed directly.
(41): ReSharper Suggestion: The only character should be passed directly.
(42): ReSharper Suggestion: The only character should be passed directly.
(43): ReSharper Suggestion: The only character should be passed directly.
(44): ReSharper Suggestion: The only character should be passed directly.
(45): ReSharper Suggestion: The only character should be passed directly.
(46): ReSharper Suggestion: The only character should be passed directly.
(47): ReSharper Suggestion: The only character should be passed directly.
(48): ReSharper Suggestion: The only character should be passed directly.
(49): ReSharper Suggestion: The only character should be passed directly.
(50): ReSharper Suggestion: The only character should be passed directly.
(51): ReSharper Suggestion: The only character should be passed directly.
(52): ReSharper Suggestion: The only character should be passed directly.
(53): ReSharper Suggestion: The only characters should be passed directly.
(54): ReSharper Suggestion: The only characters should be passed directly.
(55): ReSharper Suggestion: The only characters should be passed directly.
(56): ReSharper Suggestion: The only characters should be passed directly.
(57): ReSharper Suggestion: The only character should be passed directly.
(58): ReSharper Suggestion: The only character should be passed directly.
(59): ReSharper Suggestion: The only character should be passed directly.
(60): ReSharper Suggestion: The only character should be passed directly.
