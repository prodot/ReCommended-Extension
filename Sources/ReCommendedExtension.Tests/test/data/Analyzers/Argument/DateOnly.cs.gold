using System;
using System.Globalization;

namespace Test
{
    public class Arguments
    {
        public void RedundantArgument(string s, ReadOnlySpan<char> s1, string format, string[] formats, IFormatProvider provider, out DateOnly result)
        {
            var result11 = DateOnly.Parse(s, |null|(0));
            var result12 = DateOnly.Parse(s1, |null|(1));

            var result21 = DateOnly.ParseExact(s, format, |null|(2));
            var result22 = DateOnly.ParseExact(s, formats, |null|(3));
            var result23 = DateOnly.ParseExact(s1, formats, |null|(4));

            var result31 = DateOnly.TryParse(s, |null|(5), out result);
            var result32 = DateOnly.TryParse(s1, |null|(6), out result);
            var result33 = DateOnly.TryParse(s, provider, |DateTimeStyles.None|(7), out result);
            var result34 = DateOnly.TryParse(s1, provider, |DateTimeStyles.None|(8), out result);
        }

        public void RedundantArgumentRange(string s, ReadOnlySpan<char> s1, string format, string[] formats, out DateOnly result)
        {
            var result11 = DateOnly.Parse(s, |null|(9), |DateTimeStyles.None|(10));

            var result21 = DateOnly.ParseExact(s, format, |null|(11), |DateTimeStyles.None|(12));
            var result22 = DateOnly.ParseExact(s, formats, |null|(13), |DateTimeStyles.None|(14));
            var result23 = DateOnly.ParseExact(s1, formats, |null|(15), |DateTimeStyles.None|(16));

            var result31 = DateOnly.TryParseExact(s, format, |null|(17), |DateTimeStyles.None|(18), out result);
            var result32 = DateOnly.TryParseExact(s1, format, |null|(19), |DateTimeStyles.None|(20), out result);
            var result33 = DateOnly.TryParseExact(s, formats, |null|(21), |DateTimeStyles.None|(22), out result);
            var result34 = DateOnly.TryParseExact(s1, formats, |null|(23), |DateTimeStyles.None|(24), out result);
        }

        public void RedundantCollectionElement(string s, ReadOnlySpan<char> s1, IFormatProvider provider, DateTimeStyles style, out DateOnly result)
        {
            var result11 = DateOnly.ParseExact(s, ["d", |"d"|(25), "D", "m", |"M"|(26), "o", |"O"|(27), "r", |"R"|(28), "y", |"Y"|(29)]);
            var result12 = DateOnly.ParseExact(s1, ["d", |"d"|(30), "D", "m", |"M"|(31), "o", |"O"|(32), "r", |"R"|(33), "y", |"Y"|(34)]);
            var result13 = DateOnly.ParseExact(s, ["d", |"d"|(35), "D", "m", |"M"|(36), "o", |"O"|(37), "r", |"R"|(38), "y", |"Y"|(39)], provider, style);
            var result14 = DateOnly.ParseExact(s1, ["d", |"d"|(40), "D", "m", |"M"|(41), "o", |"O"|(42), "r", |"R"|(43), "y", |"Y"|(44)], provider, style);

            var result21 = DateOnly.TryParseExact(s, ["d", |"d"|(45), "D", "m", |"M"|(46), "o", |"O"|(47), "r", |"R"|(48), "y", |"Y"|(49)], out result);
            var result22 = DateOnly.TryParseExact(s1, ["d", |"d"|(50), "D", "m", |"M"|(51), "o", |"O"|(52), "r", |"R"|(53), "y", |"Y"|(54)], out result);
            var result23 = DateOnly.TryParseExact(s, ["d", |"d"|(55), "D", "m", |"M"|(56), "o", |"O"|(57), "r", |"R"|(58), "y", |"Y"|(59)], provider, style, out result);
            var result24 = DateOnly.TryParseExact(s1, ["d", |"d"|(60), "D", "m", |"M"|(61), "o", |"O"|(62), "r", |"R"|(63), "y", |"Y"|(64)], provider, style, out result);
        }

        public void OtherArgument(string s, ReadOnlySpan<char> s1, string format, IFormatProvider provider, DateTimeStyles style, out DateOnly result)
        {
            var result11 = DateOnly.ParseExact(s, |[format]|(65));
            var result12 = DateOnly.ParseExact(s, "o", |provider|(66), style);
            var result13 = DateOnly.ParseExact(s, "O", |provider|(67), style);
            var result14 = DateOnly.ParseExact(s, "r", |provider|(68), style);
            var result15 = DateOnly.ParseExact(s, "R", |provider|(69), style);
            var result16 = DateOnly.ParseExact(s, |[format]|(70), provider, style);
            var result17 = DateOnly.ParseExact(s, ["o", "r"], |provider|(71), style);
            var result18 = DateOnly.ParseExact(s1, ["O", "R"], |provider|(72), style);

            var result21 = DateOnly.TryParseExact(s, |[format]|(73), out result);
            var result22 = DateOnly.TryParseExact(s, "o", |provider|(74), style, out result);
            var result23 = DateOnly.TryParseExact(s, "O", |provider|(75), style, out result);
            var result24 = DateOnly.TryParseExact(s, "r", |provider|(76), style, out result);
            var result25 = DateOnly.TryParseExact(s, "R", |provider|(77), style, out result);
            var result26 = DateOnly.TryParseExact(s, |[format]|(78), provider, style, out result);
            var result27 = DateOnly.TryParseExact(s, ["o", "r"], |provider|(79), style, out result);
            var result28 = DateOnly.TryParseExact(s1, ["O", "R"], |provider|(80), style, out result);
        }

        public void NoDetection(string s, ReadOnlySpan<char> s1, string format, string[] formats, IFormatProvider provider, DateTimeStyles style, out DateOnly result)
        {
            var result11 = DateOnly.Parse(s, provider, style);
            var result12 = DateOnly.Parse(s, provider);
            var result13 = DateOnly.Parse(s1, provider);

            var result21 = DateOnly.ParseExact(s, format, provider, style);
            var result22 = DateOnly.ParseExact(s, formats, provider, style);
            var result23 = DateOnly.ParseExact(s1, formats, provider, style);

            var result31 = DateOnly.TryParse(s, provider, out result);
            var result32 = DateOnly.TryParse(s1, provider, out result);
            var result33 = DateOnly.TryParse(s, provider, style, out result);
            var result34 = DateOnly.TryParse(s1, provider, style, out result);

            var result41 = DateOnly.ParseExact(s, format, provider, style);
            var result42 = DateOnly.ParseExact(s, formats, provider, style);
            var result43 = DateOnly.ParseExact(s1, formats, provider, style);

            var result51 = DateOnly.TryParseExact(s, format, provider, style, out result);
            var result52 = DateOnly.TryParseExact(s1, format, provider, style, out result);
            var result53 = DateOnly.TryParseExact(s, formats, provider, style, out result);
            var result54 = DateOnly.TryParseExact(s1, formats, provider, style, out result);

            var result61 = DateOnly.ParseExact(s, ["d", "D", "m", "o", "r", "y"]);
            var result62 = DateOnly.ParseExact(s1, ["d", "D", "m", "o", "r", "y"]);
            var result63 = DateOnly.ParseExact(s, ["d", "D", "m", "o", "r", "y"], provider, style);
            var result64 = DateOnly.ParseExact(s1, ["d", "D", "m", "o", "r", "y"], provider, style);

            var result71 = DateOnly.TryParseExact(s, ["d", "D", "m", "o", "r", "y"], out result);
            var result72 = DateOnly.TryParseExact(s1, ["d", "D", "m", "o", "r", "y"], out result);
            var result73 = DateOnly.TryParseExact(s, ["d", "D", "m", "o", "r", "y"], provider, style, out result);
            var result74 = DateOnly.TryParseExact(s1, ["d", "D", "m", "o", "r", "y"], provider, style, out result);

            var result81 = DateOnly.ParseExact(s, [format, format]);
            var result82 = DateOnly.ParseExact(s, "o", null, style);
            var result83 = DateOnly.ParseExact(s, "O", null, style);
            var result84 = DateOnly.ParseExact(s, "r", null, style);
            var result85 = DateOnly.ParseExact(s, "R", null, style);
            var result86 = DateOnly.ParseExact(s, [format, format], provider, style);
            var result87 = DateOnly.ParseExact(s, ["o", "r"], null, style);
            var result88 = DateOnly.ParseExact(s, ["d", "o", "r"], provider, style);
            var result89 = DateOnly.ParseExact(s1, ["o", "r"], null, style);
            var result8A = DateOnly.ParseExact(s1, ["o", "r", "d"], provider, style);

            var result91 = DateOnly.TryParseExact(s, [format, format], out result);
            var result92 = DateOnly.TryParseExact(s, "o", null, style, out result);
            var result93 = DateOnly.TryParseExact(s, "O", null, style, out result);
            var result94 = DateOnly.TryParseExact(s, "r", null, style, out result);
            var result95 = DateOnly.TryParseExact(s, "R", null, style, out result);
            var result96 = DateOnly.TryParseExact(s, [format, format], provider, style, out result);
            var result97 = DateOnly.TryParseExact(s, ["o", "r"], null, style, out result);
            var result98 = DateOnly.TryParseExact(s, ["d", "o", "r"], provider, style, out result);
            var result99 = DateOnly.TryParseExact(s1, ["o", "r"], null, style, out result);
            var result9A = DateOnly.TryParseExact(s1, ["o", "r", "d"], provider, style, out result);
        }
    }
}
---------------------------------------------------------
(0): ReSharper Dead Code: Passing null is redundant.
(1): ReSharper Dead Code: Passing null is redundant.
(2): ReSharper Dead Code: Passing null is redundant.
(3): ReSharper Dead Code: Passing null is redundant.
(4): ReSharper Dead Code: Passing null is redundant.
(5): ReSharper Dead Code: Passing null is redundant.
(6): ReSharper Dead Code: Passing null is redundant.
(7): ReSharper Dead Code: Passing DateTimeStyles.None is redundant.
(8): ReSharper Dead Code: Passing DateTimeStyles.None is redundant.
(9): ReSharper Dead Code: Passing 'null, DateTimeStyles.None' is redundant.
(10): ReSharper Dead Code: Passing 'null, DateTimeStyles.None' is redundant.
(11):<overlapped> ReSharper Dead Code: Passing 'null, DateTimeStyles.None' is redundant.
(12):<overlapped> ReSharper Dead Code: Passing 'null, DateTimeStyles.None' is redundant.
(13):<overlapped> ReSharper Dead Code: Passing 'null, DateTimeStyles.None' is redundant.
(14):<overlapped> ReSharper Dead Code: Passing 'null, DateTimeStyles.None' is redundant.
(15):<overlapped> ReSharper Dead Code: Passing 'null, DateTimeStyles.None' is redundant.
(16):<overlapped> ReSharper Dead Code: Passing 'null, DateTimeStyles.None' is redundant.
(17): ReSharper Dead Code: Passing 'null, DateTimeStyles.None' is redundant.
(18): ReSharper Dead Code: Passing 'null, DateTimeStyles.None' is redundant.
(19): ReSharper Dead Code: Passing 'null, DateTimeStyles.None' is redundant.
(20): ReSharper Dead Code: Passing 'null, DateTimeStyles.None' is redundant.
(21): ReSharper Dead Code: Passing 'null, DateTimeStyles.None' is redundant.
(22): ReSharper Dead Code: Passing 'null, DateTimeStyles.None' is redundant.
(23): ReSharper Dead Code: Passing 'null, DateTimeStyles.None' is redundant.
(24): ReSharper Dead Code: Passing 'null, DateTimeStyles.None' is redundant.
(25): ReSharper Dead Code: The string is already passed.
(26): ReSharper Dead Code: The equivalent string is already passed.
(27): ReSharper Dead Code: The equivalent string is already passed.
(28): ReSharper Dead Code: The equivalent string is already passed.
(29): ReSharper Dead Code: The equivalent string is already passed.
(30): ReSharper Dead Code: The string is already passed.
(31): ReSharper Dead Code: The equivalent string is already passed.
(32): ReSharper Dead Code: The equivalent string is already passed.
(33): ReSharper Dead Code: The equivalent string is already passed.
(34): ReSharper Dead Code: The equivalent string is already passed.
(35): ReSharper Dead Code: The string is already passed.
(36): ReSharper Dead Code: The equivalent string is already passed.
(37): ReSharper Dead Code: The equivalent string is already passed.
(38): ReSharper Dead Code: The equivalent string is already passed.
(39): ReSharper Dead Code: The equivalent string is already passed.
(40): ReSharper Dead Code: The string is already passed.
(41): ReSharper Dead Code: The equivalent string is already passed.
(42): ReSharper Dead Code: The equivalent string is already passed.
(43): ReSharper Dead Code: The equivalent string is already passed.
(44): ReSharper Dead Code: The equivalent string is already passed.
(45): ReSharper Dead Code: The string is already passed.
(46): ReSharper Dead Code: The equivalent string is already passed.
(47): ReSharper Dead Code: The equivalent string is already passed.
(48): ReSharper Dead Code: The equivalent string is already passed.
(49): ReSharper Dead Code: The equivalent string is already passed.
(50): ReSharper Dead Code: The string is already passed.
(51): ReSharper Dead Code: The equivalent string is already passed.
(52): ReSharper Dead Code: The equivalent string is already passed.
(53): ReSharper Dead Code: The equivalent string is already passed.
(54): ReSharper Dead Code: The equivalent string is already passed.
(55): ReSharper Dead Code: The string is already passed.
(56): ReSharper Dead Code: The equivalent string is already passed.
(57): ReSharper Dead Code: The equivalent string is already passed.
(58): ReSharper Dead Code: The equivalent string is already passed.
(59): ReSharper Dead Code: The equivalent string is already passed.
(60): ReSharper Dead Code: The string is already passed.
(61): ReSharper Dead Code: The equivalent string is already passed.
(62): ReSharper Dead Code: The equivalent string is already passed.
(63): ReSharper Dead Code: The equivalent string is already passed.
(64): ReSharper Dead Code: The equivalent string is already passed.
(65): ReSharper Suggestion: The only collection element should be passed directly.
(66): ReSharper Suggestion: The format provider is ignored (pass null instead).
(67): ReSharper Suggestion: The format provider is ignored (pass null instead).
(68): ReSharper Suggestion: The format provider is ignored (pass null instead).
(69): ReSharper Suggestion: The format provider is ignored (pass null instead).
(70): ReSharper Suggestion: The only collection element should be passed directly.
(71): ReSharper Suggestion: The format provider is ignored (pass null instead).
(72): ReSharper Suggestion: The format provider is ignored (pass null instead).
(73): ReSharper Suggestion: The only collection element should be passed directly.
(74): ReSharper Suggestion: The format provider is ignored (pass null instead).
(75): ReSharper Suggestion: The format provider is ignored (pass null instead).
(76): ReSharper Suggestion: The format provider is ignored (pass null instead).
(77): ReSharper Suggestion: The format provider is ignored (pass null instead).
(78): ReSharper Suggestion: The only collection element should be passed directly.
(79): ReSharper Suggestion: The format provider is ignored (pass null instead).
(80): ReSharper Suggestion: The format provider is ignored (pass null instead).
