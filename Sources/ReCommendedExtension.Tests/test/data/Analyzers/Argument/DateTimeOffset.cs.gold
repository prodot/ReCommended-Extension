using System;
using System.Globalization;

namespace Test
{
    public class Arguments
    {
        public void RedundantArgument(int year, int month, int day, int hour, int minute, int second, int millisecond, TimeSpan offset, Calendar calendar, string s, ReadOnlySpan<char> s1, IFormatProvider provider, string format, out DateTimeOffset result)
        {
            var result11 = new DateTimeOffset(year, month, day, hour, minute, second, |0|(0), offset);
            var result12 = new DateTimeOffset(year, month, day, hour, minute, second, millisecond, |0|(1), offset);
            var result13 = new DateTimeOffset(year, month, day, hour, minute, second, millisecond, |0|(2), calendar, offset);

            DateTimeOffset result21 = new(year, month, day, hour, minute, second, |0|(3), offset);
            DateTimeOffset result22 = new(year, month, day, hour, minute, second, millisecond, |0|(4), offset);
            DateTimeOffset result23 = new(year, month, day, hour, minute, second, millisecond, |0|(5), calendar, offset);

            var result31 = DateTimeOffset.Parse(s, |null|(6));
            var result32 = DateTimeOffset.Parse(s1, |null|(7));
            var result33 = DateTimeOffset.Parse(s, provider, |DateTimeStyles.None|(8));

            var result41 = DateTimeOffset.TryParse(s, |null|(9), out result);
            var result42 = DateTimeOffset.TryParse(s1, |null|(10), out result);
            var result43 = DateTimeOffset.TryParse(s, provider, |DateTimeStyles.None|(11), out result);
            var result44 = DateTimeOffset.TryParse(s1, provider, |DateTimeStyles.None|(12), out result);

            var result51 = DateTimeOffset.ParseExact(s, format, provider, |DateTimeStyles.None|(13));
        }

        public void RedundantCollectionElement(string s, ReadOnlySpan<char> s1, IFormatProvider provider, DateTimeStyles style, out DateTimeOffset result)
        {
            var result11 = DateTimeOffset.ParseExact(s, ["d", |"d"|(14), "D", "f", "F", "g", "G", "m", |"M"|(15), "o", |"O"|(16), "r", |"R"|(17), "s", "t", "T", "u", "y", |"Y"|(18)], provider, style);
            var result12 = DateTimeOffset.ParseExact(s1, ["d", |"d"|(19), "D", "f", "F", "g", "G", "m", |"M"|(20), "o", |"O"|(21), "r", |"R"|(22), "s", "t", "T", "u", "y", |"Y"|(23)], provider, style);

            var result21 = DateTimeOffset.TryParseExact(s, ["d", |"d"|(24), "D", "f", "F", "g", "G", "m", |"M"|(25), "o", |"O"|(26), "r", |"R"|(27), "s", "t", "T", "u", "y", |"Y"|(28)], provider, style, out result);
            var result22 = DateTimeOffset.TryParseExact(s1, ["d", |"d"|(29), "D", "f", "F", "g", "G", "m", |"M"|(30), "o", |"O"|(31), "r", |"R"|(32), "s", "t", "T", "u", "y", |"Y"|(33)], provider, style, out result);
        }

        public void OtherArgument(string s, ReadOnlySpan<char> s1, string format, IFormatProvider provider, DateTimeStyles style, out DateTimeOffset result)
        {
            var result11 = DateTimeOffset.ParseExact(s, "o", |provider|(34));
            var result12 = DateTimeOffset.ParseExact(s, "O", |provider|(35));
            var result13 = DateTimeOffset.ParseExact(s, "r", |provider|(36));
            var result14 = DateTimeOffset.ParseExact(s, "R", |provider|(37));
            var result15 = DateTimeOffset.ParseExact(s, "s", |provider|(38));
            var result16 = DateTimeOffset.ParseExact(s, "u", |provider|(39));
            var result17 = DateTimeOffset.ParseExact(s, "o", |provider|(40), style);
            var result18 = DateTimeOffset.ParseExact(s, "O", |provider|(41), style);
            var result19 = DateTimeOffset.ParseExact(s, "r", |provider|(42), style);
            var result1A = DateTimeOffset.ParseExact(s, "R", |provider|(43), style);
            var result1B = DateTimeOffset.ParseExact(s, "s", |provider|(44), style);
            var result1C = DateTimeOffset.ParseExact(s, "u", |provider|(45), style);
            var result1D = DateTimeOffset.ParseExact(s, |[format]|(46), provider, style);
            var result1E = DateTimeOffset.ParseExact(s, ["o", "r", "s", "u"], |provider|(47), style);
            var result1F = DateTimeOffset.ParseExact(s1, ["o", "r", "s", "u"], |provider|(48), style);

            var result21 = DateTimeOffset.TryParseExact(s, "o", |provider|(49), style, out result);
            var result22 = DateTimeOffset.TryParseExact(s, "O", |provider|(50), style, out result);
            var result23 = DateTimeOffset.TryParseExact(s, "r", |provider|(51), style, out result);
            var result24 = DateTimeOffset.TryParseExact(s, "R", |provider|(52), style, out result);
            var result25 = DateTimeOffset.TryParseExact(s, "s", |provider|(53), style, out result);
            var result26 = DateTimeOffset.TryParseExact(s, "u", |provider|(54), style, out result);
            var result27 = DateTimeOffset.TryParseExact(s, |[format]|(55), provider, style, out result);
            var result28 = DateTimeOffset.TryParseExact(s, ["o", "r", "s", "u"], |provider|(56), style, out result);
            var result29 = DateTimeOffset.TryParseExact(s1, ["o", "r", "s", "u"], |provider|(57), style, out result);
        }

        public void NoDetection(int year, int month, int day, int hour, int minute, int second, int millisecond, int microsecond, TimeSpan offset, Calendar calendar, string s, ReadOnlySpan<char> s1, IFormatProvider provider, DateTimeStyles style, string format, out DateTimeOffset result)
        {
            var result11 = new DateTimeOffset(year, month, day, hour, minute, second, millisecond, offset);
            var result12 = new DateTimeOffset(year, month, day, hour, minute, second, millisecond, microsecond, offset);
            var result13 = new DateTimeOffset(year, month, day, hour, minute, second, millisecond, microsecond, calendar, offset);

            var result21 = DateTimeOffset.Parse(s, provider);
            var result22 = DateTimeOffset.Parse(s1, provider);
            var result23 = DateTimeOffset.Parse(s, provider, style);

            var result31 = DateTimeOffset.TryParse(s, provider, out result);
            var result32 = DateTimeOffset.TryParse(s1, provider, out result);
            var result33 = DateTimeOffset.TryParse(s, provider, style, out result);
            var result34 = DateTimeOffset.TryParse(s1, provider, style, out result);

            var result41 = DateTimeOffset.ParseExact(s, format, provider, style);

            var result51 = DateTimeOffset.ParseExact(s, ["d", "D", "f", "F", "g", "G", "m", "o", "r", "s", "t", "T", "u", "y"], provider, style);
            var result52 = DateTimeOffset.ParseExact(s1, ["d", "D", "f", "F", "g", "G", "m", "o", "r", "s", "t", "T", "u", "y"], provider, style);

            var result61 = DateTimeOffset.TryParseExact(s, ["d", "D", "f", "F", "g", "G", "m", "o", "r", "s", "t", "T", "u", "y"], provider, style, out result);
            var result62 = DateTimeOffset.TryParseExact(s1, ["d", "D", "f", "F", "g", "G", "m", "o", "r", "s", "t", "T", "u", "y"], provider, style, out result);

            var result71 = DateTimeOffset.ParseExact(s, "o", null);
            var result72 = DateTimeOffset.ParseExact(s, "O", null);
            var result73 = DateTimeOffset.ParseExact(s, "r", null);
            var result74 = DateTimeOffset.ParseExact(s, "R", null);
            var result75 = DateTimeOffset.ParseExact(s, "s", null);
            var result76 = DateTimeOffset.ParseExact(s, "u", null);
            var result77 = DateTimeOffset.ParseExact(s, "o", null, style);
            var result78 = DateTimeOffset.ParseExact(s, "O", null, style);
            var result79 = DateTimeOffset.ParseExact(s, "r", null, style);
            var result7A = DateTimeOffset.ParseExact(s, "R", null, style);
            var result7B = DateTimeOffset.ParseExact(s, "s", null, style);
            var result7C = DateTimeOffset.ParseExact(s, "u", null, style);
            var result7D = DateTimeOffset.ParseExact(s, [format, format], provider, style);
            var result7E = DateTimeOffset.ParseExact(s, ["o", "r", "s", "u"], null, style);
            var result7F = DateTimeOffset.ParseExact(s, ["o", "r", "s", "u", "d"], provider, style);
            var result7G = DateTimeOffset.ParseExact(s1, ["o", "r", "s", "u"], null, style);
            var result7H = DateTimeOffset.ParseExact(s1, ["d", "o", "r", "s", "u"], provider, style);

            var result81 = DateTimeOffset.TryParseExact(s, "o", null, style, out result);
            var result82 = DateTimeOffset.TryParseExact(s, "O", null, style, out result);
            var result83 = DateTimeOffset.TryParseExact(s, "r", null, style, out result);
            var result84 = DateTimeOffset.TryParseExact(s, "R", null, style, out result);
            var result85 = DateTimeOffset.TryParseExact(s, "s", null, style, out result);
            var result86 = DateTimeOffset.TryParseExact(s, "u", null, style, out result);
            var result87 = DateTimeOffset.TryParseExact(s, [format, format], provider, style, out result);
            var result88 = DateTimeOffset.TryParseExact(s, ["o", "r", "s", "u"], null, style, out result);
            var result89 = DateTimeOffset.TryParseExact(s, ["o", "r", "s", "u", "d"], provider, style, out result);
            var result8A = DateTimeOffset.TryParseExact(s1, ["o", "r", "s", "u"], null, style, out result);
            var result8B = DateTimeOffset.TryParseExact(s1, ["d", "o", "r", "s", "u"], provider, style, out result);
        }
    }
}
---------------------------------------------------------
(0): ReSharper Dead Code: Passing 0 is redundant.
(1): ReSharper Dead Code: Passing 0 is redundant.
(2): ReSharper Dead Code: Passing 0 is redundant.
(3): ReSharper Dead Code: Passing 0 is redundant.
(4): ReSharper Dead Code: Passing 0 is redundant.
(5): ReSharper Dead Code: Passing 0 is redundant.
(6): ReSharper Dead Code: Passing null is redundant.
(7): ReSharper Dead Code: Passing null is redundant.
(8): ReSharper Dead Code: Passing DateTimeStyles.None is redundant.
(9): ReSharper Dead Code: Passing null is redundant.
(10): ReSharper Dead Code: Passing null is redundant.
(11): ReSharper Dead Code: Passing DateTimeStyles.None is redundant.
(12): ReSharper Dead Code: Passing DateTimeStyles.None is redundant.
(13): ReSharper Dead Code: Passing DateTimeStyles.None is redundant.
(14): ReSharper Dead Code: The string is already passed.
(15): ReSharper Dead Code: The equivalent string is already passed.
(16): ReSharper Dead Code: The equivalent string is already passed.
(17): ReSharper Dead Code: The equivalent string is already passed.
(18): ReSharper Dead Code: The equivalent string is already passed.
(19): ReSharper Dead Code: The string is already passed.
(20): ReSharper Dead Code: The equivalent string is already passed.
(21): ReSharper Dead Code: The equivalent string is already passed.
(22): ReSharper Dead Code: The equivalent string is already passed.
(23): ReSharper Dead Code: The equivalent string is already passed.
(24): ReSharper Dead Code: The string is already passed.
(25): ReSharper Dead Code: The equivalent string is already passed.
(26): ReSharper Dead Code: The equivalent string is already passed.
(27): ReSharper Dead Code: The equivalent string is already passed.
(28): ReSharper Dead Code: The equivalent string is already passed.
(29): ReSharper Dead Code: The string is already passed.
(30): ReSharper Dead Code: The equivalent string is already passed.
(31): ReSharper Dead Code: The equivalent string is already passed.
(32): ReSharper Dead Code: The equivalent string is already passed.
(33): ReSharper Dead Code: The equivalent string is already passed.
(34): ReSharper Suggestion: The format provider is ignored (pass null instead).
(35): ReSharper Suggestion: The format provider is ignored (pass null instead).
(36): ReSharper Suggestion: The format provider is ignored (pass null instead).
(37): ReSharper Suggestion: The format provider is ignored (pass null instead).
(38): ReSharper Suggestion: The format provider is ignored (pass null instead).
(39): ReSharper Suggestion: The format provider is ignored (pass null instead).
(40): ReSharper Suggestion: The format provider is ignored (pass null instead).
(41): ReSharper Suggestion: The format provider is ignored (pass null instead).
(42): ReSharper Suggestion: The format provider is ignored (pass null instead).
(43): ReSharper Suggestion: The format provider is ignored (pass null instead).
(44): ReSharper Suggestion: The format provider is ignored (pass null instead).
(45): ReSharper Suggestion: The format provider is ignored (pass null instead).
(46): ReSharper Suggestion: The only collection element should be passed directly.
(47): ReSharper Suggestion: The format provider is ignored (pass null instead).
(48): ReSharper Suggestion: The format provider is ignored (pass null instead).
(49): ReSharper Suggestion: The format provider is ignored (pass null instead).
(50): ReSharper Suggestion: The format provider is ignored (pass null instead).
(51): ReSharper Suggestion: The format provider is ignored (pass null instead).
(52): ReSharper Suggestion: The format provider is ignored (pass null instead).
(53): ReSharper Suggestion: The format provider is ignored (pass null instead).
(54): ReSharper Suggestion: The format provider is ignored (pass null instead).
(55): ReSharper Suggestion: The only collection element should be passed directly.
(56): ReSharper Suggestion: The format provider is ignored (pass null instead).
(57): ReSharper Suggestion: The format provider is ignored (pass null instead).
