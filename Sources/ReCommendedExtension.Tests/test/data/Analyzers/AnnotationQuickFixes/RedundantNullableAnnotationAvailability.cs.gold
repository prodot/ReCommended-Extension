using System;
using System.Collections.Generic;
using System.Threading.Tasks;
using JetBrains.Annotations;

namespace Test
{
    internal class Enumerables
    {
        public IEnumerable<int>|?|(0) IteratorNullable()
        {
            yield return 1;
        }
    }

    internal class AsyncEnumerables
    {
        public async IAsyncEnumerable<int>|?|(1) IteratorNullable()
        {
            await Task.Yield();
            yield return 1;
        }
    }

    internal class AsyncMethods
    {
        public async Task|?|(2) AsyncTask() => await Task.Yield();

        public async Task<int>|?|(3) AsyncTaskWithResult()
        {
            await Task.Yield();
            return 1;
        }
    }
}
------------------------------------------------
0: Return type of 'IteratorNullable' can be made non-nullable.
QUICKFIXES:
Make method return type not nullable
1: Return type of 'IteratorNullable' can be made non-nullable.
QUICKFIXES:
Make method return type not nullable
2: Return type of 'AsyncTask' can be made non-nullable.
QUICKFIXES:
Make method return type not nullable
3: Return type of 'AsyncTaskWithResult' can be made non-nullable.
QUICKFIXES:
Make method return type not nullable
