using System;

namespace Test
{
    public class UIntPtrs
    {
        public void Clamp(nuint number)
        {
            const int c = 1;

            var result11 = |nuint.Clamp(number, 1, 0x01)|(0);
            var result12 = |nuint.Clamp(number, 1, 0x01u)|(1);
            var result13 = |nuint.Clamp(number, 1, c)|(2);
            var result14 = |nuint.Clamp(number, 97, 'a')|(3);

            nuint result21 = |nuint.Clamp(number, 1, 0x01)|(4);
            nuint result22 = |nuint.Clamp(number, 1, 0x01u)|(5);
            nuint result23 = |nuint.Clamp(number, 1, c)|(6);
            nuint result24 = |nuint.Clamp(number, 97, 'a')|(7);

            var result3 = |Math.Clamp(number, (nuint)1, (nuint)1)|(8);
        }

        public void DivRem(nuint left)
        {
            var result11 = |nuint.DivRem(0, 10)|(9);

            (nuint, nuint) result21 = |nuint.DivRem(0, 10)|(10);

            (nuint quotient, nuint remainder) result32 = |nuint.DivRem(0, 10)|(11);

            var result71 = |Math.DivRem((nuint)0, (nuint)10)|(12);
        }

        public void Equals(nuint number)
        {
            var result = |number.Equals(null)|(13);
        }

        public void Max()
        {
            const int c = 10;

            var result11 = |nuint.Max(10, 0x0A)|(14);
            var result12 = |nuint.Max(10, 10u)|(15);
            var result13 = |nuint.Max(10, c)|(16);
            var result14 = |nuint.Max(97, 'a')|(17);

            nuint result21 = |nuint.Max(10, 0x0A)|(18);
            nuint result22 = |nuint.Max(10, 10u)|(19);
            nuint result23 = |nuint.Max(10, c)|(20);
            nuint result24 = |nuint.Max(97, 'a')|(21);

            var result31 = |Math.Max((nuint)10, (nuint)10)|(22);
        }

        public void Min()
        {
            const int c = 10;

            var result11 = |nuint.Min(10, 0x0A)|(23);
            var result12 = |nuint.Min(10, 10u)|(24);
            var result13 = |nuint.Min(10, c)|(25);
            var result14 = |nuint.Min(97, 'a')|(26);

            nuint result21 = |nuint.Min(10, 0x0A)|(27);
            nuint result22 = |nuint.Min(10, 10u)|(28);
            nuint result23 = |nuint.Min(10, c)|(29);
            nuint result24 = |nuint.Min(97, 'a')|(30);

            var result31 = |Math.Min((nuint)10, (nuint)10)|(31);
        }

        public void RotateLeft(nuint n)
        {
            const int c = 1;

            var result11 = |nuint.RotateLeft(n, 0)|(32);
            var result12 = |nuint.RotateLeft(0x01, 0)|(33);
            var result13 = |nuint.RotateLeft(1 + 1, 0)|(34);
            var result14 = |nuint.RotateLeft(c, 0)|(35);
            var result15 = |nuint.RotateLeft('a', 0)|(36);

            nuint result21 = |nuint.RotateLeft(n, 0)|(37);
            nuint result22 = |nuint.RotateLeft(0x01, 0)|(38);
            nuint result23 = |nuint.RotateLeft(1 + 1, 0)|(39);
            nuint result24 = |nuint.RotateLeft(c, 0)|(40);
            nuint result25 = |nuint.RotateLeft('a', 0)|(41);
        }

        public void RotateRight(nuint n)
        {
            const int c = 1;

            var result11 = |nuint.RotateRight(n, 0)|(42);
            var result12 = |nuint.RotateRight(0x01, 0)|(43);
            var result13 = |nuint.RotateRight(1 + 1, 0)|(44);
            var result14 = |nuint.RotateRight(c, 0)|(45);
            var result15 = |nuint.RotateRight('a', 0)|(46);

            nuint result21 = |nuint.RotateRight(n, 0)|(47);
            nuint result22 = |nuint.RotateRight(0x01, 0)|(48);
            nuint result23 = |nuint.RotateRight(1 + 1, 0)|(49);
            nuint result24 = |nuint.RotateRight(c, 0)|(50);
            nuint result25 = |nuint.RotateRight('a', 0)|(51);
        }
    }
}
------------------------------------------------
0: The expression is always 1.
QUICKFIXES:
Replace with '(nuint)0x01'
Replace with '(nuint)1'
1: The expression is always 1.
QUICKFIXES:
Replace with '(nuint)0x01u'
Replace with '(nuint)1'
2: The expression is always 1.
QUICKFIXES:
Replace with '(nuint)c'
Replace with '(nuint)1'
3: The expression is always 97.
QUICKFIXES:
Replace with '(nuint)'a''
Replace with '(nuint)97'
4: The expression is always 1.
QUICKFIXES:
Replace with '0x01'
Replace with '1'
5: The expression is always 1.
QUICKFIXES:
Replace with '0x01u'
Replace with '1'
6: The expression is always 1.
QUICKFIXES:
Replace with 'c'
Replace with '1'
7: The expression is always 97.
QUICKFIXES:
Replace with ''a''
Replace with '97'
8: The expression is always 1.
QUICKFIXES:
Replace with '(nuint)1'
9: The expression is always (0, 0).
QUICKFIXES:
Replace with '(Quotient: (nuint)0, Remainder: (nuint)0)'
10: The expression is always (0, 0).
QUICKFIXES:
Replace with '(0, 0)'
11: The expression is always (0, 0).
QUICKFIXES:
Replace with '(0, 0)'
12: The expression is always (0, 0).
QUICKFIXES:
Replace with '(Quotient: (nuint)0, Remainder: (nuint)0)'
13: The expression is always false.
QUICKFIXES:
Replace with 'false'
14: The expression is always 10.
QUICKFIXES:
Replace with '(nuint)0x0A'
Replace with '(nuint)10'
15: The expression is always 10.
QUICKFIXES:
Replace with '(nuint)10u'
Replace with '(nuint)10'
16: The expression is always 10.
QUICKFIXES:
Replace with '(nuint)c'
Replace with '(nuint)10'
17: The expression is always 97.
QUICKFIXES:
Replace with '(nuint)'a''
Replace with '(nuint)97'
18: The expression is always 10.
QUICKFIXES:
Replace with '0x0A'
Replace with '10'
19: The expression is always 10.
QUICKFIXES:
Replace with '10u'
Replace with '10'
20: The expression is always 10.
QUICKFIXES:
Replace with 'c'
Replace with '10'
21: The expression is always 97.
QUICKFIXES:
Replace with ''a''
Replace with '97'
22: The expression is always 10.
QUICKFIXES:
Replace with '(nuint)10'
23: The expression is always 10.
QUICKFIXES:
Replace with '(nuint)0x0A'
Replace with '(nuint)10'
24: The expression is always 10.
QUICKFIXES:
Replace with '(nuint)10u'
Replace with '(nuint)10'
25: The expression is always 10.
QUICKFIXES:
Replace with '(nuint)c'
Replace with '(nuint)10'
26: The expression is always 97.
QUICKFIXES:
Replace with '(nuint)'a''
Replace with '(nuint)97'
27: The expression is always 10.
QUICKFIXES:
Replace with '0x0A'
Replace with '10'
28: The expression is always 10.
QUICKFIXES:
Replace with '10u'
Replace with '10'
29: The expression is always 10.
QUICKFIXES:
Replace with 'c'
Replace with '10'
30: The expression is always 97.
QUICKFIXES:
Replace with ''a''
Replace with '97'
31: The expression is always 10.
QUICKFIXES:
Replace with '(nuint)10'
32: The expression is always the same as the first argument.
QUICKFIXES:
Replace with 'n'
33: The expression is always the same as the first argument.
QUICKFIXES:
Replace with '(nuint)0x01'
34: The expression is always the same as the first argument.
QUICKFIXES:
Replace with '(nuint)(1 + 1)'
35: The expression is always the same as the first argument.
QUICKFIXES:
Replace with '(nuint)c'
36: The expression is always the same as the first argument.
QUICKFIXES:
Replace with '(nuint)'a''
37: The expression is always the same as the first argument.
QUICKFIXES:
Replace with 'n'
38: The expression is always the same as the first argument.
QUICKFIXES:
Replace with '0x01'
39: The expression is always the same as the first argument.
QUICKFIXES:
Replace with '1 + 1'
40: The expression is always the same as the first argument.
QUICKFIXES:
Replace with 'c'
41: The expression is always the same as the first argument.
QUICKFIXES:
Replace with ''a''
42: The expression is always the same as the first argument.
QUICKFIXES:
Replace with 'n'
43: The expression is always the same as the first argument.
QUICKFIXES:
Replace with '(nuint)0x01'
44: The expression is always the same as the first argument.
QUICKFIXES:
Replace with '(nuint)(1 + 1)'
45: The expression is always the same as the first argument.
QUICKFIXES:
Replace with '(nuint)c'
46: The expression is always the same as the first argument.
QUICKFIXES:
Replace with '(nuint)'a''
47: The expression is always the same as the first argument.
QUICKFIXES:
Replace with 'n'
48: The expression is always the same as the first argument.
QUICKFIXES:
Replace with '0x01'
49: The expression is always the same as the first argument.
QUICKFIXES:
Replace with '1 + 1'
50: The expression is always the same as the first argument.
QUICKFIXES:
Replace with 'c'
51: The expression is always the same as the first argument.
QUICKFIXES:
Replace with ''a''
