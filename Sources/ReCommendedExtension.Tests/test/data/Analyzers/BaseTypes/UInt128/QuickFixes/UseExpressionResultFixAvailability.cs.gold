using System;

namespace Test
{
    public class UInt128s
    {
        public void Clamp(UInt128 number)
        {
            const int c = 1;

            var result11 = |UInt128.Clamp(number, 1, 0x0001)|(0);
            var result12 = |UInt128.Clamp(number, 1, 0x0001L)|(1);
            var result13 = |UInt128.Clamp(number, 1, 0x0001u)|(2);
            var result14 = |UInt128.Clamp(number, 1, 0x0001ul)|(3);
            var result15 = |UInt128.Clamp(number, 1, c)|(4);
            var result16 = |UInt128.Clamp(number, 97, 'a')|(5);

            UInt128 result21 = |UInt128.Clamp(number, 1, 0x0001)|(6);
            UInt128 result22 = |UInt128.Clamp(number, 1, 0x0001L)|(7);
            UInt128 result23 = |UInt128.Clamp(number, 1, 0x0001u)|(8);
            UInt128 result24 = |UInt128.Clamp(number, 1, 0x0001ul)|(9);
            UInt128 result25 = |UInt128.Clamp(number, 1, c)|(10);
            UInt128 result26 = |UInt128.Clamp(number, 97, 'a')|(11);
        }

        public void DivRem(UInt128 left)
        {
            var result11 = |UInt128.DivRem(0, 10)|(12);

            (UInt128, UInt128) result21 = |UInt128.DivRem(0, 10)|(13);

            (UInt128 quotient, UInt128 remainder) result32 = |UInt128.DivRem(0, 10)|(14);
        }

        public void Equals(UInt128 number)
        {
            var result = |number.Equals(null)|(15);
        }

        public void Max()
        {
            const int c = 10;

            var result11 = |UInt128.Max(10, 0x0A)|(16);
            var result12 = |UInt128.Max(10, 10ul)|(17);
            var result13 = |UInt128.Max(10, 10u)|(18);
            var result14 = |UInt128.Max(10, 10L)|(19);
            var result15 = |UInt128.Max(10, c)|(20);
            var result16 = |UInt128.Max(97, 'a')|(21);

            UInt128 result21 = |UInt128.Max(10, 0x0A)|(22);
            UInt128 result22 = |UInt128.Max(10, 10ul)|(23);
            UInt128 result23 = |UInt128.Max(10, 10u)|(24);
            UInt128 result24 = |UInt128.Max(10, 10L)|(25);
            UInt128 result25 = |UInt128.Max(10, c)|(26);
            UInt128 result26 = |UInt128.Max(97, 'a')|(27);
        }

        public void Min()
        {
            const int c = 10;

            var result11 = |UInt128.Min(10, 0x0A)|(28);
            var result12 = |UInt128.Min(10, 10ul)|(29);
            var result13 = |UInt128.Min(10, 10u)|(30);
            var result14 = |UInt128.Min(10, 10L)|(31);
            var result15 = |UInt128.Min(10, c)|(32);
            var result16 = |UInt128.Min(97, 'a')|(33);

            UInt128 result21 = |UInt128.Min(10, 0x0A)|(34);
            UInt128 result22 = |UInt128.Min(10, 10ul)|(35);
            UInt128 result23 = |UInt128.Min(10, 10u)|(36);
            UInt128 result24 = |UInt128.Min(10, 10L)|(37);
            UInt128 result25 = |UInt128.Min(10, c)|(38);
            UInt128 result26 = |UInt128.Min(97, 'a')|(39);
        }

        public void RotateLeft(UInt128 n)
        {
            const int c = 1;

            var result11 = |UInt128.RotateLeft(n, 0)|(40);
            var result12 = |UInt128.RotateLeft(0x01, 0)|(41);
            var result13 = |UInt128.RotateLeft(0x01u, 0)|(42);
            var result14 = |UInt128.RotateLeft(0x01L, 0)|(43);
            var result15 = |UInt128.RotateLeft(0x01ul, 0)|(44);
            var result16 = |UInt128.RotateLeft(1 + 1, 0)|(45);
            var result17 = |UInt128.RotateLeft(1u + 1u, 0)|(46);
            var result18 = |UInt128.RotateLeft(1L + 1L, 0)|(47);
            var result19 = |UInt128.RotateLeft(1ul + 1ul, 0)|(48);
            var result1A = |UInt128.RotateLeft(c, 0)|(49);
            var result1B = |UInt128.RotateLeft('a', 0)|(50);

            UInt128 result21 = |UInt128.RotateLeft(n, 0)|(51);
            UInt128 result22 = |UInt128.RotateLeft(0x01, 0)|(52);
            UInt128 result23 = |UInt128.RotateLeft(0x01u, 0)|(53);
            UInt128 result24 = |UInt128.RotateLeft(0x01L, 0)|(54);
            UInt128 result25 = |UInt128.RotateLeft(0x01ul, 0)|(55);
            UInt128 result26 = |UInt128.RotateLeft(1 + 1, 0)|(56);
            UInt128 result27 = |UInt128.RotateLeft(1u + 1u, 0)|(57);
            UInt128 result28 = |UInt128.RotateLeft(1L + 1L, 0)|(58);
            UInt128 result29 = |UInt128.RotateLeft(1ul + 1ul, 0)|(59);
            UInt128 result2A = |UInt128.RotateLeft(c, 0)|(60);
            UInt128 result2B = |UInt128.RotateLeft('a', 0)|(61);
        }

        public void RotateRight(UInt128 n)
        {
            const int c = 1;

            var result11 = |UInt128.RotateRight(n, 0)|(62);
            var result12 = |UInt128.RotateRight(0x01, 0)|(63);
            var result13 = |UInt128.RotateRight(0x01u, 0)|(64);
            var result14 = |UInt128.RotateRight(0x01L, 0)|(65);
            var result15 = |UInt128.RotateRight(0x01ul, 0)|(66);
            var result16 = |UInt128.RotateRight(1 + 1, 0)|(67);
            var result17 = |UInt128.RotateRight(1u + 1u, 0)|(68);
            var result18 = |UInt128.RotateRight(1L + 1L, 0)|(69);
            var result19 = |UInt128.RotateRight(1ul + 1ul, 0)|(70);
            var result1A = |UInt128.RotateRight(c, 0)|(71);
            var result1B = |UInt128.RotateRight('a', 0)|(72);

            UInt128 result21 = |UInt128.RotateRight(n, 0)|(73);
            UInt128 result22 = |UInt128.RotateRight(0x01, 0)|(74);
            UInt128 result23 = |UInt128.RotateRight(0x01u, 0)|(75);
            UInt128 result24 = |UInt128.RotateRight(0x01L, 0)|(76);
            UInt128 result25 = |UInt128.RotateRight(0x01ul, 0)|(77);
            UInt128 result26 = |UInt128.RotateRight(1 + 1, 0)|(78);
            UInt128 result27 = |UInt128.RotateRight(1u + 1u, 0)|(79);
            UInt128 result28 = |UInt128.RotateRight(1L + 1L, 0)|(80);
            UInt128 result29 = |UInt128.RotateRight(1ul + 1ul, 0)|(81);
            UInt128 result2A = |UInt128.RotateRight(c, 0)|(82);
            UInt128 result2B = |UInt128.RotateRight('a', 0)|(83);
        }
    }
}
------------------------------------------------
0: The expression is always 1.
QUICKFIXES:
Replace with '(UInt128)0x0001'
Replace with '(UInt128)1'
1: The expression is always 1.
QUICKFIXES:
Replace with '(UInt128)0x0001L'
Replace with '(UInt128)1'
2: The expression is always 1.
QUICKFIXES:
Replace with '(UInt128)0x0001u'
Replace with '(UInt128)1'
3: The expression is always 1.
QUICKFIXES:
Replace with '(UInt128)0x0001ul'
Replace with '(UInt128)1'
4: The expression is always 1.
QUICKFIXES:
Replace with '(UInt128)c'
Replace with '(UInt128)1'
5: The expression is always 97.
QUICKFIXES:
Replace with '(UInt128)'a''
Replace with '(UInt128)97'
6: The expression is always 1.
QUICKFIXES:
Replace with '0x0001'
Replace with '1'
7: The expression is always 1.
QUICKFIXES:
Replace with '0x0001L'
Replace with '1'
8: The expression is always 1.
QUICKFIXES:
Replace with '0x0001u'
Replace with '1'
9: The expression is always 1.
QUICKFIXES:
Replace with '0x0001ul'
Replace with '1'
10: The expression is always 1.
QUICKFIXES:
Replace with 'c'
Replace with '1'
11: The expression is always 97.
QUICKFIXES:
Replace with ''a''
Replace with '97'
12: The expression is always (0, 0).
QUICKFIXES:
Replace with '(Quotient: (UInt128)0, Remainder: (UInt128)0)'
13: The expression is always (0, 0).
QUICKFIXES:
Replace with '(0, 0)'
14: The expression is always (0, 0).
QUICKFIXES:
Replace with '(0, 0)'
15: The expression is always false.
QUICKFIXES:
Replace with 'false'
16: The expression is always 10.
QUICKFIXES:
Replace with '(UInt128)0x0A'
Replace with '(UInt128)10'
17: The expression is always 10.
QUICKFIXES:
Replace with '(UInt128)10ul'
Replace with '(UInt128)10'
18: The expression is always 10.
QUICKFIXES:
Replace with '(UInt128)10u'
Replace with '(UInt128)10'
19: The expression is always 10.
QUICKFIXES:
Replace with '(UInt128)10L'
Replace with '(UInt128)10'
20: The expression is always 10.
QUICKFIXES:
Replace with '(UInt128)c'
Replace with '(UInt128)10'
21: The expression is always 97.
QUICKFIXES:
Replace with '(UInt128)'a''
Replace with '(UInt128)97'
22: The expression is always 10.
QUICKFIXES:
Replace with '0x0A'
Replace with '10'
23: The expression is always 10.
QUICKFIXES:
Replace with '10ul'
Replace with '10'
24: The expression is always 10.
QUICKFIXES:
Replace with '10u'
Replace with '10'
25: The expression is always 10.
QUICKFIXES:
Replace with '10L'
Replace with '10'
26: The expression is always 10.
QUICKFIXES:
Replace with 'c'
Replace with '10'
27: The expression is always 97.
QUICKFIXES:
Replace with ''a''
Replace with '97'
28: The expression is always 10.
QUICKFIXES:
Replace with '(UInt128)0x0A'
Replace with '(UInt128)10'
29: The expression is always 10.
QUICKFIXES:
Replace with '(UInt128)10ul'
Replace with '(UInt128)10'
30: The expression is always 10.
QUICKFIXES:
Replace with '(UInt128)10u'
Replace with '(UInt128)10'
31: The expression is always 10.
QUICKFIXES:
Replace with '(UInt128)10L'
Replace with '(UInt128)10'
32: The expression is always 10.
QUICKFIXES:
Replace with '(UInt128)c'
Replace with '(UInt128)10'
33: The expression is always 97.
QUICKFIXES:
Replace with '(UInt128)'a''
Replace with '(UInt128)97'
34: The expression is always 10.
QUICKFIXES:
Replace with '0x0A'
Replace with '10'
35: The expression is always 10.
QUICKFIXES:
Replace with '10ul'
Replace with '10'
36: The expression is always 10.
QUICKFIXES:
Replace with '10u'
Replace with '10'
37: The expression is always 10.
QUICKFIXES:
Replace with '10L'
Replace with '10'
38: The expression is always 10.
QUICKFIXES:
Replace with 'c'
Replace with '10'
39: The expression is always 97.
QUICKFIXES:
Replace with ''a''
Replace with '97'
40: The expression is always the same as the first argument.
QUICKFIXES:
Replace with 'n'
41: The expression is always the same as the first argument.
QUICKFIXES:
Replace with '(UInt128)0x01'
42: The expression is always the same as the first argument.
QUICKFIXES:
Replace with '(UInt128)0x01u'
43: The expression is always the same as the first argument.
QUICKFIXES:
Replace with '(UInt128)0x01L'
44: The expression is always the same as the first argument.
QUICKFIXES:
Replace with '(UInt128)0x01ul'
45: The expression is always the same as the first argument.
QUICKFIXES:
Replace with '(UInt128)(1 + 1)'
46: The expression is always the same as the first argument.
QUICKFIXES:
Replace with '(UInt128)(1u + 1u)'
47: The expression is always the same as the first argument.
QUICKFIXES:
Replace with '(UInt128)(1L + 1L)'
48: The expression is always the same as the first argument.
QUICKFIXES:
Replace with '(UInt128)(1ul + 1ul)'
49: The expression is always the same as the first argument.
QUICKFIXES:
Replace with '(UInt128)c'
50: The expression is always the same as the first argument.
QUICKFIXES:
Replace with '(UInt128)'a''
51: The expression is always the same as the first argument.
QUICKFIXES:
Replace with 'n'
52: The expression is always the same as the first argument.
QUICKFIXES:
Replace with '0x01'
53: The expression is always the same as the first argument.
QUICKFIXES:
Replace with '0x01u'
54: The expression is always the same as the first argument.
QUICKFIXES:
Replace with '0x01L'
55: The expression is always the same as the first argument.
QUICKFIXES:
Replace with '0x01ul'
56: The expression is always the same as the first argument.
QUICKFIXES:
Replace with '1 + 1'
57: The expression is always the same as the first argument.
QUICKFIXES:
Replace with '1u + 1u'
58: The expression is always the same as the first argument.
QUICKFIXES:
Replace with '1L + 1L'
59: The expression is always the same as the first argument.
QUICKFIXES:
Replace with '1ul + 1ul'
60: The expression is always the same as the first argument.
QUICKFIXES:
Replace with 'c'
61: The expression is always the same as the first argument.
QUICKFIXES:
Replace with ''a''
62: The expression is always the same as the first argument.
QUICKFIXES:
Replace with 'n'
63: The expression is always the same as the first argument.
QUICKFIXES:
Replace with '(UInt128)0x01'
64: The expression is always the same as the first argument.
QUICKFIXES:
Replace with '(UInt128)0x01u'
65: The expression is always the same as the first argument.
QUICKFIXES:
Replace with '(UInt128)0x01L'
66: The expression is always the same as the first argument.
QUICKFIXES:
Replace with '(UInt128)0x01ul'
67: The expression is always the same as the first argument.
QUICKFIXES:
Replace with '(UInt128)(1 + 1)'
68: The expression is always the same as the first argument.
QUICKFIXES:
Replace with '(UInt128)(1u + 1u)'
69: The expression is always the same as the first argument.
QUICKFIXES:
Replace with '(UInt128)(1L + 1L)'
70: The expression is always the same as the first argument.
QUICKFIXES:
Replace with '(UInt128)(1ul + 1ul)'
71: The expression is always the same as the first argument.
QUICKFIXES:
Replace with '(UInt128)c'
72: The expression is always the same as the first argument.
QUICKFIXES:
Replace with '(UInt128)'a''
73: The expression is always the same as the first argument.
QUICKFIXES:
Replace with 'n'
74: The expression is always the same as the first argument.
QUICKFIXES:
Replace with '0x01'
75: The expression is always the same as the first argument.
QUICKFIXES:
Replace with '0x01u'
76: The expression is always the same as the first argument.
QUICKFIXES:
Replace with '0x01L'
77: The expression is always the same as the first argument.
QUICKFIXES:
Replace with '0x01ul'
78: The expression is always the same as the first argument.
QUICKFIXES:
Replace with '1 + 1'
79: The expression is always the same as the first argument.
QUICKFIXES:
Replace with '1u + 1u'
80: The expression is always the same as the first argument.
QUICKFIXES:
Replace with '1L + 1L'
81: The expression is always the same as the first argument.
QUICKFIXES:
Replace with '1ul + 1ul'
82: The expression is always the same as the first argument.
QUICKFIXES:
Replace with 'c'
83: The expression is always the same as the first argument.
QUICKFIXES:
Replace with ''a''
