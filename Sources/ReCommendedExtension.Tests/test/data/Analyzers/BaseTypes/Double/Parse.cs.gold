using System;
using System.Globalization;

namespace Test
{
    public class Doubles
    {
        public void RedundantArgument(string s, ReadOnlySpan<char> s1, ReadOnlySpan<byte> utf8Text, NumberStyles style, IFormatProvider provider)
        {
            var result11 = double.Parse(s, |NumberStyles.Float | NumberStyles.AllowThousands|(0));
            var result12 = double.Parse(s, |null|(1));
            var result13 = double.Parse(s, |NumberStyles.AllowLeadingSign | NumberStyles.AllowTrailingWhite | NumberStyles.AllowLeadingWhite | NumberStyles.AllowDecimalPoint | NumberStyles.AllowExponent | NumberStyles.AllowThousands|(2), provider);
            var result14 = double.Parse(s, style, |null|(3));
            var result15 = double.Parse(s, |NumberStyles.Float | NumberStyles.AllowThousands|(4), |null|(5));

            var result21 = double.Parse(s1, |null|(6));

            var result31 = double.Parse(utf8Text, |null|(7));
        }

        public void NoDetection(string s, ReadOnlySpan<char> s1, ReadOnlySpan<byte> utf8Text, NumberStyles style, IFormatProvider provider)
        {
            var result11 = double.Parse(s, style);
            var result12 = double.Parse(s, provider);
            var result13 = double.Parse(s, style, provider);

            var result21 = double.Parse(s1, provider);

            var result31 = double.Parse(utf8Text, provider);
        }
    }
}
---------------------------------------------------------
(0): ReSharper Dead Code: Passing NumberStyles.AllowThousands | NumberStyles.Float is redundant.
(1): ReSharper Dead Code: Passing null is redundant.
(2): ReSharper Dead Code: Passing NumberStyles.AllowThousands | NumberStyles.Float is redundant.
(3): ReSharper Dead Code: Passing null is redundant.
(4): ReSharper Dead Code: Passing NumberStyles.AllowThousands | NumberStyles.Float is redundant.
(5): ReSharper Dead Code: Passing null is redundant.
(6): ReSharper Dead Code: Passing null is redundant.
(7): ReSharper Dead Code: Passing null is redundant.
