using System;
using System.Globalization;

namespace Test
{
    public class DateTimes
    {
        public void ExpressionResult()
        {
            var result1 = |new DateTime(0)|(0);

            DateTime result2 = |new(0)|(1);
        }

        public void RedundantArgument(long ticks, DateOnly date, TimeOnly time, int year, int month, int day, int hour, int minute, int second, int millisecond, int microsecond, Calendar calendar, DateTimeKind kind)
        {
            var result11 = new DateTime(ticks, |DateTimeKind.Unspecified|(2));
            var result12 = new DateTime(date, time, |DateTimeKind.Unspecified|(3));
            var result13 = new DateTime(year, month, day, hour, minute, second, |DateTimeKind.Unspecified|(4));
            var result14 = new DateTime(year, month, day, hour, minute, second, |0|(5));
            var result15 = new DateTime(year, month, day, hour, minute, second, millisecond, |DateTimeKind.Unspecified|(6));
            var result16 = new DateTime(year, month, day, hour, minute, second, |0|(7), kind);
            var result17 = new DateTime(year, month, day, hour, minute, second, |0|(8), calendar);
            var result18 = new DateTime(year, month, day, hour, minute, second, millisecond, calendar, |DateTimeKind.Unspecified|(9));
            var result19 = new DateTime(year, month, day, hour, minute, second, millisecond, |0|(10));
            var result1A = new DateTime(year, month, day, hour, minute, second, millisecond, microsecond, |DateTimeKind.Unspecified|(11));
            var result1B = new DateTime(year, month, day, hour, minute, second, millisecond, |0|(12), kind);
            var result1C = new DateTime(year, month, day, hour, minute, second, millisecond, |0|(13), calendar);
            var result1D = new DateTime(year, month, day, hour, minute, second, millisecond, microsecond, calendar, |DateTimeKind.Unspecified|(14));
            var result1E = new DateTime(year, month, day, hour, minute, second, millisecond, |0|(15), calendar, kind);

            DateTime result21 = new(ticks, |DateTimeKind.Unspecified|(16));
            DateTime result22 = new(date, time, |DateTimeKind.Unspecified|(17));
            DateTime result23 = new(year, month, day, hour, minute, second, |DateTimeKind.Unspecified|(18));
            DateTime result24 = new(year, month, day, hour, minute, second, |0|(19));
            DateTime result25 = new(year, month, day, hour, minute, second, millisecond, |DateTimeKind.Unspecified|(20));
            DateTime result26 = new(year, month, day, hour, minute, second, |0|(21), kind);
            DateTime result27 = new(year, month, day, hour, minute, second, |0|(22), calendar);
            DateTime result28 = new(year, month, day, hour, minute, second, millisecond, calendar, |DateTimeKind.Unspecified|(23));
            DateTime result29 = new(year, month, day, hour, minute, second, millisecond, |0|(24));
            DateTime result2A = new(year, month, day, hour, minute, second, millisecond, microsecond, |DateTimeKind.Unspecified|(25));
            DateTime result2B = new(year, month, day, hour, minute, second, millisecond, |0|(26), kind);
            DateTime result2C = new(year, month, day, hour, minute, second, millisecond, |0|(27), calendar);
            DateTime result2D = new(year, month, day, hour, minute, second, millisecond, microsecond, calendar, |DateTimeKind.Unspecified|(28));
            DateTime result2E = new(year, month, day, hour, minute, second, millisecond, |0|(29), calendar, kind);
        }

        public void RedundantArgumentRange(int year, int month, int day, Calendar calendar)
        {
            var result11 = new DateTime(year, month, day, |0, 0, 0|(30));
            var result12 = new DateTime(year, month, day, |0, 0, 0|(31), calendar);

            DateTime result21 = new(year, month, day, |0, 0, 0|(32));
            DateTime result22 = new(year, month, day, |0, 0, 0|(33), calendar);
        }

        public void NoDetection(long ticks, DateOnly date, TimeOnly time, int year, int month, int day, int hour, int minute, int second, int millisecond, int microsecond, Calendar calendar, DateTimeKind kind)
        {
            var result11 = new DateTime(ticks, kind);
            var result12 = new DateTime(ticks, DateTimeKind.Utc);
            var result13 = new DateTime(ticks, DateTimeKind.Local);

            var result21 = new DateTime(date, time, kind);

            var result31 = new DateTime(year, month, day, hour, minute, second);
            var result32 = new DateTime(year, month, day, hour, minute, second, kind);
            var result33 = new DateTime(year, month, day, hour, minute, second, calendar);
            var result34 = new DateTime(year, month, day, hour, minute, second, millisecond);
            var result35 = new DateTime(year, month, day, hour, minute, second, millisecond, kind);
            var result36 = new DateTime(year, month, day, hour, minute, second, millisecond, calendar);
            var result37 = new DateTime(year, month, day, hour, minute, second, millisecond, calendar, kind);
            var result38 = new DateTime(year, month, day, hour, minute, second, millisecond, microsecond);
            var result39 = new DateTime(year, month, day, hour, minute, second, millisecond, microsecond, kind);
            var result3A = new DateTime(year, month, day, hour, minute, second, millisecond, microsecond, calendar);

            new DateTime(0);
        }
    }
}
---------------------------------------------------------
(0): ReSharper Suggestion: The expression is always DateTime.MinValue.
(1): ReSharper Suggestion: The expression is always DateTime.MinValue.
(2): ReSharper Dead Code: Passing DateTimeKind.Unspecified is redundant.
(3): ReSharper Dead Code: Passing DateTimeKind.Unspecified is redundant.
(4): ReSharper Dead Code: Passing DateTimeKind.Unspecified is redundant.
(5): ReSharper Dead Code: Passing 0 is redundant.
(6): ReSharper Dead Code: Passing DateTimeKind.Unspecified is redundant.
(7): ReSharper Dead Code: Passing 0 is redundant.
(8): ReSharper Dead Code: Passing 0 is redundant.
(9): ReSharper Dead Code: Passing DateTimeKind.Unspecified is redundant.
(10): ReSharper Dead Code: Passing 0 is redundant.
(11): ReSharper Dead Code: Passing DateTimeKind.Unspecified is redundant.
(12): ReSharper Dead Code: Passing 0 is redundant.
(13): ReSharper Dead Code: Passing 0 is redundant.
(14): ReSharper Dead Code: Passing DateTimeKind.Unspecified is redundant.
(15): ReSharper Dead Code: Passing 0 is redundant.
(16): ReSharper Dead Code: Passing DateTimeKind.Unspecified is redundant.
(17): ReSharper Dead Code: Passing DateTimeKind.Unspecified is redundant.
(18): ReSharper Dead Code: Passing DateTimeKind.Unspecified is redundant.
(19): ReSharper Dead Code: Passing 0 is redundant.
(20): ReSharper Dead Code: Passing DateTimeKind.Unspecified is redundant.
(21): ReSharper Dead Code: Passing 0 is redundant.
(22): ReSharper Dead Code: Passing 0 is redundant.
(23): ReSharper Dead Code: Passing DateTimeKind.Unspecified is redundant.
(24): ReSharper Dead Code: Passing 0 is redundant.
(25): ReSharper Dead Code: Passing DateTimeKind.Unspecified is redundant.
(26): ReSharper Dead Code: Passing 0 is redundant.
(27): ReSharper Dead Code: Passing 0 is redundant.
(28): ReSharper Dead Code: Passing DateTimeKind.Unspecified is redundant.
(29): ReSharper Dead Code: Passing 0 is redundant.
(30): ReSharper Dead Code: Passing '0, 0, 0' is redundant.
(31): ReSharper Dead Code: Passing '0, 0, 0' is redundant.
(32): ReSharper Dead Code: Passing '0, 0, 0' is redundant.
(33): ReSharper Dead Code: Passing '0, 0, 0' is redundant.
