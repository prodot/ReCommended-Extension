using System;
using System.Globalization;

namespace Test
{
    public class TimeSpans
    {
        public void OtherArgument(string input, string format, IFormatProvider formatProvider, TimeSpanStyles styles, out TimeSpan result)
        {
            var result11 = TimeSpan.TryParseExact(input, "c", |formatProvider|(0), out result);
            var result12 = TimeSpan.TryParseExact(input, "t", |formatProvider|(1), out result);
            var result13 = TimeSpan.TryParseExact(input, "T", |formatProvider|(2), out result);

            var result21 = TimeSpan.TryParseExact(input, "c", |formatProvider|(3), styles, out result);
            var result22 = TimeSpan.TryParseExact(input, "t", |formatProvider|(4), styles, out result);
            var result23 = TimeSpan.TryParseExact(input, "T", |formatProvider|(5), styles, out result);

            var result31 = TimeSpan.TryParseExact(input, |[format]|(6), formatProvider, out result);
            var result32 = TimeSpan.TryParseExact(input, |(string[])[format]|(7), formatProvider, out result);
            var result33 = TimeSpan.TryParseExact(input, |new[] { format }|(8), formatProvider, out result);
            var result34 = TimeSpan.TryParseExact(input, |new string[] { format }|(9), formatProvider, out result);

            var result41 = TimeSpan.TryParseExact(input, |[format]|(10), formatProvider, styles, out result);
            var result42 = TimeSpan.TryParseExact(input, |(string[])[format]|(11), formatProvider, styles, out result);
            var result43 = TimeSpan.TryParseExact(input, |new[] { format }|(12), formatProvider, styles, out result);
            var result44 = TimeSpan.TryParseExact(input, |new string[] { format }|(13), formatProvider, styles, out result);
        }

        public void RedundantArgument(string input, ReadOnlySpan<char> input2, string format, string[] formats, IFormatProvider formatProvider, out TimeSpan result)
        {
            var result1 = TimeSpan.TryParseExact(input, format, formatProvider, TimeSpanStyles.None, out result);
            var result2 = TimeSpan.TryParseExact(input, formats, formatProvider, TimeSpanStyles.None, out result);
            var result3 = TimeSpan.TryParseExact(input2, format, formatProvider, TimeSpanStyles.None, out result);
            var result4 = TimeSpan.TryParseExact(input2, formats, formatProvider, TimeSpanStyles.None, out result);
        }

        public void RedundantElement(string input, ReadOnlySpan<char> input2, IFormatProvider formatProvider, TimeSpanStyles styles, out TimeSpan result)
        {
            var result11 = TimeSpan.TryParseExact(input, ["c", |"t"|(14), |"T"|(15), "g", |"g"|(16)], formatProvider, out result);
            var result12 = TimeSpan.TryParseExact(input, (string[])["c", |"t"|(17), |"T"|(18), "g", |"g"|(19)], formatProvider, out result);
            var result13 = TimeSpan.TryParseExact(input, new[] { "c", |"t"|(20), |"T"|(21), "g", |"g"|(22) }, formatProvider, out result);
            var result14 = TimeSpan.TryParseExact(input, new string[] { "c", |"t"|(23), |"T"|(24), "g", |"g"|(25) }, formatProvider, out result);

            var result21 = TimeSpan.TryParseExact(input, ["c", |"t"|(26), |"T"|(27), "g", |"g"|(28)], formatProvider, styles, out result);
            var result22 = TimeSpan.TryParseExact(input, (string[])["c", |"t"|(29), |"T"|(30), "g", |"g"|(31)], formatProvider, styles, out result);
            var result23 = TimeSpan.TryParseExact(input, new[] { "c", |"t"|(32), |"T"|(33), "g", |"g"|(34) }, formatProvider, styles, out result);
            var result24 = TimeSpan.TryParseExact(input, new string[] { "c", |"t"|(35), |"T"|(36), "g", |"g"|(37) }, formatProvider, styles, out result);

            var result31 = TimeSpan.TryParseExact(input2, ["c", |"t"|(38), |"T"|(39), "g", |"g"|(40)], formatProvider, out result);
            var result32 = TimeSpan.TryParseExact(input2, (string[])["c", |"t"|(41), |"T"|(42), "g", |"g"|(43)], formatProvider, out result);
            var result33 = TimeSpan.TryParseExact(input2, new[] { "c", |"t"|(44), |"T"|(45), "g", |"g"|(46) }, formatProvider, out result);
            var result34 = TimeSpan.TryParseExact(input2, new string[] { "c", |"t"|(47), |"T"|(48), "g", |"g"|(49) }, formatProvider, out result);

            var result41 = TimeSpan.TryParseExact(input2, ["c", |"t"|(50), |"T"|(51), "g", |"g"|(52)], formatProvider, styles, out result);
            var result42 = TimeSpan.TryParseExact(input2, (string[])["c", |"t"|(53), |"T"|(54), "g", |"g"|(55)], formatProvider, styles, out result);
            var result43 = TimeSpan.TryParseExact(input2, new[] { "c", |"t"|(56), |"T"|(57), "g", |"g"|(58) }, formatProvider, styles, out result);
            var result44 = TimeSpan.TryParseExact(input2, new string[] { "c", |"t"|(59), |"T"|(60), "g", |"g"|(61) }, formatProvider, styles, out result);
        }

        public void NoDetection(string input, ReadOnlySpan<char> input2, string format, string[] formats, IFormatProvider formatProvider, TimeSpanStyles styles, out TimeSpan result)
        {
            var result11 = TimeSpan.TryParseExact(input, "c", null, out result);
            var result12 = TimeSpan.TryParseExact(input, "t", null, out result);
            var result13 = TimeSpan.TryParseExact(input, "T", null, out result);

            var result21 = TimeSpan.TryParseExact(input, format, formatProvider, styles, out result);
            var result22 = TimeSpan.TryParseExact(input, format, formatProvider, TimeSpanStyles.AssumeNegative, out result);
            var result23 = TimeSpan.TryParseExact(input, formats, formatProvider, styles, out result);
            var result24 = TimeSpan.TryParseExact(input, formats, formatProvider, TimeSpanStyles.AssumeNegative, out result);

            var result31 = TimeSpan.TryParseExact(input2, format, formatProvider, styles, out result);
            var result32 = TimeSpan.TryParseExact(input2, format, formatProvider, TimeSpanStyles.AssumeNegative, out result);
            var result33 = TimeSpan.TryParseExact(input2, formats, formatProvider, styles, out result);
            var result34 = TimeSpan.TryParseExact(input2, formats, formatProvider, TimeSpanStyles.AssumeNegative, out result);

            var result41 = TimeSpan.TryParseExact(input, "c", null, styles, out result);
            var result42 = TimeSpan.TryParseExact(input, "t", null, styles, out result);
            var result43 = TimeSpan.TryParseExact(input, "T", null, styles, out result);

            var result51 = TimeSpan.TryParseExact(input, "c", null, TimeSpanStyles.AssumeNegative, out result);
            var result52 = TimeSpan.TryParseExact(input, "t", null, TimeSpanStyles.AssumeNegative, out result);
            var result53 = TimeSpan.TryParseExact(input, "T", null, TimeSpanStyles.AssumeNegative, out result);

            var result61 = TimeSpan.TryParseExact(input, [format, format], formatProvider, out result);
            var result62 = TimeSpan.TryParseExact(input, (string[])[format, format], formatProvider, out result);
            var result63 = TimeSpan.TryParseExact(input, new[] { format, format }, formatProvider, out result);
            var result64 = TimeSpan.TryParseExact(input, new string[] { format, format }, formatProvider, out result);

            var result71 = TimeSpan.TryParseExact(input, [format, format], formatProvider, styles, out result);
            var result72 = TimeSpan.TryParseExact(input, (string[])[format, format], formatProvider, styles, out result);
            var result73 = TimeSpan.TryParseExact(input, new[] { format, format }, formatProvider, styles, out result);
            var result74 = TimeSpan.TryParseExact(input, new string[] { format, format }, formatProvider, styles, out result);

            var result81 = TimeSpan.TryParseExact(input, ["c", "g", "G"], formatProvider, out result);
            var result82 = TimeSpan.TryParseExact(input, (string[])["c", "g", "G"], formatProvider, out result);
            var result83 = TimeSpan.TryParseExact(input, new[] { "c", "g", "G" }, formatProvider, out result);
            var result84 = TimeSpan.TryParseExact(input, new string[] { "c", "g", "G" }, formatProvider, out result);

            var result91 = TimeSpan.TryParseExact(input, ["c", "g", "G"], formatProvider, styles, out result);
            var result92 = TimeSpan.TryParseExact(input, (string[])["c", "g", "G"], formatProvider, styles, out result);
            var result93 = TimeSpan.TryParseExact(input, new[] { "c", "g", "G" }, formatProvider, styles, out result);
            var result94 = TimeSpan.TryParseExact(input, new string[] { "c", "g", "G" }, formatProvider, styles, out result);

            var resultS1 = TimeSpan.TryParseExact(input2, ["c", "g", "G"], formatProvider, out result);
            var resultS2 = TimeSpan.TryParseExact(input2, (string[])["c", "g", "G"], formatProvider, out result);
            var resultS3 = TimeSpan.TryParseExact(input2, new[] { "c", "g", "G" }, formatProvider, out result);
            var resultS4 = TimeSpan.TryParseExact(input2, new string[] { "c", "g", "G" }, formatProvider, out result);

            var resultB1 = TimeSpan.TryParseExact(input2, ["c", "g", "G"], formatProvider, styles, out result);
            var resultB2 = TimeSpan.TryParseExact(input2, (string[])["c", "g", "G"], formatProvider, styles, out result);
            var resultB3 = TimeSpan.TryParseExact(input2, new[] { "c", "g", "G" }, formatProvider, styles, out result);
            var resultB4 = TimeSpan.TryParseExact(input2, new string[] { "c", "g", "G" }, formatProvider, styles, out result);
        }
    }
}
---------------------------------------------------------
(0): ReSharper Suggestion: The format provider is ignored (pass null instead).
(1): ReSharper Suggestion: The format provider is ignored (pass null instead).
(2): ReSharper Suggestion: The format provider is ignored (pass null instead).
(3): ReSharper Suggestion: The format provider is ignored (pass null instead).
(4): ReSharper Suggestion: The format provider is ignored (pass null instead).
(5): ReSharper Suggestion: The format provider is ignored (pass null instead).
(6): ReSharper Suggestion: The only collection element should be passed directly.
(7): ReSharper Suggestion: The only collection element should be passed directly.
(8): ReSharper Suggestion: The only collection element should be passed directly.
(9): ReSharper Suggestion: The only collection element should be passed directly.
(10): ReSharper Suggestion: The only collection element should be passed directly.
(11): ReSharper Suggestion: The only collection element should be passed directly.
(12): ReSharper Suggestion: The only collection element should be passed directly.
(13): ReSharper Suggestion: The only collection element should be passed directly.
(14): ReSharper Dead Code: The equivalent string is already passed.
(15): ReSharper Dead Code: The equivalent string is already passed.
(16): ReSharper Dead Code: The string is already passed.
(17): ReSharper Dead Code: The equivalent string is already passed.
(18): ReSharper Dead Code: The equivalent string is already passed.
(19): ReSharper Dead Code: The string is already passed.
(20): ReSharper Dead Code: The equivalent string is already passed.
(21): ReSharper Dead Code: The equivalent string is already passed.
(22): ReSharper Dead Code: The string is already passed.
(23): ReSharper Dead Code: The equivalent string is already passed.
(24): ReSharper Dead Code: The equivalent string is already passed.
(25): ReSharper Dead Code: The string is already passed.
(26): ReSharper Dead Code: The equivalent string is already passed.
(27): ReSharper Dead Code: The equivalent string is already passed.
(28): ReSharper Dead Code: The string is already passed.
(29): ReSharper Dead Code: The equivalent string is already passed.
(30): ReSharper Dead Code: The equivalent string is already passed.
(31): ReSharper Dead Code: The string is already passed.
(32): ReSharper Dead Code: The equivalent string is already passed.
(33): ReSharper Dead Code: The equivalent string is already passed.
(34): ReSharper Dead Code: The string is already passed.
(35): ReSharper Dead Code: The equivalent string is already passed.
(36): ReSharper Dead Code: The equivalent string is already passed.
(37): ReSharper Dead Code: The string is already passed.
(38): ReSharper Dead Code: The equivalent string is already passed.
(39): ReSharper Dead Code: The equivalent string is already passed.
(40): ReSharper Dead Code: The string is already passed.
(41): ReSharper Dead Code: The equivalent string is already passed.
(42): ReSharper Dead Code: The equivalent string is already passed.
(43): ReSharper Dead Code: The string is already passed.
(44): ReSharper Dead Code: The equivalent string is already passed.
(45): ReSharper Dead Code: The equivalent string is already passed.
(46): ReSharper Dead Code: The string is already passed.
(47): ReSharper Dead Code: The equivalent string is already passed.
(48): ReSharper Dead Code: The equivalent string is already passed.
(49): ReSharper Dead Code: The string is already passed.
(50): ReSharper Dead Code: The equivalent string is already passed.
(51): ReSharper Dead Code: The equivalent string is already passed.
(52): ReSharper Dead Code: The string is already passed.
(53): ReSharper Dead Code: The equivalent string is already passed.
(54): ReSharper Dead Code: The equivalent string is already passed.
(55): ReSharper Dead Code: The string is already passed.
(56): ReSharper Dead Code: The equivalent string is already passed.
(57): ReSharper Dead Code: The equivalent string is already passed.
(58): ReSharper Dead Code: The string is already passed.
(59): ReSharper Dead Code: The equivalent string is already passed.
(60): ReSharper Dead Code: The equivalent string is already passed.
(61): ReSharper Dead Code: The string is already passed.
