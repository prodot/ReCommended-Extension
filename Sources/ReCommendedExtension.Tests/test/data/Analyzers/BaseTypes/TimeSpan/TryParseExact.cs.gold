using System;
using System.Globalization;

namespace Test
{
    public class TimeSpans
    {
        public void OtherArgument(string input, string format, IFormatProvider formatProvider, TimeSpanStyles styles, out TimeSpan result)
        {
            var result11 = TimeSpan.TryParseExact(input, "c", |formatProvider|(0), out result);
            var result12 = TimeSpan.TryParseExact(input, "t", |formatProvider|(1), out result);
            var result13 = TimeSpan.TryParseExact(input, "T", |formatProvider|(2), out result);

            var result21 = TimeSpan.TryParseExact(input, "c", |formatProvider|(3), styles, out result);
            var result22 = TimeSpan.TryParseExact(input, "t", |formatProvider|(4), styles, out result);
            var result23 = TimeSpan.TryParseExact(input, "T", |formatProvider|(5), styles, out result);

            var result31 = TimeSpan.TryParseExact(input, |[format]|(6), formatProvider, out result);
            var result32 = TimeSpan.TryParseExact(input, |(string[])[format]|(7), formatProvider, out result);
            var result33 = TimeSpan.TryParseExact(input, |new[] { format }|(8), formatProvider, out result);
            var result34 = TimeSpan.TryParseExact(input, |new string[] { format }|(9), formatProvider, out result);

            var result41 = TimeSpan.TryParseExact(input, |[format]|(10), formatProvider, styles, out result);
            var result42 = TimeSpan.TryParseExact(input, |(string[])[format]|(11), formatProvider, styles, out result);
            var result43 = TimeSpan.TryParseExact(input, |new[] { format }|(12), formatProvider, styles, out result);
            var result44 = TimeSpan.TryParseExact(input, |new string[] { format }|(13), formatProvider, styles, out result);
        }

        public void RedundantArgument(string input, ReadOnlySpan<char> input2, string format, string[] formats, IFormatProvider formatProvider, out TimeSpan result)
        {
            var result1 = TimeSpan.TryParseExact(input, format, formatProvider, |TimeSpanStyles.None|(14), out result);
            var result2 = TimeSpan.TryParseExact(input, formats, formatProvider, |TimeSpanStyles.None|(15), out result);
            var result3 = TimeSpan.TryParseExact(input2, format, formatProvider, |TimeSpanStyles.None|(16), out result);
            var result4 = TimeSpan.TryParseExact(input2, formats, formatProvider, |TimeSpanStyles.None|(17), out result);
        }

        public void RedundantElement(string input, ReadOnlySpan<char> input2, IFormatProvider formatProvider, TimeSpanStyles styles, out TimeSpan result)
        {
            var result11 = TimeSpan.TryParseExact(input, ["c", |"t"|(18), |"T"|(19), "g", |"g"|(20)], formatProvider, out result);
            var result12 = TimeSpan.TryParseExact(input, (string[])["c", |"t"|(21), |"T"|(22), "g", |"g"|(23)], formatProvider, out result);
            var result13 = TimeSpan.TryParseExact(input, new[] { "c", |"t"|(24), |"T"|(25), "g", |"g"|(26) }, formatProvider, out result);
            var result14 = TimeSpan.TryParseExact(input, new string[] { "c", |"t"|(27), |"T"|(28), "g", |"g"|(29) }, formatProvider, out result);

            var result21 = TimeSpan.TryParseExact(input, ["c", |"t"|(30), |"T"|(31), "g", |"g"|(32)], formatProvider, styles, out result);
            var result22 = TimeSpan.TryParseExact(input, (string[])["c", |"t"|(33), |"T"|(34), "g", |"g"|(35)], formatProvider, styles, out result);
            var result23 = TimeSpan.TryParseExact(input, new[] { "c", |"t"|(36), |"T"|(37), "g", |"g"|(38) }, formatProvider, styles, out result);
            var result24 = TimeSpan.TryParseExact(input, new string[] { "c", |"t"|(39), |"T"|(40), "g", |"g"|(41) }, formatProvider, styles, out result);

            var result31 = TimeSpan.TryParseExact(input2, ["c", |"t"|(42), |"T"|(43), "g", |"g"|(44)], formatProvider, out result);
            var result32 = TimeSpan.TryParseExact(input2, (string[])["c", |"t"|(45), |"T"|(46), "g", |"g"|(47)], formatProvider, out result);
            var result33 = TimeSpan.TryParseExact(input2, new[] { "c", |"t"|(48), |"T"|(49), "g", |"g"|(50) }, formatProvider, out result);
            var result34 = TimeSpan.TryParseExact(input2, new string[] { "c", |"t"|(51), |"T"|(52), "g", |"g"|(53) }, formatProvider, out result);

            var result41 = TimeSpan.TryParseExact(input2, ["c", |"t"|(54), |"T"|(55), "g", |"g"|(56)], formatProvider, styles, out result);
            var result42 = TimeSpan.TryParseExact(input2, (string[])["c", |"t"|(57), |"T"|(58), "g", |"g"|(59)], formatProvider, styles, out result);
            var result43 = TimeSpan.TryParseExact(input2, new[] { "c", |"t"|(60), |"T"|(61), "g", |"g"|(62) }, formatProvider, styles, out result);
            var result44 = TimeSpan.TryParseExact(input2, new string[] { "c", |"t"|(63), |"T"|(64), "g", |"g"|(65) }, formatProvider, styles, out result);
        }

        public void NoDetection(string input, ReadOnlySpan<char> input2, string format, string[] formats, IFormatProvider formatProvider, TimeSpanStyles styles, out TimeSpan result)
        {
            var result11 = TimeSpan.TryParseExact(input, "c", null, out result);
            var result12 = TimeSpan.TryParseExact(input, "t", null, out result);
            var result13 = TimeSpan.TryParseExact(input, "T", null, out result);

            var result21 = TimeSpan.TryParseExact(input, format, formatProvider, styles, out result);
            var result22 = TimeSpan.TryParseExact(input, format, formatProvider, TimeSpanStyles.AssumeNegative, out result);
            var result23 = TimeSpan.TryParseExact(input, formats, formatProvider, styles, out result);
            var result24 = TimeSpan.TryParseExact(input, formats, formatProvider, TimeSpanStyles.AssumeNegative, out result);

            var result31 = TimeSpan.TryParseExact(input2, format, formatProvider, styles, out result);
            var result32 = TimeSpan.TryParseExact(input2, format, formatProvider, TimeSpanStyles.AssumeNegative, out result);
            var result33 = TimeSpan.TryParseExact(input2, formats, formatProvider, styles, out result);
            var result34 = TimeSpan.TryParseExact(input2, formats, formatProvider, TimeSpanStyles.AssumeNegative, out result);

            var result41 = TimeSpan.TryParseExact(input, "c", null, styles, out result);
            var result42 = TimeSpan.TryParseExact(input, "t", null, styles, out result);
            var result43 = TimeSpan.TryParseExact(input, "T", null, styles, out result);

            var result51 = TimeSpan.TryParseExact(input, "c", null, TimeSpanStyles.AssumeNegative, out result);
            var result52 = TimeSpan.TryParseExact(input, "t", null, TimeSpanStyles.AssumeNegative, out result);
            var result53 = TimeSpan.TryParseExact(input, "T", null, TimeSpanStyles.AssumeNegative, out result);

            var result61 = TimeSpan.TryParseExact(input, [format, format], formatProvider, out result);
            var result62 = TimeSpan.TryParseExact(input, (string[])[format, format], formatProvider, out result);
            var result63 = TimeSpan.TryParseExact(input, new[] { format, format }, formatProvider, out result);
            var result64 = TimeSpan.TryParseExact(input, new string[] { format, format }, formatProvider, out result);

            var result71 = TimeSpan.TryParseExact(input, [format, format], formatProvider, styles, out result);
            var result72 = TimeSpan.TryParseExact(input, (string[])[format, format], formatProvider, styles, out result);
            var result73 = TimeSpan.TryParseExact(input, new[] { format, format }, formatProvider, styles, out result);
            var result74 = TimeSpan.TryParseExact(input, new string[] { format, format }, formatProvider, styles, out result);

            var result81 = TimeSpan.TryParseExact(input, ["c", "g", "G"], formatProvider, out result);
            var result82 = TimeSpan.TryParseExact(input, (string[])["c", "g", "G"], formatProvider, out result);
            var result83 = TimeSpan.TryParseExact(input, new[] { "c", "g", "G" }, formatProvider, out result);
            var result84 = TimeSpan.TryParseExact(input, new string[] { "c", "g", "G" }, formatProvider, out result);

            var result91 = TimeSpan.TryParseExact(input, ["c", "g", "G"], formatProvider, styles, out result);
            var result92 = TimeSpan.TryParseExact(input, (string[])["c", "g", "G"], formatProvider, styles, out result);
            var result93 = TimeSpan.TryParseExact(input, new[] { "c", "g", "G" }, formatProvider, styles, out result);
            var result94 = TimeSpan.TryParseExact(input, new string[] { "c", "g", "G" }, formatProvider, styles, out result);

            var resultS1 = TimeSpan.TryParseExact(input2, ["c", "g", "G"], formatProvider, out result);
            var resultS2 = TimeSpan.TryParseExact(input2, (string[])["c", "g", "G"], formatProvider, out result);
            var resultS3 = TimeSpan.TryParseExact(input2, new[] { "c", "g", "G" }, formatProvider, out result);
            var resultS4 = TimeSpan.TryParseExact(input2, new string[] { "c", "g", "G" }, formatProvider, out result);

            var resultB1 = TimeSpan.TryParseExact(input2, ["c", "g", "G"], formatProvider, styles, out result);
            var resultB2 = TimeSpan.TryParseExact(input2, (string[])["c", "g", "G"], formatProvider, styles, out result);
            var resultB3 = TimeSpan.TryParseExact(input2, new[] { "c", "g", "G" }, formatProvider, styles, out result);
            var resultB4 = TimeSpan.TryParseExact(input2, new string[] { "c", "g", "G" }, formatProvider, styles, out result);
        }
    }
}
---------------------------------------------------------
(0): ReSharper Suggestion: The format provider is ignored (pass null instead).
(1): ReSharper Suggestion: The format provider is ignored (pass null instead).
(2): ReSharper Suggestion: The format provider is ignored (pass null instead).
(3): ReSharper Suggestion: The format provider is ignored (pass null instead).
(4): ReSharper Suggestion: The format provider is ignored (pass null instead).
(5): ReSharper Suggestion: The format provider is ignored (pass null instead).
(6): ReSharper Suggestion: The only collection element should be passed directly.
(7): ReSharper Suggestion: The only collection element should be passed directly.
(8): ReSharper Suggestion: The only collection element should be passed directly.
(9): ReSharper Suggestion: The only collection element should be passed directly.
(10): ReSharper Suggestion: The only collection element should be passed directly.
(11): ReSharper Suggestion: The only collection element should be passed directly.
(12): ReSharper Suggestion: The only collection element should be passed directly.
(13): ReSharper Suggestion: The only collection element should be passed directly.
(14): ReSharper Dead Code: Passing TimeSpanStyles.None is redundant.
(15): ReSharper Dead Code: Passing TimeSpanStyles.None is redundant.
(16): ReSharper Dead Code: Passing TimeSpanStyles.None is redundant.
(17): ReSharper Dead Code: Passing TimeSpanStyles.None is redundant.
(18): ReSharper Dead Code: The equivalent string is already passed.
(19): ReSharper Dead Code: The equivalent string is already passed.
(20): ReSharper Dead Code: The string is already passed.
(21): ReSharper Dead Code: The equivalent string is already passed.
(22): ReSharper Dead Code: The equivalent string is already passed.
(23): ReSharper Dead Code: The string is already passed.
(24): ReSharper Dead Code: The equivalent string is already passed.
(25): ReSharper Dead Code: The equivalent string is already passed.
(26): ReSharper Dead Code: The string is already passed.
(27): ReSharper Dead Code: The equivalent string is already passed.
(28): ReSharper Dead Code: The equivalent string is already passed.
(29): ReSharper Dead Code: The string is already passed.
(30): ReSharper Dead Code: The equivalent string is already passed.
(31): ReSharper Dead Code: The equivalent string is already passed.
(32): ReSharper Dead Code: The string is already passed.
(33): ReSharper Dead Code: The equivalent string is already passed.
(34): ReSharper Dead Code: The equivalent string is already passed.
(35): ReSharper Dead Code: The string is already passed.
(36): ReSharper Dead Code: The equivalent string is already passed.
(37): ReSharper Dead Code: The equivalent string is already passed.
(38): ReSharper Dead Code: The string is already passed.
(39): ReSharper Dead Code: The equivalent string is already passed.
(40): ReSharper Dead Code: The equivalent string is already passed.
(41): ReSharper Dead Code: The string is already passed.
(42): ReSharper Dead Code: The equivalent string is already passed.
(43): ReSharper Dead Code: The equivalent string is already passed.
(44): ReSharper Dead Code: The string is already passed.
(45): ReSharper Dead Code: The equivalent string is already passed.
(46): ReSharper Dead Code: The equivalent string is already passed.
(47): ReSharper Dead Code: The string is already passed.
(48): ReSharper Dead Code: The equivalent string is already passed.
(49): ReSharper Dead Code: The equivalent string is already passed.
(50): ReSharper Dead Code: The string is already passed.
(51): ReSharper Dead Code: The equivalent string is already passed.
(52): ReSharper Dead Code: The equivalent string is already passed.
(53): ReSharper Dead Code: The string is already passed.
(54): ReSharper Dead Code: The equivalent string is already passed.
(55): ReSharper Dead Code: The equivalent string is already passed.
(56): ReSharper Dead Code: The string is already passed.
(57): ReSharper Dead Code: The equivalent string is already passed.
(58): ReSharper Dead Code: The equivalent string is already passed.
(59): ReSharper Dead Code: The string is already passed.
(60): ReSharper Dead Code: The equivalent string is already passed.
(61): ReSharper Dead Code: The equivalent string is already passed.
(62): ReSharper Dead Code: The string is already passed.
(63): ReSharper Dead Code: The equivalent string is already passed.
(64): ReSharper Dead Code: The equivalent string is already passed.
(65): ReSharper Dead Code: The string is already passed.
