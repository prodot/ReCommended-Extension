using System;

namespace Test
{
    public class Decimals
    {
        public void Clamp(decimal number)
        {
            const int c = 1;

            var result11 = |decimal.Clamp(number, 1, 1uL)|(0);
            var result12 = |decimal.Clamp(number, 1, 1u)|(1);
            var result13 = |decimal.Clamp(number, 1, 1L)|(2);
            var result14 = |decimal.Clamp(number, 1, c)|(3);
            var result15 = |decimal.Clamp(number, 97, 'a')|(4);

            decimal result21 = |decimal.Clamp(number, 1, 1uL)|(5);
            decimal result22 = |decimal.Clamp(number, 1, 1u)|(6);
            decimal result23 = |decimal.Clamp(number, 1, 1L)|(7);
            decimal result24 = |decimal.Clamp(number, 1, c)|(8);
            decimal result25 = |decimal.Clamp(number, 97, 'a')|(9);

            var result31 = |decimal.Clamp(number, decimal.MinValue, decimal.MaxValue)|(10);
            var result32 = |decimal.Clamp(1, decimal.MinValue, decimal.MaxValue)|(11);
            var result33 = |decimal.Clamp(1uL, decimal.MinValue, decimal.MaxValue)|(12);
            var result34 = |decimal.Clamp(1L, decimal.MinValue, decimal.MaxValue)|(13);
            var result35 = |decimal.Clamp(1u, decimal.MinValue, decimal.MaxValue)|(14);
            var result36 = |decimal.Clamp(c, decimal.MinValue, decimal.MaxValue)|(15);
            var result37 = |decimal.Clamp('a', decimal.MinValue, decimal.MaxValue)|(16);

            decimal result41 = |decimal.Clamp(number, decimal.MinValue, decimal.MaxValue)|(17);
            decimal result42 = |decimal.Clamp(1, decimal.MinValue, decimal.MaxValue)|(18);
            decimal result43 = |decimal.Clamp(1uL, decimal.MinValue, decimal.MaxValue)|(19);
            decimal result44 = |decimal.Clamp(1L, decimal.MinValue, decimal.MaxValue)|(20);
            decimal result45 = |decimal.Clamp(1u, decimal.MinValue, decimal.MaxValue)|(21);
            decimal result46 = |decimal.Clamp(c, decimal.MinValue, decimal.MaxValue)|(22);
            decimal result47 = |decimal.Clamp('a', decimal.MinValue, decimal.MaxValue)|(23);

            var result51 = |Math.Clamp(number, 1m, 1m)|(24);
            var result52 = |Math.Clamp(number, decimal.MinValue, decimal.MaxValue)|(25);
        }

        public void Equals(decimal number)
        {
            var result = |number.Equals(null)|(26);
        }
    }
}
------------------------------------------------
0: The expression is always 1.
QUICKFIXES:
Replace with '1m'
1: The expression is always 1.
QUICKFIXES:
Replace with '1m'
2: The expression is always 1.
QUICKFIXES:
Replace with '1m'
3: The expression is always 1.
QUICKFIXES:
Replace with '(decimal)c'
Replace with '1m'
4: The expression is always 97.
QUICKFIXES:
Replace with '(decimal)'a''
Replace with '97m'
5: The expression is always 1.
QUICKFIXES:
Replace with '1uL'
Replace with '1'
6: The expression is always 1.
QUICKFIXES:
Replace with '1u'
Replace with '1'
7: The expression is always 1.
QUICKFIXES:
Replace with '1L'
Replace with '1'
8: The expression is always 1.
QUICKFIXES:
Replace with 'c'
Replace with '1'
9: The expression is always 97.
QUICKFIXES:
Replace with ''a''
Replace with '97'
10: The expression is always the same as the first argument.
QUICKFIXES:
Replace with 'number'
11: The expression is always the same as the first argument.
QUICKFIXES:
Replace with '1m'
12: The expression is always the same as the first argument.
QUICKFIXES:
Replace with '1m'
13: The expression is always the same as the first argument.
QUICKFIXES:
Replace with '1m'
14: The expression is always the same as the first argument.
QUICKFIXES:
Replace with '1m'
15: The expression is always the same as the first argument.
QUICKFIXES:
Replace with '(decimal)c'
16: The expression is always the same as the first argument.
QUICKFIXES:
Replace with '(decimal)'a''
17: The expression is always the same as the first argument.
QUICKFIXES:
Replace with 'number'
18: The expression is always the same as the first argument.
QUICKFIXES:
Replace with '1'
19: The expression is always the same as the first argument.
QUICKFIXES:
Replace with '1uL'
20: The expression is always the same as the first argument.
QUICKFIXES:
Replace with '1L'
21: The expression is always the same as the first argument.
QUICKFIXES:
Replace with '1u'
22: The expression is always the same as the first argument.
QUICKFIXES:
Replace with 'c'
23: The expression is always the same as the first argument.
QUICKFIXES:
Replace with ''a''
24: The expression is always 1.
QUICKFIXES:
Replace with '1m'
25: The expression is always the same as the first argument.
QUICKFIXES:
Replace with 'number'
26: The expression is always false.
QUICKFIXES:
Replace with 'false'
