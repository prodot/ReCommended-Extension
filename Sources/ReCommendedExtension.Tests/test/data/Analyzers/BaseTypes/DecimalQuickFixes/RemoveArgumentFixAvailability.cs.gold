using System;
using System.Globalization;

namespace Test
{
    public class Decimals
    {
        public void Parse(string s, ReadOnlySpan<char> s1, ReadOnlySpan<byte> utf8Text, NumberStyles style, IFormatProvider provider)
        {
            var result11 = decimal.Parse(s, |NumberStyles.Number|(0));
            var result12 = decimal.Parse(s, |null|(1));
            var result13 = decimal.Parse(s, |NumberStyles.AllowLeadingSign | NumberStyles.AllowTrailingWhite | NumberStyles.AllowLeadingWhite | NumberStyles.AllowTrailingSign | NumberStyles.AllowDecimalPoint | NumberStyles.AllowThousands|(2), provider);
            var result14 = decimal.Parse(s, style, |null|(3));
            var result15 = decimal.Parse(s, |NumberStyles.Number|(4), |null|(5));

            var result21 = decimal.Parse(s1, |null|(6));

            var result31 = decimal.Parse(utf8Text, |null|(7));
        }

        public void ToString(byte number, string format, IFormatProvider provider)
        {
            var result1 = number.ToString(|null as string|(8));
            var result2 = number.ToString(|""|(9));
            var result3 = number.ToString(|null as IFormatProvider|(10));
            var result4 = number.ToString(|null|(11), provider);
            var result5 = number.ToString(|""|(12), provider);
            var result6 = number.ToString(format, |null|(13));
            var result7 = number.ToString(|""|(14), |null|(15));
        }

        public void TryParse(string s, ReadOnlySpan<char> s1, ReadOnlySpan<byte> utf8Text, NumberStyles style, IFormatProvider provider)
        {
            var result11 = decimal.TryParse(s, |NumberStyles.Number|(16), provider, out _);
            var result12 = decimal.TryParse(s, |null|(17), out _);

            var result21 = decimal.TryParse(s1, |NumberStyles.Number|(18), provider, out _);
            var result22 = decimal.TryParse(s1, |null|(19), out _);

            var result31 = decimal.TryParse(utf8Text, |NumberStyles.Number|(20), provider, out _);
            var result32 = decimal.TryParse(utf8Text, |null|(21), out _);
        }
    }
}
------------------------------------------------
0: Passing NumberStyles.Number is redundant.
QUICKFIXES:
Remove argument
1: Passing null is redundant.
QUICKFIXES:
Remove argument
2: Passing NumberStyles.Number is redundant.
QUICKFIXES:
Remove argument
3: Passing null is redundant.
QUICKFIXES:
Remove argument
4: Passing NumberStyles.Number is redundant.
QUICKFIXES:
Remove argument
5: Passing null is redundant.
QUICKFIXES:
Remove argument
6: Passing null is redundant.
QUICKFIXES:
Remove argument
7: Passing null is redundant.
QUICKFIXES:
Remove argument
8: Passing null or an empty string is redundant.
QUICKFIXES:
Remove argument
9: Passing null or an empty string is redundant.
QUICKFIXES:
Remove argument
10: Passing null is redundant.
QUICKFIXES:
Remove argument
11: Passing null or an empty string is redundant.
QUICKFIXES:
Remove argument
12: Passing null or an empty string is redundant.
QUICKFIXES:
Remove argument
13: Passing null is redundant.
QUICKFIXES:
Remove argument
14: Passing null or an empty string is redundant.
QUICKFIXES:
Remove argument
15: Passing null is redundant.
QUICKFIXES:
Remove argument
16: Passing NumberStyles.Number is redundant.
QUICKFIXES:
Remove argument
17: Passing null is redundant.
QUICKFIXES:
Remove argument
18: Passing NumberStyles.Number is redundant.
QUICKFIXES:
Remove argument
19: Passing null is redundant.
QUICKFIXES:
Remove argument
20: Passing NumberStyles.Number is redundant.
QUICKFIXES:
Remove argument
21: Passing null is redundant.
QUICKFIXES:
Remove argument
