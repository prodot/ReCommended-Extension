using System;

namespace Test
{
    public class Guids
    {
        public void Parse(string s, ReadOnlySpan<char> s1, IFormatProvider provider)
        {
            var result1 = Guid.Parse(s, |provider|(0));
            var result2 = Guid.Parse(s1, |provider|(1));
        }

        public void ToString(Guid guid, string format, IFormatProvider provider)
        {
            var result11 = guid.ToString(|null|(2));
            var result12 = guid.ToString(|""|(3));
            var result13 = guid.ToString(|"D"|(4));
            var result14 = guid.ToString(|"d"|(5));

            var result21 = guid.ToString(format, |provider|(6));
        }

        public void TryParse(string s, ReadOnlySpan<char> s1, IFormatProvider provider, out Guid result)
        {
            var result1 = Guid.TryParse(s, |provider|(7), out result);
            var result2 = Guid.TryParse(s1, |provider|(8), out result);
        }
    }
}
------------------------------------------------
0: Passing a format provider is redundant.
QUICKFIXES:
Remove argument
1: Passing a format provider is redundant.
QUICKFIXES:
Remove argument
2: Passing null or an empty string is redundant.
QUICKFIXES:
Remove argument
3: Passing null or an empty string is redundant.
QUICKFIXES:
Remove argument
4: Passing "D" is redundant.
QUICKFIXES:
Remove argument
5: Passing "d" is redundant.
QUICKFIXES:
Remove argument
6: Passing a format provider is redundant.
QUICKFIXES:
Remove argument
7: Passing a format provider is redundant.
QUICKFIXES:
Remove argument
8: Passing a format provider is redundant.
QUICKFIXES:
Remove argument
