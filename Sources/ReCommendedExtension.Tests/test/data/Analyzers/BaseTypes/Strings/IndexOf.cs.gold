using System;

namespace Test
{
    public class Strings
    {
        public void Comparison(string text, char c, string s, StringComparison comparisonType)
        {
            var result11 = text.|IndexOf(c) == 0|(0);
            var result12 = text.|IndexOf('a') == 0|(1);

            var result21 = text.|IndexOf(c) != 0|(2);
            var result22 = text.|IndexOf('a') != 0|(3);
            var result23 = text.|IndexOf(c) > -1|(4);
            var result24 = text.|IndexOf(c) != -1|(5);
            var result25 = text.|IndexOf(c) >= 0|(6);

            var result31 = text.|IndexOf(c) == -1|(7);
            var result32 = text.|IndexOf(c) < 0|(8);

            var result41 = text.|IndexOf(c, comparisonType) > -1|(9);
            var result42 = text.|IndexOf(c, comparisonType) != -1|(10);
            var result43 = text.|IndexOf(c, comparisonType) >= 0|(11);
            var result44 = text.|IndexOf(c, comparisonType) == -1|(12);
            var result45 = text.|IndexOf(c, comparisonType) < 0|(13);

            var result51 = text.|IndexOf(s) == 0|(14);
            var result52 = text.|IndexOf(s) != 0|(15);

            var result61 = text.|IndexOf(s) > -1|(16);
            var result62 = text.|IndexOf(s) != -1|(17);
            var result63 = text.|IndexOf(s) >= 0|(18);
            var result64 = text.|IndexOf(s) == -1|(19);
            var result65 = text.|IndexOf(s) < 0|(20);

            var result71 = text.|IndexOf(s, comparisonType) == 0|(21);
            var result72 = text.|IndexOf(s, comparisonType) != 0|(22);

            var result81 = text.|IndexOf(s, comparisonType) > -1|(23);
            var result82 = text.|IndexOf(s, comparisonType) != -1|(24);
            var result83 = text.|IndexOf(s, comparisonType) >= 0|(25);
            var result84 = text.|IndexOf(s, comparisonType) == -1|(26);
            var result85 = text.|IndexOf(s, comparisonType) < 0|(27);
        }

        public void RedundantArguments(string text, char c, string s)
        {
            var result1 = text.IndexOf(c, 0);
            var result2 = text.IndexOf(c, startIndex: 0);

            var result3 = text.IndexOf(s, 0);
            var result4 = text.IndexOf(s, startIndex: 0);

            var result5 = text.IndexOf(s, 0, StringComparison.CurrentCulture);
            var result6 = text.IndexOf(s, startIndex: 0, StringComparison.CurrentCulture);
        }

        public void ExpressionResult(string text)
        {
            var result1 = |text.IndexOf("")|(28);
            var result2 = |text.IndexOf("", StringComparison.CurrentCulture)|(29);
        }

        public void AsCharacter(string text)
        {
            var result1 = text.IndexOf("a");
            var result2 = text.IndexOf("a", StringComparison.OrdinalIgnoreCase);
        }

        public void NoDetection(string text, char c, int startIndex)
        {
            var result1 = text.IndexOf(c, 1);
            var result2 = text.IndexOf(c, startIndex);

            text.|IndexOf|(30)("");
            text.|IndexOf|(31)("", StringComparison.CurrentCulture);
        }

        public void NoDetection(string? text, StringComparison comparisonType, char c, string s)
        {
            var result21 = text?.IndexOf(c) > -1;
            var result22 = text?.IndexOf(c) != -1;
            var result23 = text?.IndexOf(c) >= 0;
            var result24 = text?.IndexOf(s) == -1;
            var result25 = text?.IndexOf(s) < 0;

            var result41 = text?.IndexOf(c, comparisonType) > -1;
            var result42 = text?.IndexOf(c, comparisonType) != -1;
            var result43 = text?.IndexOf(c, comparisonType) >= 0;
            var result44 = text?.IndexOf(c, comparisonType) == -1;
            var result45 = text?.IndexOf(c, comparisonType) < 0;

            var result11 = text?.IndexOf("");
            var result12 = text?.IndexOf("", comparisonType);

            var result51 = text?.IndexOf(s) == 0;
            var result52 = text?.IndexOf(s) != 0;

            var result61 = text?.IndexOf(s) > -1;
            var result62 = text?.IndexOf(s) != -1;
            var result63 = text?.IndexOf(s) >= 0;
            var result64 = text?.IndexOf(s) == -1;
            var result65 = text?.IndexOf(s) < 0;

            var result71 = text?.IndexOf(s, comparisonType) == 0;
            var result72 = text?.IndexOf(s, comparisonType) != 0;

            var result81 = text?.IndexOf(s, comparisonType) > -1;
            var result82 = text?.IndexOf(s, comparisonType) != -1;
            var result83 = text?.IndexOf(s, comparisonType) >= 0;
            var result84 = text?.IndexOf(s, comparisonType) == -1;
            var result85 = text?.IndexOf(s, comparisonType) < 0;
        }
    }
}
---------------------------------------------------------
(0): ReSharper Suggestion: Use list pattern.
(1): ReSharper Suggestion: Use list pattern.
(2): ReSharper Suggestion: Use list pattern.
(3): ReSharper Suggestion: Use list pattern.
(4): ReSharper Suggestion: Use the 'Contains' method.
(5): ReSharper Suggestion: Use the 'Contains' method.
(6): ReSharper Suggestion: Use the 'Contains' method.
(7): ReSharper Suggestion: Use the 'Contains' method.
(8): ReSharper Suggestion: Use the 'Contains' method.
(9): ReSharper Suggestion: Use the 'Contains' method.
(10): ReSharper Suggestion: Use the 'Contains' method.
(11): ReSharper Suggestion: Use the 'Contains' method.
(12): ReSharper Suggestion: Use the 'Contains' method.
(13): ReSharper Suggestion: Use the 'Contains' method.
(14): ReSharper Suggestion: Use the 'StartsWith' method.
(15): ReSharper Suggestion: Use the 'StartsWith' method.
(16): ReSharper Suggestion: Use the 'Contains' method.
(17): ReSharper Suggestion: Use the 'Contains' method.
(18): ReSharper Suggestion: Use the 'Contains' method.
(19): ReSharper Suggestion: Use the 'Contains' method.
(20): ReSharper Suggestion: Use the 'Contains' method.
(21): ReSharper Suggestion: Use the 'StartsWith' method.
(22): ReSharper Suggestion: Use the 'StartsWith' method.
(23): ReSharper Suggestion: Use the 'Contains' method.
(24): ReSharper Suggestion: Use the 'Contains' method.
(25): ReSharper Suggestion: Use the 'Contains' method.
(26): ReSharper Suggestion: Use the 'Contains' method.
(27): ReSharper Suggestion: Use the 'Contains' method.
(28): ReSharper Suggestion: The expression is always 0.
(29): ReSharper Suggestion: The expression is always 0.
(30): ReSharper Warning: Return value of pure method is not used
(31): ReSharper Warning: Return value of pure method is not used
