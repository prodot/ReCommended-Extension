using System;

namespace Test
{
    public class Strings
    {
        public void RedundantArguments(string text, char[] c, string s)
        {
            var result1 = text.IndexOfAny(c, 0);
            var result2 = text.IndexOfAny(c, startIndex: 0);
        }

        public void RedundantArguments_Nullable(string? text, char[] c, string s)
        {
            var result1 = text?.IndexOfAny(c, 0);
            var result2 = text?.IndexOfAny(c, startIndex: 0);
        }

        public void ExpressionResult(string text)
        {
            var result = |text.IndexOfAny([])|(0);
        }

        public void DuplicateItems(string text, int startIndex, int count)
        {
            var result1 = text.IndexOfAny(['a', 'a']);
            var result2 = text.IndexOfAny(['a', 'a'], startIndex);
            var result3 = text.IndexOfAny(['a', 'a'], startIndex, count);
        }

        public void DuplicateItems_Nullable(string? text, int startIndex, int count)
        {
            var result1 = text?.IndexOfAny(['a', 'a']);
            var result2 = text?.IndexOfAny(['a', 'a'], startIndex);
            var result3 = text?.IndexOfAny(['a', 'a'], startIndex, count);
        }

        public void OtherMethod(string text, char c, int startIndex, int count)
        {
            var result1 = text.|IndexOfAny([c])|(1);
            var result2 = text.|IndexOfAny([c], startIndex)|(2);
            var result3 = text.|IndexOfAny([c], startIndex, count)|(3);
        }

        public void OtherMethod_Nullable(string? text, char c, int startIndex, int count)
        {
            var result1 = text?.|IndexOfAny([c])|(4);
            var result2 = text?.|IndexOfAny([c], startIndex)|(5);
            var result3 = text?.|IndexOfAny([c], startIndex, count)|(6);
        }

        public void NoDetection(string text, char c, char[] ca, int startIndex)
        {
            var result11 = text.IndexOfAny([c, c]);

            var result21 = text.IndexOfAny(ca, 1);
            var result22 = text.IndexOfAny(ca, startIndex);

            text.|IndexOfAny|(7)([]);
        }

        public void NoDetection_Nullable(string? text, char[] c, int startIndex)
        {
            var result1 = text?.IndexOfAny([]);
        }
    }
}
---------------------------------------------------------
(0): ReSharper Suggestion: The expression is always -1.
(1): ReSharper Suggestion: Use the 'IndexOf' method.
(2): ReSharper Suggestion: Use the 'IndexOf' method.
(3): ReSharper Suggestion: Use the 'IndexOf' method.
(4): ReSharper Suggestion: Use the 'IndexOf' method.
(5): ReSharper Suggestion: Use the 'IndexOf' method.
(6): ReSharper Suggestion: Use the 'IndexOf' method.
(7): ReSharper Warning: Return value of pure method is not used
