using System;

namespace Test
{
    public class Strings
    {
        public void RedundantArguments(string text, char[] c, string s)
        {
            var result1 = text.IndexOfAny(c, |0|(0));
            var result2 = text.IndexOfAny(c, |startIndex: 0|(1));
        }

        public void RedundantArguments_Nullable(string? text, char[] c, string s)
        {
            var result1 = text?.IndexOfAny(c, |0|(2));
            var result2 = text?.IndexOfAny(c, |startIndex: 0|(3));
        }

        public void ExpressionResult(string text)
        {
            var result = |text.IndexOfAny([])|(4);
        }

        public void DuplicateItems(string text, int startIndex, int count)
        {
            var result1 = text.IndexOfAny(['a', |'a'|(5)]);
            var result2 = text.IndexOfAny(['a', |'a'|(6)], startIndex);
            var result3 = text.IndexOfAny(['a', |'a'|(7)], startIndex, count);
        }

        public void DuplicateItems_Nullable(string? text, int startIndex, int count)
        {
            var result1 = text?.IndexOfAny(['a', |'a'|(8)]);
            var result2 = text?.IndexOfAny(['a', |'a'|(9)], startIndex);
            var result3 = text?.IndexOfAny(['a', |'a'|(10)], startIndex, count);
        }

        public void OtherMethod(string text, char c, int startIndex, int count)
        {
            var result1 = text.|IndexOfAny([c])|(11);
            var result2 = text.|IndexOfAny([c], startIndex)|(12);
            var result3 = text.|IndexOfAny([c], startIndex, count)|(13);
        }

        public void OtherMethod_Nullable(string? text, char c, int startIndex, int count)
        {
            var result1 = text?.|IndexOfAny([c])|(14);
            var result2 = text?.|IndexOfAny([c], startIndex)|(15);
            var result3 = text?.|IndexOfAny([c], startIndex, count)|(16);
        }

        public void NoDetection(string text, char c, char[] ca, int startIndex)
        {
            var result11 = text.IndexOfAny([c, c]);

            var result21 = text.IndexOfAny(ca, 1);
            var result22 = text.IndexOfAny(ca, startIndex);

            text.|IndexOfAny|(17)([]);
        }

        public void NoDetection_Nullable(string? text, char[] c, int startIndex)
        {
            var result1 = text?.IndexOfAny([]);
        }
    }
}
---------------------------------------------------------
(0): ReSharper Dead Code: Passing 0 is redundant.
(1): ReSharper Dead Code: Passing 0 is redundant.
(2): ReSharper Dead Code: Passing 0 is redundant.
(3): ReSharper Dead Code: Passing 0 is redundant.
(4): ReSharper Suggestion: The expression is always -1.
(5): ReSharper Dead Code: The character is already passed.
(6): ReSharper Dead Code: The character is already passed.
(7): ReSharper Dead Code: The character is already passed.
(8): ReSharper Dead Code: The character is already passed.
(9): ReSharper Dead Code: The character is already passed.
(10): ReSharper Dead Code: The character is already passed.
(11): ReSharper Suggestion: Use the 'IndexOf' method.
(12): ReSharper Suggestion: Use the 'IndexOf' method.
(13): ReSharper Suggestion: Use the 'IndexOf' method.
(14): ReSharper Suggestion: Use the 'IndexOf' method.
(15): ReSharper Suggestion: Use the 'IndexOf' method.
(16): ReSharper Suggestion: Use the 'IndexOf' method.
(17): ReSharper Warning: Return value of pure method is not used
