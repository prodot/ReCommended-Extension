using System;

namespace Test
{
    public class Strings
    {
        public void ExpressionResult(string text, char[] c)
        {
            var result1 = |text.LastIndexOfAny([])|(0);
            var result2 = |text.LastIndexOfAny(c, 0)|(1);
            var result3 = |text.LastIndexOfAny(c, 0, 0)|(2);
            var result4 = |text.LastIndexOfAny(c, 0, 1)|(3);
        }

        public void DuplicateItems(string text, int startIndex, int count)
        {
            var result1 = text.LastIndexOfAny(['a', 'a']);
            var result2 = text.LastIndexOfAny(['a', 'a'], startIndex);
            var result3 = text.LastIndexOfAny(['a', 'a'], startIndex, count);
        }

        public void DuplicateItems_Nullable(string? text, int startIndex, int count)
        {
            var result1 = text?.LastIndexOfAny(['a', 'a']);
            var result2 = text?.LastIndexOfAny(['a', 'a'], startIndex);
            var result3 = text?.LastIndexOfAny(['a', 'a'], startIndex, count);
        }

        public void OtherMethod(string text, char c, int startIndex, int count)
        {
            var result1 = text.|LastIndexOfAny([c])|(4);
            var result2 = text.|LastIndexOfAny([c], startIndex)|(5);
            var result3 = text.|LastIndexOfAny([c], startIndex, count)|(6);
        }

        public void OtherMethod_Nullable(string? text, char c, int startIndex, int count)
        {
            var result1 = text?.|LastIndexOfAny([c])|(7);
            var result2 = text?.|LastIndexOfAny([c], startIndex)|(8);
            var result3 = text?.|LastIndexOfAny([c], startIndex, count)|(9);
        }

        public void NoDetection(string text, char c, char[] ca, int startIndex)
        {
            var result11 = text.LastIndexOfAny([c, c]);

            var result21 = text.LastIndexOfAny(ca, 1);
            var result22 = text.LastIndexOfAny(ca, startIndex);

            text.|LastIndexOfAny|(10)([]);
            text.|LastIndexOfAny|(11)(ca, 0);
            text.|LastIndexOfAny|(12)(ca, 0, 0);
            text.|LastIndexOfAny|(13)(ca, 0, 1);
        }

        public void NoDetection_Nullable(string? text, char[] c)
        {
            var result1 = text?.LastIndexOfAny([]);
            var result2 = text?.LastIndexOfAny(c, 0);
            var result3 = text?.LastIndexOfAny(c, 0, 0);
            var result4 = text?.LastIndexOfAny(c, 0, 1);
        }
    }
}
---------------------------------------------------------
(0): ReSharper Suggestion: The expression is always -1.
(1): ReSharper Suggestion: The expression is always -1.
(2): ReSharper Suggestion: The expression is always -1.
(3): ReSharper Suggestion: The expression is always -1.
(4): ReSharper Suggestion: Use the 'LastIndexOf' method.
(5): ReSharper Suggestion: Use the 'LastIndexOf' method.
(6): ReSharper Suggestion: Use the 'LastIndexOf' method.
(7): ReSharper Suggestion: Use the 'LastIndexOf' method.
(8): ReSharper Suggestion: Use the 'LastIndexOf' method.
(9): ReSharper Suggestion: Use the 'LastIndexOf' method.
(10): ReSharper Warning: Return value of pure method is not used
(11): ReSharper Warning: Return value of pure method is not used
(12): ReSharper Warning: Return value of pure method is not used
(13): ReSharper Warning: Return value of pure method is not used
