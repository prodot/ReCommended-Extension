using System;
using System.Globalization;

namespace Test
{
    public class Doubles
    {
        public void Parse(string s, ReadOnlySpan<char> s1, ReadOnlySpan<byte> utf8Text, NumberStyles style, IFormatProvider provider)
        {
            var result11 = double.Parse(s, |NumberStyles.Float | NumberStyles.AllowThousands|(0));
            var result12 = double.Parse(s, |null|(1));
            var result13 = double.Parse(s, |NumberStyles.AllowLeadingSign | NumberStyles.AllowTrailingWhite | NumberStyles.AllowLeadingWhite | NumberStyles.AllowDecimalPoint | NumberStyles.AllowExponent | NumberStyles.AllowThousands|(2), provider);
            var result14 = double.Parse(s, style, |null|(3));
            var result15 = double.Parse(s, |NumberStyles.Float | NumberStyles.AllowThousands|(4), |null|(5));

            var result21 = double.Parse(s1, |null|(6));

            var result31 = double.Parse(utf8Text, |null|(7));
        }

        public void Round(double x, int digits, MidpointRounding mode)
        {
            var result11 = double.Round(x, |0|(8));
            var result12 = double.Round(x, |0|(9), mode);
            var result13 = double.Round(x, |MidpointRounding.ToEven|(10));
            var result14 = double.Round(x, digits, |MidpointRounding.ToEven|(11));
            var result15 = double.Round(x, |0|(12), |MidpointRounding.ToEven|(13));

            var result21 = Math.Round(x, |0|(14));
            var result22 = Math.Round(x, |0|(15), mode);
            var result23 = Math.Round(x, |MidpointRounding.ToEven|(16));
            var result24 = Math.Round(x, digits, |MidpointRounding.ToEven|(17));
            var result25 = Math.Round(x, |0|(18), |MidpointRounding.ToEven|(19));
        }

        public void ToString(byte number, string format, IFormatProvider provider)
        {
            var result1 = number.ToString(|null as string|(20));
            var result2 = number.ToString(|""|(21));
            var result3 = number.ToString(|null as IFormatProvider|(22));
            var result4 = number.ToString(|null|(23), provider);
            var result5 = number.ToString(|""|(24), provider);
            var result6 = number.ToString(format, |null|(25));
            var result7 = number.ToString(|""|(26), |null|(27));
        }

        public void TryParse(string s, ReadOnlySpan<char> s1, ReadOnlySpan<byte> utf8Text, NumberStyles style, IFormatProvider provider)
        {
            var result11 = double.TryParse(s, |NumberStyles.Float | NumberStyles.AllowThousands|(28), provider, out _);
            var result12 = double.TryParse(s, |null|(29), out _);

            var result21 = double.TryParse(s1, |NumberStyles.Float | NumberStyles.AllowThousands|(30), provider, out _);
            var result22 = double.TryParse(s1, |null|(31), out _);

            var result31 = double.TryParse(utf8Text, |NumberStyles.Float | NumberStyles.AllowThousands|(32), provider, out _);
            var result32 = double.TryParse(utf8Text, |null|(33), out _);
        }
    }
}
------------------------------------------------
0: Passing NumberStyles.AllowThousands | NumberStyles.Float is redundant.
QUICKFIXES:
Remove argument
1: Passing null is redundant.
QUICKFIXES:
Remove argument
2: Passing NumberStyles.AllowThousands | NumberStyles.Float is redundant.
QUICKFIXES:
Remove argument
3: Passing null is redundant.
QUICKFIXES:
Remove argument
4: Passing NumberStyles.AllowThousands | NumberStyles.Float is redundant.
QUICKFIXES:
Remove argument
5: Passing null is redundant.
QUICKFIXES:
Remove argument
6: Passing null is redundant.
QUICKFIXES:
Remove argument
7: Passing null is redundant.
QUICKFIXES:
Remove argument
8: Passing 0 is redundant.
QUICKFIXES:
Remove argument
9: Passing 0 is redundant.
QUICKFIXES:
Remove argument
10: Passing MidpointRounding.ToEven is redundant.
QUICKFIXES:
Remove argument
11: Passing MidpointRounding.ToEven is redundant.
QUICKFIXES:
Remove argument
12: Passing 0 is redundant.
QUICKFIXES:
Remove argument
13: Passing MidpointRounding.ToEven is redundant.
QUICKFIXES:
Remove argument
14: Passing 0 is redundant.
QUICKFIXES:
Remove argument
15: Passing 0 is redundant.
QUICKFIXES:
Remove argument
16: Passing MidpointRounding.ToEven is redundant.
QUICKFIXES:
Remove argument
17: Passing MidpointRounding.ToEven is redundant.
QUICKFIXES:
Remove argument
18: Passing 0 is redundant.
QUICKFIXES:
Remove argument
19: Passing MidpointRounding.ToEven is redundant.
QUICKFIXES:
Remove argument
20: Passing null or an empty string is redundant.
QUICKFIXES:
Remove argument
21: Passing null or an empty string is redundant.
QUICKFIXES:
Remove argument
22: Passing null is redundant.
QUICKFIXES:
Remove argument
23: Passing null or an empty string is redundant.
QUICKFIXES:
Remove argument
24: Passing null or an empty string is redundant.
QUICKFIXES:
Remove argument
25: Passing null is redundant.
QUICKFIXES:
Remove argument
26: Passing null or an empty string is redundant.
QUICKFIXES:
Remove argument
27: Passing null is redundant.
QUICKFIXES:
Remove argument
28: Passing NumberStyles.AllowThousands | NumberStyles.Float is redundant.
QUICKFIXES:
Remove argument
29: Passing null is redundant.
QUICKFIXES:
Remove argument
30: Passing NumberStyles.AllowThousands | NumberStyles.Float is redundant.
QUICKFIXES:
Remove argument
31: Passing null is redundant.
QUICKFIXES:
Remove argument
32: Passing NumberStyles.AllowThousands | NumberStyles.Float is redundant.
QUICKFIXES:
Remove argument
33: Passing null is redundant.
QUICKFIXES:
Remove argument
