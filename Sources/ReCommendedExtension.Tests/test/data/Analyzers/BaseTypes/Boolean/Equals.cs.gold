namespace Test
{
    public class Booleans
    {
        public void ExpressionResult(bool flag, bool obj)
        {
            var result11 = |flag.Equals(false)|(0);
            var result12 = |false.Equals(obj)|(1);

            var result21 = |flag.Equals(null)|(2);
        }

        public void RedundantMethodInvocation(bool flag, bool obj)
        {
            var result1 = flag.|Equals(true)|(3);
            var result2 = |true.Equals|(4)(obj);
        }

        public void Operator(bool flag, bool obj)
        {
            var result = |flag.Equals(obj)|(5);
        }

        public void NoDetection(bool flag, bool obj, bool? otherObj)
        {
            var result = flag.Equals(otherObj);

            flag.Equals(null);

            flag.Equals(true);
            flag.Equals(false);
            true.Equals(obj);
            false.Equals(obj);

            flag.Equals(obj);
        }
    }
}
---------------------------------------------------------
(0): ReSharper Suggestion: The expression is always the same as the inverted qualifier.
(1): ReSharper Suggestion: The expression is always the same as the inverted argument.
(2): ReSharper Suggestion: The expression is always false.
(3): ReSharper Dead Code: Calling 'Equals' with true is redundant.
(4): ReSharper Dead Code: Calling 'true.Equals' is redundant.
(5): ReSharper Suggestion: Use the '==' operator.
