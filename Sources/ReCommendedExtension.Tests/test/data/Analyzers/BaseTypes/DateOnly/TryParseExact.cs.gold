using System;
using System.Globalization;

namespace Test
{
    public class DatesOnly
    {
        public void RedundantArgumentRange(string s, ReadOnlySpan<char> s1, string format, string[] formats, out DateOnly result)
        {
            var result11 = DateOnly.TryParseExact(s, format, null, DateTimeStyles.None, out result);
            var result12 = DateOnly.TryParseExact(s1, format, null, DateTimeStyles.None, out result);

            var result21 = DateOnly.TryParseExact(s, formats, null, DateTimeStyles.None, out result);
            var result22 = DateOnly.TryParseExact(s1, formats, null, DateTimeStyles.None, out result);
        }

        public void OtherArgument(string s, ReadOnlySpan<char> s1, string format, IFormatProvider provider, DateTimeStyles style, out DateOnly result)
        {
            var result1 = DateOnly.TryParseExact(s, "R", |provider|(0), style, out result);
            var result2 = DateOnly.TryParseExact(s, |[format]|(1), out result);
            var result3 = DateOnly.TryParseExact(s, |[format]|(2), provider, style, out result);
            var result4 = DateOnly.TryParseExact(s, ["o", "r"], |provider|(3), style, out result);
            var result5 = DateOnly.TryParseExact(s1, ["o", "r"], |provider|(4), style, out result);
        }

        public void RedundantElement(string s, ReadOnlySpan<char> s1, IFormatProvider provider, DateTimeStyles style, out DateOnly result)
        {
            var result11 = DateOnly.TryParseExact(s, ["d", |"d"|(5), "D", "m", |"M"|(6), "o", |"O"|(7), "r", |"R"|(8), "y", |"Y"|(9)], out result);
            var result12 = DateOnly.TryParseExact(s, (string[])["d", |"d"|(10), "D", "m", |"M"|(11), "o", |"O"|(12), "r", |"R"|(13), "y", |"Y"|(14)], out result);
            var result13 = DateOnly.TryParseExact(s, new[] { "d", |"d"|(15), "D", "m", |"M"|(16), "o", |"O"|(17), "r", |"R"|(18), "y", |"Y"|(19) }, out result);
            var result14 = DateOnly.TryParseExact(s, new string[] { "d", |"d"|(20), "D", "m", |"M"|(21), "o", |"O"|(22), "r", |"R"|(23), "y", |"Y"|(24) }, out result);

            var result21 = DateOnly.TryParseExact(s1, ["d", |"d"|(25), "D", "m", |"M"|(26), "o", |"O"|(27), "r", |"R"|(28), "y", |"Y"|(29)], out result);
            var result22 = DateOnly.TryParseExact(s1, (string[])["d", |"d"|(30), "D", "m", |"M"|(31), "o", |"O"|(32), "r", |"R"|(33), "y", |"Y"|(34)], out result);
            var result23 = DateOnly.TryParseExact(s1, new[] { "d", |"d"|(35), "D", "m", |"M"|(36), "o", |"O"|(37), "r", |"R"|(38), "y", |"Y"|(39) }, out result);
            var result24 = DateOnly.TryParseExact(s1, new string[] { "d", |"d"|(40), "D", "m", |"M"|(41), "o", |"O"|(42), "r", |"R"|(43), "y", |"Y"|(44) }, out result);

            var result31 = DateOnly.TryParseExact(s, ["d", |"d"|(45), "D", "m", |"M"|(46), "o", |"O"|(47), "r", |"R"|(48), "y", |"Y"|(49)], provider, style, out result);
            var result32 = DateOnly.TryParseExact(s, (string[])["d", |"d"|(50), "D", "m", |"M"|(51), "o", |"O"|(52), "r", |"R"|(53), "y", |"Y"|(54)], provider, style, out result);
            var result33 = DateOnly.TryParseExact(s, new[] { "d", |"d"|(55), "D", "m", |"M"|(56), "o", |"O"|(57), "r", |"R"|(58), "y", |"Y"|(59) }, provider, style, out result);
            var result34 = DateOnly.TryParseExact(s, new string[] { "d", |"d"|(60), "D", "m", |"M"|(61), "o", |"O"|(62), "r", |"R"|(63), "y", |"Y"|(64) }, provider, style, out result);

            var result41 = DateOnly.TryParseExact(s1, ["d", |"d"|(65), "D", "m", |"M"|(66), "o", |"O"|(67), "r", |"R"|(68), "y", |"Y"|(69)], provider, style, out result);
            var result42 = DateOnly.TryParseExact(s1, (string[])["d", |"d"|(70), "D", "m", |"M"|(71), "o", |"O"|(72), "r", |"R"|(73), "y", |"Y"|(74)], provider, style, out result);
            var result43 = DateOnly.TryParseExact(s1, new[] { "d", |"d"|(75), "D", "m", |"M"|(76), "o", |"O"|(77), "r", |"R"|(78), "y", |"Y"|(79) }, provider, style, out result);
            var result44 = DateOnly.TryParseExact(s1, new string[] { "d", |"d"|(80), "D", "m", |"M"|(81), "o", |"O"|(82), "r", |"R"|(83), "y", |"Y"|(84) }, provider, style, out result);
        }

        public void NoDetection(string s, ReadOnlySpan<char> s1, string format, IFormatProvider provider, DateTimeStyles style, out DateOnly result)
        {
            var result11 = DateOnly.TryParseExact(s, format, provider, style, out result);
            var result12 = DateOnly.TryParseExact(s1, format, provider, style, out result);

            var result21 = DateOnly.TryParseExact(s, [format, format], out result);
            var result22 = DateOnly.TryParseExact(s, ["d", "D", "m", "o", "r", "y"], out result);

            var result31 = DateOnly.TryParseExact(s1, [format, format], out result);
            var result32 = DateOnly.TryParseExact(s1, ["d", "D", "m", "o", "r", "y"], out result);

            var result41 = DateOnly.TryParseExact(s, [format, format], provider, style, out result);
            var result42 = DateOnly.TryParseExact(s1, [format, format], provider, style, out result);
        }
    }
}
---------------------------------------------------------
(0): ReSharper Suggestion: The format provider is ignored (pass null instead).
(1): ReSharper Suggestion: The only collection element should be passed directly.
(2): ReSharper Suggestion: The only collection element should be passed directly.
(3): ReSharper Suggestion: The format provider is ignored (pass null instead).
(4): ReSharper Suggestion: The format provider is ignored (pass null instead).
(5): ReSharper Dead Code: The string is already passed.
(6): ReSharper Dead Code: The equivalent string is already passed.
(7): ReSharper Dead Code: The equivalent string is already passed.
(8): ReSharper Dead Code: The equivalent string is already passed.
(9): ReSharper Dead Code: The equivalent string is already passed.
(10): ReSharper Dead Code: The string is already passed.
(11): ReSharper Dead Code: The equivalent string is already passed.
(12): ReSharper Dead Code: The equivalent string is already passed.
(13): ReSharper Dead Code: The equivalent string is already passed.
(14): ReSharper Dead Code: The equivalent string is already passed.
(15): ReSharper Dead Code: The string is already passed.
(16): ReSharper Dead Code: The equivalent string is already passed.
(17): ReSharper Dead Code: The equivalent string is already passed.
(18): ReSharper Dead Code: The equivalent string is already passed.
(19): ReSharper Dead Code: The equivalent string is already passed.
(20): ReSharper Dead Code: The string is already passed.
(21): ReSharper Dead Code: The equivalent string is already passed.
(22): ReSharper Dead Code: The equivalent string is already passed.
(23): ReSharper Dead Code: The equivalent string is already passed.
(24): ReSharper Dead Code: The equivalent string is already passed.
(25): ReSharper Dead Code: The string is already passed.
(26): ReSharper Dead Code: The equivalent string is already passed.
(27): ReSharper Dead Code: The equivalent string is already passed.
(28): ReSharper Dead Code: The equivalent string is already passed.
(29): ReSharper Dead Code: The equivalent string is already passed.
(30): ReSharper Dead Code: The string is already passed.
(31): ReSharper Dead Code: The equivalent string is already passed.
(32): ReSharper Dead Code: The equivalent string is already passed.
(33): ReSharper Dead Code: The equivalent string is already passed.
(34): ReSharper Dead Code: The equivalent string is already passed.
(35): ReSharper Dead Code: The string is already passed.
(36): ReSharper Dead Code: The equivalent string is already passed.
(37): ReSharper Dead Code: The equivalent string is already passed.
(38): ReSharper Dead Code: The equivalent string is already passed.
(39): ReSharper Dead Code: The equivalent string is already passed.
(40): ReSharper Dead Code: The string is already passed.
(41): ReSharper Dead Code: The equivalent string is already passed.
(42): ReSharper Dead Code: The equivalent string is already passed.
(43): ReSharper Dead Code: The equivalent string is already passed.
(44): ReSharper Dead Code: The equivalent string is already passed.
(45): ReSharper Dead Code: The string is already passed.
(46): ReSharper Dead Code: The equivalent string is already passed.
(47): ReSharper Dead Code: The equivalent string is already passed.
(48): ReSharper Dead Code: The equivalent string is already passed.
(49): ReSharper Dead Code: The equivalent string is already passed.
(50): ReSharper Dead Code: The string is already passed.
(51): ReSharper Dead Code: The equivalent string is already passed.
(52): ReSharper Dead Code: The equivalent string is already passed.
(53): ReSharper Dead Code: The equivalent string is already passed.
(54): ReSharper Dead Code: The equivalent string is already passed.
(55): ReSharper Dead Code: The string is already passed.
(56): ReSharper Dead Code: The equivalent string is already passed.
(57): ReSharper Dead Code: The equivalent string is already passed.
(58): ReSharper Dead Code: The equivalent string is already passed.
(59): ReSharper Dead Code: The equivalent string is already passed.
(60): ReSharper Dead Code: The string is already passed.
(61): ReSharper Dead Code: The equivalent string is already passed.
(62): ReSharper Dead Code: The equivalent string is already passed.
(63): ReSharper Dead Code: The equivalent string is already passed.
(64): ReSharper Dead Code: The equivalent string is already passed.
(65): ReSharper Dead Code: The string is already passed.
(66): ReSharper Dead Code: The equivalent string is already passed.
(67): ReSharper Dead Code: The equivalent string is already passed.
(68): ReSharper Dead Code: The equivalent string is already passed.
(69): ReSharper Dead Code: The equivalent string is already passed.
(70): ReSharper Dead Code: The string is already passed.
(71): ReSharper Dead Code: The equivalent string is already passed.
(72): ReSharper Dead Code: The equivalent string is already passed.
(73): ReSharper Dead Code: The equivalent string is already passed.
(74): ReSharper Dead Code: The equivalent string is already passed.
(75): ReSharper Dead Code: The string is already passed.
(76): ReSharper Dead Code: The equivalent string is already passed.
(77): ReSharper Dead Code: The equivalent string is already passed.
(78): ReSharper Dead Code: The equivalent string is already passed.
(79): ReSharper Dead Code: The equivalent string is already passed.
(80): ReSharper Dead Code: The string is already passed.
(81): ReSharper Dead Code: The equivalent string is already passed.
(82): ReSharper Dead Code: The equivalent string is already passed.
(83): ReSharper Dead Code: The equivalent string is already passed.
(84): ReSharper Dead Code: The equivalent string is already passed.
