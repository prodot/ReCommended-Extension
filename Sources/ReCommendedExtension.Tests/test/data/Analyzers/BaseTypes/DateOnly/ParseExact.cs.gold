using System;
using System.Globalization;

namespace Test
{
    public class DatesOnly
    {
        public void RedundantArgumentRange(string s, ReadOnlySpan<char> s1, string format, string[] formats)
        {
            var result1 = DateOnly.ParseExact(s, format, |null, DateTimeStyles.None|(0));
            var result2 = DateOnly.ParseExact(s, formats, |null, DateTimeStyles.None|(1));
            var result3 = DateOnly.ParseExact(s1, formats, |null, DateTimeStyles.None|(2));
        }

        public void RedundantArgument(string s, ReadOnlySpan<char> s1, string format, string[] formats)
        {
            var result1 = DateOnly.ParseExact(s, format, null);
            var result2 = DateOnly.ParseExact(s, formats, null);
            var result3 = DateOnly.ParseExact(s1, formats, null);
        }

        public void OtherArgument(string s, ReadOnlySpan<char> s1, string format, IFormatProvider provider, DateTimeStyles style)
        {
            var result11 = DateOnly.ParseExact(s, "R", |provider|(3), style);
            var result12 = DateOnly.ParseExact(s, "R", |provider|(4));

            var result21 = DateOnly.ParseExact(s, |[format]|(5));

            var result31 = DateOnly.ParseExact(s, |[format]|(6), provider, style);
            var result32 = DateOnly.ParseExact(s, ["o", "r"], |provider|(7), style);

            var result41 = DateOnly.ParseExact(s1, ["o", "r"], |provider|(8), style);
        }

        public void RedundantElement(string s, ReadOnlySpan<char> s1, IFormatProvider provider, DateTimeStyles style)
        {
            var result11 = DateOnly.ParseExact(s, ["d", |"d"|(9), "D", "m", |"M"|(10), "o", |"O"|(11), "r", |"R"|(12), "y", |"Y"|(13)]);
            var result12 = DateOnly.ParseExact(s, (string[])["d", |"d"|(14), "D", "m", |"M"|(15), "o", |"O"|(16), "r", |"R"|(17), "y", |"Y"|(18)]);
            var result13 = DateOnly.ParseExact(s, new[] { "d", |"d"|(19), "D", "m", |"M"|(20), "o", |"O"|(21), "r", |"R"|(22), "y", |"Y"|(23) });
            var result14 = DateOnly.ParseExact(s, new string[] { "d", |"d"|(24), "D", "m", |"M"|(25), "o", |"O"|(26), "r", |"R"|(27), "y", |"Y"|(28) });

            var result21 = DateOnly.ParseExact(s, ["d", |"d"|(29), "D", "m", |"M"|(30), "o", |"O"|(31), "r", |"R"|(32), "y", |"Y"|(33)], provider, style);
            var result22 = DateOnly.ParseExact(s, (string[])["d", |"d"|(34), "D", "m", |"M"|(35), "o", |"O"|(36), "r", |"R"|(37), "y", |"Y"|(38)], provider, style);
            var result23 = DateOnly.ParseExact(s, new[] { "d", |"d"|(39), "D", "m", |"M"|(40), "o", |"O"|(41), "r", |"R"|(42), "y", |"Y"|(43) }, provider, style);
            var result24 = DateOnly.ParseExact(s, new string[] { "d", |"d"|(44), "D", "m", |"M"|(45), "o", |"O"|(46), "r", |"R"|(47), "y", |"Y"|(48) }, provider, style);

            var result31 = DateOnly.ParseExact(s1, ["d", |"d"|(49), "D", "m", |"M"|(50), "o", |"O"|(51), "r", |"R"|(52), "y", |"Y"|(53)]);
            var result32 = DateOnly.ParseExact(s1, (string[])["d", |"d"|(54), "D", "m", |"M"|(55), "o", |"O"|(56), "r", |"R"|(57), "y", |"Y"|(58)]);
            var result33 = DateOnly.ParseExact(s1, new[] { "d", |"d"|(59), "D", "m", |"M"|(60), "o", |"O"|(61), "r", |"R"|(62), "y", |"Y"|(63) });
            var result34 = DateOnly.ParseExact(s1, new string[] { "d", |"d"|(64), "D", "m", |"M"|(65), "o", |"O"|(66), "r", |"R"|(67), "y", |"Y"|(68) });

            var result41 = DateOnly.ParseExact(s1, ["d", |"d"|(69), "D", "m", |"M"|(70), "o", |"O"|(71), "r", |"R"|(72), "y", |"Y"|(73)], provider, style);
            var result42 = DateOnly.ParseExact(s1, (string[])["d", |"d"|(74), "D", "m", |"M"|(75), "o", |"O"|(76), "r", |"R"|(77), "y", |"Y"|(78)], provider, style);
            var result43 = DateOnly.ParseExact(s1, new[] { "d", |"d"|(79), "D", "m", |"M"|(80), "o", |"O"|(81), "r", |"R"|(82), "y", |"Y"|(83) }, provider, style);
            var result44 = DateOnly.ParseExact(s1, new string[] { "d", |"d"|(84), "D", "m", |"M"|(85), "o", |"O"|(86), "r", |"R"|(87), "y", |"Y"|(88) }, provider, style);
        }

        public void NoDetection(string s, ReadOnlySpan<char> s1, string format, IFormatProvider provider, DateTimeStyles style)
        {
            var result11 = DateOnly.ParseExact(s, format, provider, style);
            var result12 = DateOnly.ParseExact(s, format, provider);

            var result21 = DateOnly.ParseExact(s, [format, format]);
            var result22 = DateOnly.ParseExact(s, ["d", "D", "m", "o", "r", "y"]);

            var result31 = DateOnly.ParseExact(s, [format, format], provider, style);
            var result32 = DateOnly.ParseExact(s, ["d", "D", "m", "o", "r", "y"], provider, style);

            var result41 = DateOnly.ParseExact(s1, [format, format]);
            var result42 = DateOnly.ParseExact(s1, ["d", "D", "m", "o", "r", "y"]);

            var result51 = DateOnly.ParseExact(s1, [format, format], provider, style);
            var result52 = DateOnly.ParseExact(s1, ["d", "D", "m", "o", "r", "y"], provider, style);
        }
    }
}
---------------------------------------------------------
(0): ReSharper Dead Code: Passing 'null, DateTimeStyles.None' is redundant.
(1): ReSharper Dead Code: Passing 'null, DateTimeStyles.None' is redundant.
(2): ReSharper Dead Code: Passing 'null, DateTimeStyles.None' is redundant.
(3): ReSharper Suggestion: The format provider is ignored (pass null instead).
(4): ReSharper Suggestion: The format provider is ignored (pass null instead).
(5): ReSharper Suggestion: The only collection element should be passed directly.
(6): ReSharper Suggestion: The only collection element should be passed directly.
(7): ReSharper Suggestion: The format provider is ignored (pass null instead).
(8): ReSharper Suggestion: The format provider is ignored (pass null instead).
(9): ReSharper Dead Code: The string is already passed.
(10): ReSharper Dead Code: The equivalent string is already passed.
(11): ReSharper Dead Code: The equivalent string is already passed.
(12): ReSharper Dead Code: The equivalent string is already passed.
(13): ReSharper Dead Code: The equivalent string is already passed.
(14): ReSharper Dead Code: The string is already passed.
(15): ReSharper Dead Code: The equivalent string is already passed.
(16): ReSharper Dead Code: The equivalent string is already passed.
(17): ReSharper Dead Code: The equivalent string is already passed.
(18): ReSharper Dead Code: The equivalent string is already passed.
(19): ReSharper Dead Code: The string is already passed.
(20): ReSharper Dead Code: The equivalent string is already passed.
(21): ReSharper Dead Code: The equivalent string is already passed.
(22): ReSharper Dead Code: The equivalent string is already passed.
(23): ReSharper Dead Code: The equivalent string is already passed.
(24): ReSharper Dead Code: The string is already passed.
(25): ReSharper Dead Code: The equivalent string is already passed.
(26): ReSharper Dead Code: The equivalent string is already passed.
(27): ReSharper Dead Code: The equivalent string is already passed.
(28): ReSharper Dead Code: The equivalent string is already passed.
(29): ReSharper Dead Code: The string is already passed.
(30): ReSharper Dead Code: The equivalent string is already passed.
(31): ReSharper Dead Code: The equivalent string is already passed.
(32): ReSharper Dead Code: The equivalent string is already passed.
(33): ReSharper Dead Code: The equivalent string is already passed.
(34): ReSharper Dead Code: The string is already passed.
(35): ReSharper Dead Code: The equivalent string is already passed.
(36): ReSharper Dead Code: The equivalent string is already passed.
(37): ReSharper Dead Code: The equivalent string is already passed.
(38): ReSharper Dead Code: The equivalent string is already passed.
(39): ReSharper Dead Code: The string is already passed.
(40): ReSharper Dead Code: The equivalent string is already passed.
(41): ReSharper Dead Code: The equivalent string is already passed.
(42): ReSharper Dead Code: The equivalent string is already passed.
(43): ReSharper Dead Code: The equivalent string is already passed.
(44): ReSharper Dead Code: The string is already passed.
(45): ReSharper Dead Code: The equivalent string is already passed.
(46): ReSharper Dead Code: The equivalent string is already passed.
(47): ReSharper Dead Code: The equivalent string is already passed.
(48): ReSharper Dead Code: The equivalent string is already passed.
(49): ReSharper Dead Code: The string is already passed.
(50): ReSharper Dead Code: The equivalent string is already passed.
(51): ReSharper Dead Code: The equivalent string is already passed.
(52): ReSharper Dead Code: The equivalent string is already passed.
(53): ReSharper Dead Code: The equivalent string is already passed.
(54): ReSharper Dead Code: The string is already passed.
(55): ReSharper Dead Code: The equivalent string is already passed.
(56): ReSharper Dead Code: The equivalent string is already passed.
(57): ReSharper Dead Code: The equivalent string is already passed.
(58): ReSharper Dead Code: The equivalent string is already passed.
(59): ReSharper Dead Code: The string is already passed.
(60): ReSharper Dead Code: The equivalent string is already passed.
(61): ReSharper Dead Code: The equivalent string is already passed.
(62): ReSharper Dead Code: The equivalent string is already passed.
(63): ReSharper Dead Code: The equivalent string is already passed.
(64): ReSharper Dead Code: The string is already passed.
(65): ReSharper Dead Code: The equivalent string is already passed.
(66): ReSharper Dead Code: The equivalent string is already passed.
(67): ReSharper Dead Code: The equivalent string is already passed.
(68): ReSharper Dead Code: The equivalent string is already passed.
(69): ReSharper Dead Code: The string is already passed.
(70): ReSharper Dead Code: The equivalent string is already passed.
(71): ReSharper Dead Code: The equivalent string is already passed.
(72): ReSharper Dead Code: The equivalent string is already passed.
(73): ReSharper Dead Code: The equivalent string is already passed.
(74): ReSharper Dead Code: The string is already passed.
(75): ReSharper Dead Code: The equivalent string is already passed.
(76): ReSharper Dead Code: The equivalent string is already passed.
(77): ReSharper Dead Code: The equivalent string is already passed.
(78): ReSharper Dead Code: The equivalent string is already passed.
(79): ReSharper Dead Code: The string is already passed.
(80): ReSharper Dead Code: The equivalent string is already passed.
(81): ReSharper Dead Code: The equivalent string is already passed.
(82): ReSharper Dead Code: The equivalent string is already passed.
(83): ReSharper Dead Code: The equivalent string is already passed.
(84): ReSharper Dead Code: The string is already passed.
(85): ReSharper Dead Code: The equivalent string is already passed.
(86): ReSharper Dead Code: The equivalent string is already passed.
(87): ReSharper Dead Code: The equivalent string is already passed.
(88): ReSharper Dead Code: The equivalent string is already passed.
