namespace Test
{
    public class Bytes
    {
        public void Clamp(byte number)
        {
            var result1 = |byte.Clamp(number, 1, 1)|(0);
            var result2 = |byte.Clamp(number, 0, 255)|(1);
        }

        public void DivRem(byte left)
        {
            var result1 = |byte.DivRem(0, 10)|(2);
            var result2 = |byte.DivRem(left, 1)|(3);
        }

        public void Equals(byte number)
        {
            var result = |number.Equals(null)|(4);
        }

        public void GetTypeCode(byte number)
        {
            var result = |number.GetTypeCode()|(5);
        }

        public void Max()
        {
            var result = |byte.Max(10, 10)|(6);
        }

        public void Min()
        {
            var result = |byte.Min(10, 10)|(7);
        }

        public void RotateLeft(byte n)
        {
            var result = |byte.RotateLeft(n, 0)|(8);
        }

        public void RotateRight(byte n)
        {
            var result = |byte.RotateRight(n, 0)|(9);
        }
    }
}
------------------------------------------------
0: The expression is always 1.
QUICKFIXES:
Replace with '(byte)1'
1: The expression is always the same as the first argument.
QUICKFIXES:
Replace with 'number'
2: The expression is always (0, 0).
QUICKFIXES:
Replace with '(Quotient: (byte)0, Remainder: (byte)0)'
3: The expression is always the same as the first argument with no remainder.
QUICKFIXES:
Replace with '(Quotient: left, Remainder: (byte)0)'
4: The expression is always false.
QUICKFIXES:
Replace with 'false'
5: The expression is always TypeCode.Byte.
QUICKFIXES:
Replace with 'TypeCode.Byte'
6: The expression is always 10.
QUICKFIXES:
Replace with '(byte)10'
7: The expression is always 10.
QUICKFIXES:
Replace with '(byte)10'
8: The expression is always the same as the first argument.
QUICKFIXES:
Replace with 'n'
9: The expression is always the same as the first argument.
QUICKFIXES:
Replace with 'n'
