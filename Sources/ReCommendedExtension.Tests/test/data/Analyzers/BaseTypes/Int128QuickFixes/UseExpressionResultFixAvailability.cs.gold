using System;

namespace Test
{
    public class Int128s
    {
        public void Clamp(Int128 number)
        {
            const int c = 1;

            var result11 = |Int128.Clamp(number, 1, 0x0001)|(0);
            var result12 = |Int128.Clamp(number, 1, 0x0001uL)|(1);
            var result13 = |Int128.Clamp(number, 1, 0x0001u)|(2);
            var result14 = |Int128.Clamp(number, 1, 0x0001L)|(3);
            var result15 = |Int128.Clamp(number, 1, c)|(4);
            var result16 = |Int128.Clamp(number, 97, 'a')|(5);

            Int128 result21 = |Int128.Clamp(number, 1, 0x0001)|(6);
            Int128 result22 = |Int128.Clamp(number, 1, 0x0001uL)|(7);
            Int128 result23 = |Int128.Clamp(number, 1, 0x0001u)|(8);
            Int128 result24 = |Int128.Clamp(number, 1, 0x0001L)|(9);
            Int128 result25 = |Int128.Clamp(number, 1, c)|(10);
            Int128 result26 = |Int128.Clamp(number, 97, 'a')|(11);
        }

        public void DivRem(Int128 left)
        {
            var result11 = |Int128.DivRem(0, 10)|(12);

            (Int128, Int128) result21 = |Int128.DivRem(0, 10)|(13);

            (Int128 quotient, Int128 remainder) result32 = |Int128.DivRem(0, 10)|(14);
        }

        public void Equals(Int128 number)
        {
            var result = |number.Equals(null)|(15);
        }

        public void Max()
        {
            const int c = 10;

            var result11 = |Int128.Max(10, 0x0A)|(16);
            var result12 = |Int128.Max(10, 10ul)|(17);
            var result13 = |Int128.Max(10, 10u)|(18);
            var result14 = |Int128.Max(10, 10L)|(19);
            var result15 = |Int128.Max(10, c)|(20);
            var result16 = |Int128.Max(97, 'a')|(21);

            Int128 result21 = |Int128.Max(10, 0x0A)|(22);
            Int128 result22 = |Int128.Max(10, 10ul)|(23);
            Int128 result23 = |Int128.Max(10, 10u)|(24);
            Int128 result24 = |Int128.Max(10, 10L)|(25);
            Int128 result25 = |Int128.Max(10, c)|(26);
            Int128 result26 = |Int128.Max(97, 'a')|(27);
        }

        public void MaxMagnitude()
        {
            const int c = 10;

            var result11 = |Int128.MaxMagnitude(10, 0x0A)|(28);
            var result12 = |Int128.MaxMagnitude(10, 10ul)|(29);
            var result13 = |Int128.MaxMagnitude(10, 10u)|(30);
            var result14 = |Int128.MaxMagnitude(10, 10L)|(31);
            var result15 = |Int128.MaxMagnitude(10, c)|(32);
            var result16 = |Int128.MaxMagnitude(97, 'a')|(33);

            Int128 result21 = |Int128.MaxMagnitude(10, 0x0A)|(34);
            Int128 result22 = |Int128.MaxMagnitude(10, 10ul)|(35);
            Int128 result23 = |Int128.MaxMagnitude(10, 10u)|(36);
            Int128 result24 = |Int128.MaxMagnitude(10, 10L)|(37);
            Int128 result25 = |Int128.MaxMagnitude(10, c)|(38);
            Int128 result26 = |Int128.MaxMagnitude(97, 'a')|(39);
        }

        public void Min()
        {
            const int c = 10;

            var result11 = |Int128.Min(10, 0x0A)|(40);
            var result12 = |Int128.Min(10, 10ul)|(41);
            var result13 = |Int128.Min(10, 10u)|(42);
            var result14 = |Int128.Min(10, 10L)|(43);
            var result15 = |Int128.Min(10, c)|(44);
            var result16 = |Int128.Min(97, 'a')|(45);

            Int128 result21 = |Int128.Min(10, 0x0A)|(46);
            Int128 result22 = |Int128.Min(10, 10ul)|(47);
            Int128 result23 = |Int128.Min(10, 10u)|(48);
            Int128 result24 = |Int128.Min(10, 10L)|(49);
            Int128 result25 = |Int128.Min(10, c)|(50);
            Int128 result26 = |Int128.Min(97, 'a')|(51);
        }

        public void MinMagnitude()
        {
            const int c = 10;

            var result11 = |Int128.MinMagnitude(10, 0x0A)|(52);
            var result12 = |Int128.MinMagnitude(10, 10ul)|(53);
            var result13 = |Int128.MinMagnitude(10, 10u)|(54);
            var result14 = |Int128.MinMagnitude(10, 10L)|(55);
            var result15 = |Int128.MinMagnitude(10, c)|(56);
            var result16 = |Int128.MinMagnitude(97, 'a')|(57);

            Int128 result21 = |Int128.MinMagnitude(10, 0x0A)|(58);
            Int128 result22 = |Int128.MinMagnitude(10, 10ul)|(59);
            Int128 result23 = |Int128.MinMagnitude(10, 10u)|(60);
            Int128 result24 = |Int128.MinMagnitude(10, 10L)|(61);
            Int128 result25 = |Int128.MinMagnitude(10, c)|(62);
            Int128 result26 = |Int128.MinMagnitude(97, 'a')|(63);
        }

        public void RotateLeft(Int128 n)
        {
            const int c = 1;

            var result11 = |Int128.RotateLeft(n, 0)|(64);
            var result12 = |Int128.RotateLeft(0x01, 0)|(65);
            var result13 = |Int128.RotateLeft(0x01u, 0)|(66);
            var result14 = |Int128.RotateLeft(0x01L, 0)|(67);
            var result15 = |Int128.RotateLeft(0x01ul, 0)|(68);
            var result16 = |Int128.RotateLeft(1 + 1, 0)|(69);
            var result17 = |Int128.RotateLeft(1u + 1u, 0)|(70);
            var result18 = |Int128.RotateLeft(1L + 1L, 0)|(71);
            var result19 = |Int128.RotateLeft(1ul + 1ul, 0)|(72);
            var result1A = |Int128.RotateLeft(c, 0)|(73);
            var result1B = |Int128.RotateLeft('a', 0)|(74);

            Int128 result21 = |Int128.RotateLeft(n, 0)|(75);
            Int128 result22 = |Int128.RotateLeft(0x01, 0)|(76);
            Int128 result23 = |Int128.RotateLeft(0x01u, 0)|(77);
            Int128 result24 = |Int128.RotateLeft(0x01L, 0)|(78);
            Int128 result25 = |Int128.RotateLeft(0x01ul, 0)|(79);
            Int128 result26 = |Int128.RotateLeft(1 + 1, 0)|(80);
            Int128 result27 = |Int128.RotateLeft(1u + 1u, 0)|(81);
            Int128 result28 = |Int128.RotateLeft(1L + 1L, 0)|(82);
            Int128 result29 = |Int128.RotateLeft(1ul + 1ul, 0)|(83);
            Int128 result2A = |Int128.RotateLeft(c, 0)|(84);
            Int128 result2B = |Int128.RotateLeft('a', 0)|(85);
        }

        public void RotateRight(Int128 n)
        {
            const int c = 1;

            var result11 = |Int128.RotateRight(n, 0)|(86);
            var result12 = |Int128.RotateRight(0x01, 0)|(87);
            var result13 = |Int128.RotateRight(0x01u, 0)|(88);
            var result14 = |Int128.RotateRight(0x01L, 0)|(89);
            var result15 = |Int128.RotateRight(0x01ul, 0)|(90);
            var result16 = |Int128.RotateRight(1 + 1, 0)|(91);
            var result17 = |Int128.RotateRight(1u + 1u, 0)|(92);
            var result18 = |Int128.RotateRight(1L + 1L, 0)|(93);
            var result19 = |Int128.RotateRight(1ul + 1ul, 0)|(94);
            var result1A = |Int128.RotateRight(c, 0)|(95);
            var result1B = |Int128.RotateRight('a', 0)|(96);

            Int128 result21 = |Int128.RotateRight(n, 0)|(97);
            Int128 result22 = |Int128.RotateRight(0x01, 0)|(98);
            Int128 result23 = |Int128.RotateRight(0x01u, 0)|(99);
            Int128 result24 = |Int128.RotateRight(0x01L, 0)|(100);
            Int128 result25 = |Int128.RotateRight(0x01ul, 0)|(101);
            Int128 result26 = |Int128.RotateRight(1 + 1, 0)|(102);
            Int128 result27 = |Int128.RotateRight(1u + 1u, 0)|(103);
            Int128 result28 = |Int128.RotateRight(1L + 1L, 0)|(104);
            Int128 result29 = |Int128.RotateRight(1ul + 1ul, 0)|(105);
            Int128 result2A = |Int128.RotateRight(c, 0)|(106);
            Int128 result2B = |Int128.RotateRight('a', 0)|(107);
        }
    }
}
------------------------------------------------
0: The expression is always 1.
QUICKFIXES:
Replace with '(Int128)0x0001'
Replace with '(Int128)1'
1: The expression is always 1.
QUICKFIXES:
Replace with '(Int128)0x0001uL'
Replace with '(Int128)1'
2: The expression is always 1.
QUICKFIXES:
Replace with '(Int128)0x0001u'
Replace with '(Int128)1'
3: The expression is always 1.
QUICKFIXES:
Replace with '(Int128)0x0001L'
Replace with '(Int128)1'
4: The expression is always 1.
QUICKFIXES:
Replace with '(Int128)c'
Replace with '(Int128)1'
5: The expression is always 97.
QUICKFIXES:
Replace with '(Int128)'a''
Replace with '(Int128)97'
6: The expression is always 1.
QUICKFIXES:
Replace with '0x0001'
Replace with '1'
7: The expression is always 1.
QUICKFIXES:
Replace with '0x0001uL'
Replace with '1'
8: The expression is always 1.
QUICKFIXES:
Replace with '0x0001u'
Replace with '1'
9: The expression is always 1.
QUICKFIXES:
Replace with '0x0001L'
Replace with '1'
10: The expression is always 1.
QUICKFIXES:
Replace with 'c'
Replace with '1'
11: The expression is always 97.
QUICKFIXES:
Replace with ''a''
Replace with '97'
12: The expression is always (0, 0).
QUICKFIXES:
Replace with '(Quotient: (Int128)0, Remainder: (Int128)0)'
13: The expression is always (0, 0).
QUICKFIXES:
Replace with '(0, 0)'
14: The expression is always (0, 0).
QUICKFIXES:
Replace with '(0, 0)'
15: The expression is always false.
QUICKFIXES:
Replace with 'false'
16: The expression is always 10.
QUICKFIXES:
Replace with '(Int128)0x0A'
Replace with '(Int128)10'
17: The expression is always 10.
QUICKFIXES:
Replace with '(Int128)10ul'
Replace with '(Int128)10'
18: The expression is always 10.
QUICKFIXES:
Replace with '(Int128)10u'
Replace with '(Int128)10'
19: The expression is always 10.
QUICKFIXES:
Replace with '(Int128)10L'
Replace with '(Int128)10'
20: The expression is always 10.
QUICKFIXES:
Replace with '(Int128)c'
Replace with '(Int128)10'
21: The expression is always 97.
QUICKFIXES:
Replace with '(Int128)'a''
Replace with '(Int128)97'
22: The expression is always 10.
QUICKFIXES:
Replace with '0x0A'
Replace with '10'
23: The expression is always 10.
QUICKFIXES:
Replace with '10ul'
Replace with '10'
24: The expression is always 10.
QUICKFIXES:
Replace with '10u'
Replace with '10'
25: The expression is always 10.
QUICKFIXES:
Replace with '10L'
Replace with '10'
26: The expression is always 10.
QUICKFIXES:
Replace with 'c'
Replace with '10'
27: The expression is always 97.
QUICKFIXES:
Replace with ''a''
Replace with '97'
28: The expression is always 10.
QUICKFIXES:
Replace with '(Int128)0x0A'
Replace with '(Int128)10'
29: The expression is always 10.
QUICKFIXES:
Replace with '(Int128)10ul'
Replace with '(Int128)10'
30: The expression is always 10.
QUICKFIXES:
Replace with '(Int128)10u'
Replace with '(Int128)10'
31: The expression is always 10.
QUICKFIXES:
Replace with '(Int128)10L'
Replace with '(Int128)10'
32: The expression is always 10.
QUICKFIXES:
Replace with '(Int128)c'
Replace with '(Int128)10'
33: The expression is always 97.
QUICKFIXES:
Replace with '(Int128)'a''
Replace with '(Int128)97'
34: The expression is always 10.
QUICKFIXES:
Replace with '0x0A'
Replace with '10'
35: The expression is always 10.
QUICKFIXES:
Replace with '10ul'
Replace with '10'
36: The expression is always 10.
QUICKFIXES:
Replace with '10u'
Replace with '10'
37: The expression is always 10.
QUICKFIXES:
Replace with '10L'
Replace with '10'
38: The expression is always 10.
QUICKFIXES:
Replace with 'c'
Replace with '10'
39: The expression is always 97.
QUICKFIXES:
Replace with ''a''
Replace with '97'
40: The expression is always 10.
QUICKFIXES:
Replace with '(Int128)0x0A'
Replace with '(Int128)10'
41: The expression is always 10.
QUICKFIXES:
Replace with '(Int128)10ul'
Replace with '(Int128)10'
42: The expression is always 10.
QUICKFIXES:
Replace with '(Int128)10u'
Replace with '(Int128)10'
43: The expression is always 10.
QUICKFIXES:
Replace with '(Int128)10L'
Replace with '(Int128)10'
44: The expression is always 10.
QUICKFIXES:
Replace with '(Int128)c'
Replace with '(Int128)10'
45: The expression is always 97.
QUICKFIXES:
Replace with '(Int128)'a''
Replace with '(Int128)97'
46: The expression is always 10.
QUICKFIXES:
Replace with '0x0A'
Replace with '10'
47: The expression is always 10.
QUICKFIXES:
Replace with '10ul'
Replace with '10'
48: The expression is always 10.
QUICKFIXES:
Replace with '10u'
Replace with '10'
49: The expression is always 10.
QUICKFIXES:
Replace with '10L'
Replace with '10'
50: The expression is always 10.
QUICKFIXES:
Replace with 'c'
Replace with '10'
51: The expression is always 97.
QUICKFIXES:
Replace with ''a''
Replace with '97'
52: The expression is always 10.
QUICKFIXES:
Replace with '(Int128)0x0A'
Replace with '(Int128)10'
53: The expression is always 10.
QUICKFIXES:
Replace with '(Int128)10ul'
Replace with '(Int128)10'
54: The expression is always 10.
QUICKFIXES:
Replace with '(Int128)10u'
Replace with '(Int128)10'
55: The expression is always 10.
QUICKFIXES:
Replace with '(Int128)10L'
Replace with '(Int128)10'
56: The expression is always 10.
QUICKFIXES:
Replace with '(Int128)c'
Replace with '(Int128)10'
57: The expression is always 97.
QUICKFIXES:
Replace with '(Int128)'a''
Replace with '(Int128)97'
58: The expression is always 10.
QUICKFIXES:
Replace with '0x0A'
Replace with '10'
59: The expression is always 10.
QUICKFIXES:
Replace with '10ul'
Replace with '10'
60: The expression is always 10.
QUICKFIXES:
Replace with '10u'
Replace with '10'
61: The expression is always 10.
QUICKFIXES:
Replace with '10L'
Replace with '10'
62: The expression is always 10.
QUICKFIXES:
Replace with 'c'
Replace with '10'
63: The expression is always 97.
QUICKFIXES:
Replace with ''a''
Replace with '97'
64: The expression is always the same as the first argument.
QUICKFIXES:
Replace with 'n'
65: The expression is always the same as the first argument.
QUICKFIXES:
Replace with '(Int128)0x01'
66: The expression is always the same as the first argument.
QUICKFIXES:
Replace with '(Int128)0x01u'
67: The expression is always the same as the first argument.
QUICKFIXES:
Replace with '(Int128)0x01L'
68: The expression is always the same as the first argument.
QUICKFIXES:
Replace with '(Int128)0x01ul'
69: The expression is always the same as the first argument.
QUICKFIXES:
Replace with '(Int128)(1 + 1)'
70: The expression is always the same as the first argument.
QUICKFIXES:
Replace with '(Int128)(1u + 1u)'
71: The expression is always the same as the first argument.
QUICKFIXES:
Replace with '(Int128)(1L + 1L)'
72: The expression is always the same as the first argument.
QUICKFIXES:
Replace with '(Int128)(1ul + 1ul)'
73: The expression is always the same as the first argument.
QUICKFIXES:
Replace with '(Int128)c'
74: The expression is always the same as the first argument.
QUICKFIXES:
Replace with '(Int128)'a''
75: The expression is always the same as the first argument.
QUICKFIXES:
Replace with 'n'
76: The expression is always the same as the first argument.
QUICKFIXES:
Replace with '0x01'
77: The expression is always the same as the first argument.
QUICKFIXES:
Replace with '0x01u'
78: The expression is always the same as the first argument.
QUICKFIXES:
Replace with '0x01L'
79: The expression is always the same as the first argument.
QUICKFIXES:
Replace with '0x01ul'
80: The expression is always the same as the first argument.
QUICKFIXES:
Replace with '1 + 1'
81: The expression is always the same as the first argument.
QUICKFIXES:
Replace with '1u + 1u'
82: The expression is always the same as the first argument.
QUICKFIXES:
Replace with '1L + 1L'
83: The expression is always the same as the first argument.
QUICKFIXES:
Replace with '1ul + 1ul'
84: The expression is always the same as the first argument.
QUICKFIXES:
Replace with 'c'
85: The expression is always the same as the first argument.
QUICKFIXES:
Replace with ''a''
86: The expression is always the same as the first argument.
QUICKFIXES:
Replace with 'n'
87: The expression is always the same as the first argument.
QUICKFIXES:
Replace with '(Int128)0x01'
88: The expression is always the same as the first argument.
QUICKFIXES:
Replace with '(Int128)0x01u'
89: The expression is always the same as the first argument.
QUICKFIXES:
Replace with '(Int128)0x01L'
90: The expression is always the same as the first argument.
QUICKFIXES:
Replace with '(Int128)0x01ul'
91: The expression is always the same as the first argument.
QUICKFIXES:
Replace with '(Int128)(1 + 1)'
92: The expression is always the same as the first argument.
QUICKFIXES:
Replace with '(Int128)(1u + 1u)'
93: The expression is always the same as the first argument.
QUICKFIXES:
Replace with '(Int128)(1L + 1L)'
94: The expression is always the same as the first argument.
QUICKFIXES:
Replace with '(Int128)(1ul + 1ul)'
95: The expression is always the same as the first argument.
QUICKFIXES:
Replace with '(Int128)c'
96: The expression is always the same as the first argument.
QUICKFIXES:
Replace with '(Int128)'a''
97: The expression is always the same as the first argument.
QUICKFIXES:
Replace with 'n'
98: The expression is always the same as the first argument.
QUICKFIXES:
Replace with '0x01'
99: The expression is always the same as the first argument.
QUICKFIXES:
Replace with '0x01u'
100: The expression is always the same as the first argument.
QUICKFIXES:
Replace with '0x01L'
101: The expression is always the same as the first argument.
QUICKFIXES:
Replace with '0x01ul'
102: The expression is always the same as the first argument.
QUICKFIXES:
Replace with '1 + 1'
103: The expression is always the same as the first argument.
QUICKFIXES:
Replace with '1u + 1u'
104: The expression is always the same as the first argument.
QUICKFIXES:
Replace with '1L + 1L'
105: The expression is always the same as the first argument.
QUICKFIXES:
Replace with '1ul + 1ul'
106: The expression is always the same as the first argument.
QUICKFIXES:
Replace with 'c'
107: The expression is always the same as the first argument.
QUICKFIXES:
Replace with ''a''
