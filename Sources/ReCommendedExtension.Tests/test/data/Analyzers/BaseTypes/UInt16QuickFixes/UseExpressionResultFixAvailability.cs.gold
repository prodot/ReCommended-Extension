using System;

namespace Test
{
    public class UInt16s
    {
        public void Clamp(ushort number)
        {
            var result11 = |ushort.Clamp(number, 1, 0x01)|(0);
            var result12 = |ushort.Clamp(number, 97, 'a')|(1);

            ushort result21 = |ushort.Clamp(number, 1, 0x01)|(2);
            ushort result22 = |ushort.Clamp(number, 97, 'a')|(3);

            var result31 = |ushort.Clamp(number, ushort.MinValue, ushort.MaxValue)|(4);
            var result32 = |ushort.Clamp(1, ushort.MinValue, ushort.MaxValue)|(5);
            var result33 = |ushort.Clamp('a', ushort.MinValue, ushort.MaxValue)|(6);

            ushort result41 = |ushort.Clamp(number, ushort.MinValue, ushort.MaxValue)|(7);
            ushort result42 = |ushort.Clamp(1, ushort.MinValue, ushort.MaxValue)|(8);
            ushort result43 = |ushort.Clamp('a', ushort.MinValue, ushort.MaxValue)|(9);

            var result51 = |Math.Clamp(number, (ushort)1, (ushort)1)|(10);
            var result52 = |Math.Clamp(number, ushort.MinValue, ushort.MaxValue)|(11);
        }

        public void DivRem(ushort left)
        {
            const int c = 1;

            var result11 = |ushort.DivRem(0, 10)|(12);

            (ushort, ushort) result21 = |ushort.DivRem(0, 10)|(13);

            (ushort quotient, ushort remainder) result32 = |ushort.DivRem(0, 10)|(14);

            var result31 = |ushort.DivRem(left, 1)|(15);
            var result32 = |ushort.DivRem(0x10, 1)|(16);
            var result32 = |ushort.DivRem(c, 1)|(17);
            var result33 = |ushort.DivRem('a', 1)|(18);

            (ushort, ushort) result41 = |ushort.DivRem(left, 1)|(19);
            (ushort, ushort) result42 = |ushort.DivRem(0x10, 1)|(20);
            (ushort, ushort) result42 = |ushort.DivRem(c, 1)|(21);
            (ushort, ushort) result43 = |ushort.DivRem('a', 1)|(22);

            (ushort quotient, ushort remainder) result51 = |ushort.DivRem(left, 1)|(23);
            (ushort quotient, ushort remainder) result52 = |ushort.DivRem(0x10, 1)|(24);
            (ushort quotient, ushort remainder) result52 = |ushort.DivRem(c, 1)|(25);
            (ushort quotient, ushort remainder) result53 = |ushort.DivRem('a', 1)|(26);

            var result61 = |Math.DivRem((ushort)0, (ushort)10)|(27);
            var result62 = |Math.DivRem(left, (ushort)1)|(28);
        }

        public void Equals(ushort number)
        {
            var result = |number.Equals(null)|(29);
        }

        public void GetTypeCode(ushort number)
        {
            var result = |number.GetTypeCode()|(30);
        }

        public void Max()
        {
            const int c = 10;

            var result11 = |ushort.Max(10, 0x0A)|(31);
            var result12 = |ushort.Max(10, c)|(32);
            var result13 = |ushort.Max(97, 'a')|(33);

            ushort result21 = |ushort.Max(10, 0x0A)|(34);
            ushort result22 = |ushort.Max(10, c)|(35);
            ushort result23 = |ushort.Max(97, 'a')|(36);

            var result31 = |Math.Max((ushort)10, (ushort)10)|(37);
        }
    }
}
------------------------------------------------
0: The expression is always 1.
QUICKFIXES:
Replace with '(ushort)0x01'
Replace with '(ushort)1'
1: The expression is always 97.
QUICKFIXES:
Replace with '(ushort)'a''
Replace with '(ushort)97'
2: The expression is always 1.
QUICKFIXES:
Replace with '0x01'
Replace with '1'
3: The expression is always 97.
QUICKFIXES:
Replace with ''a''
Replace with '97'
4: The expression is always the same as the first argument.
QUICKFIXES:
Replace with 'number'
5: The expression is always the same as the first argument.
QUICKFIXES:
Replace with '(ushort)1'
6: The expression is always the same as the first argument.
QUICKFIXES:
Replace with '(ushort)'a''
7: The expression is always the same as the first argument.
QUICKFIXES:
Replace with 'number'
8: The expression is always the same as the first argument.
QUICKFIXES:
Replace with '1'
9: The expression is always the same as the first argument.
QUICKFIXES:
Replace with ''a''
10: The expression is always 1.
QUICKFIXES:
Replace with '(ushort)1'
11: The expression is always the same as the first argument.
QUICKFIXES:
Replace with 'number'
12: The expression is always (0, 0).
QUICKFIXES:
Replace with '(Quotient: (ushort)0, Remainder: (ushort)0)'
13: The expression is always (0, 0).
QUICKFIXES:
Replace with '(0, 0)'
14: The expression is always (0, 0).
QUICKFIXES:
Replace with '(0, 0)'
15: The expression is always the same as the first argument with no remainder.
QUICKFIXES:
Replace with '(Quotient: left, Remainder: (ushort)0)'
16: The expression is always the same as the first argument with no remainder.
QUICKFIXES:
Replace with '(Quotient: (ushort)0x10, Remainder: (ushort)0)'
17: The expression is always the same as the first argument with no remainder.
QUICKFIXES:
Replace with '(Quotient: (ushort)c, Remainder: (ushort)0)'
18: The expression is always the same as the first argument with no remainder.
QUICKFIXES:
Replace with '(Quotient: (ushort)'a', Remainder: (ushort)0)'
19: The expression is always the same as the first argument with no remainder.
QUICKFIXES:
Replace with '(left, 0)'
20: The expression is always the same as the first argument with no remainder.
QUICKFIXES:
Replace with '(0x10, 0)'
21: The expression is always the same as the first argument with no remainder.
QUICKFIXES:
Replace with '(c, 0)'
22: The expression is always the same as the first argument with no remainder.
QUICKFIXES:
Replace with '('a', 0)'
23: The expression is always the same as the first argument with no remainder.
QUICKFIXES:
Replace with '(left, 0)'
24: The expression is always the same as the first argument with no remainder.
QUICKFIXES:
Replace with '(0x10, 0)'
25: The expression is always the same as the first argument with no remainder.
QUICKFIXES:
Replace with '(c, 0)'
26: The expression is always the same as the first argument with no remainder.
QUICKFIXES:
Replace with '('a', 0)'
27: The expression is always (0, 0).
QUICKFIXES:
Replace with '(Quotient: (ushort)0, Remainder: (ushort)0)'
28: The expression is always the same as the first argument with no remainder.
QUICKFIXES:
Replace with '(Quotient: left, Remainder: (ushort)0)'
29: The expression is always false.
QUICKFIXES:
Replace with 'false'
30: The expression is always TypeCode.UInt16.
QUICKFIXES:
Replace with 'TypeCode.UInt16'
31: The expression is always 10.
QUICKFIXES:
Replace with '(ushort)0x0A'
Replace with '(ushort)10'
32: The expression is always 10.
QUICKFIXES:
Replace with '(ushort)c'
Replace with '(ushort)10'
33: The expression is always 97.
QUICKFIXES:
Replace with '(ushort)'a''
Replace with '(ushort)97'
34: The expression is always 10.
QUICKFIXES:
Replace with '0x0A'
Replace with '10'
35: The expression is always 10.
QUICKFIXES:
Replace with 'c'
Replace with '10'
36: The expression is always 97.
QUICKFIXES:
Replace with ''a''
Replace with '97'
37: The expression is always 10.
QUICKFIXES:
Replace with '(ushort)10'
