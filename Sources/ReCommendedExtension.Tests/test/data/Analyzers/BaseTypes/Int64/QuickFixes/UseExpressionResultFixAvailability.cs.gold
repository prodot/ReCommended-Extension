using System;

namespace Test
{
    public class Int64s
    {
        public void Clamp(long number)
        {
            const int c = 1;

            var result11 = |long.Clamp(number, 1, 0x0001)|(0);
            var result12 = |long.Clamp(number, 1, 0x0001L)|(1);
            var result13 = |long.Clamp(number, 1, 0x0001u)|(2);
            var result14 = |long.Clamp(number, 1, c)|(3);
            var result15 = |long.Clamp(number, 97, 'a')|(4);

            long result21 = |long.Clamp(number, 1, 0x0001)|(5);
            long result22 = |long.Clamp(number, 1, 0x0001L)|(6);
            long result23 = |long.Clamp(number, 1, 0x0001u)|(7);
            long result24 = |long.Clamp(number, 1, c)|(8);
            long result25 = |long.Clamp(number, 97, 'a')|(9);

            var result31 = |long.Clamp(number, long.MinValue, long.MaxValue)|(10);
            var result32 = |long.Clamp(1, long.MinValue, long.MaxValue)|(11);
            var result33 = |long.Clamp(1L, long.MinValue, long.MaxValue)|(12);
            var result34 = |long.Clamp(1u, long.MinValue, long.MaxValue)|(13);
            var result35 = |long.Clamp(c, long.MinValue, long.MaxValue)|(14);
            var result36 = |long.Clamp('a', long.MinValue, long.MaxValue)|(15);

            long result41 = |long.Clamp(number, long.MinValue, long.MaxValue)|(16);
            long result42 = |long.Clamp(1, long.MinValue, long.MaxValue)|(17);
            long result43 = |long.Clamp(1L, long.MinValue, long.MaxValue)|(18);
            long result44 = |long.Clamp(1u, long.MinValue, long.MaxValue)|(19);
            long result45 = |long.Clamp(c, long.MinValue, long.MaxValue)|(20);
            long result46 = |long.Clamp('a', long.MinValue, long.MaxValue)|(21);

            var result51 = |Math.Clamp(number, 1L, 1L)|(22);
            var result52 = |Math.Clamp(number, long.MinValue, long.MaxValue)|(23);
        }

        public void DivRem(long left)
        {
            var result11 = |long.DivRem(0, 10)|(24);

            (long, long) result21 = |long.DivRem(0, 10)|(25);

            (long quotient, long remainder) result32 = |long.DivRem(0, 10)|(26);

            var result71 = |Math.DivRem(0L, 10L)|(27);
        }

        public void Equals(long number)
        {
            var result = |number.Equals(null)|(28);
        }

        public void GetTypeCode(long number)
        {
            var result = |number.GetTypeCode()|(29);
        }

        public void Max()
        {
            const int c = 10;

            var result11 = |long.Max(10, 0x0A)|(30);
            var result12 = |long.Max(10, 10L)|(31);
            var result13 = |long.Max(10, 10u)|(32);
            var result14 = |long.Max(10, c)|(33);
            var result15 = |long.Max(97, 'a')|(34);

            long result21 = |long.Max(10, 0x0A)|(35);
            long result22 = |long.Max(10, 10L)|(36);
            long result23 = |long.Max(10, 10u)|(37);
            long result24 = |long.Max(10, c)|(38);
            long result25 = |long.Max(97, 'a')|(39);

            var result31 = |Math.Max(10L, 10L)|(40);
        }

        public void MaxMagnitude()
        {
            const int c = 10;

            var result11 = |long.MaxMagnitude(10, 0x0A)|(41);
            var result12 = |long.MaxMagnitude(10, 10L)|(42);
            var result13 = |long.MaxMagnitude(10, 10u)|(43);
            var result14 = |long.MaxMagnitude(10, c)|(44);
            var result15 = |long.MaxMagnitude(97, 'a')|(45);

            long result21 = |long.MaxMagnitude(10, 0x0A)|(46);
            long result22 = |long.MaxMagnitude(10, 10L)|(47);
            long result23 = |long.MaxMagnitude(10, 10u)|(48);
            long result24 = |long.MaxMagnitude(10, c)|(49);
            long result25 = |long.MaxMagnitude(97, 'a')|(50);
        }

        public void Min()
        {
            const int c = 10;

            var result11 = |long.Min(10, 0x0A)|(51);
            var result12 = |long.Min(10, 10L)|(52);
            var result13 = |long.Min(10, 10u)|(53);
            var result14 = |long.Min(10, c)|(54);
            var result15 = |long.Min(97, 'a')|(55);

            long result21 = |long.Min(10, 0x0A)|(56);
            long result22 = |long.Min(10, 10L)|(57);
            long result23 = |long.Min(10, 10u)|(58);
            long result24 = |long.Min(10, c)|(59);
            long result25 = |long.Min(97, 'a')|(60);

            var result31 = |Math.Min(10L, 10L)|(61);
        }

        public void MinMagnitude()
        {
            const int c = 10;

            var result11 = |long.MinMagnitude(10, 0x0A)|(62);
            var result12 = |long.MinMagnitude(10, 10L)|(63);
            var result13 = |long.MinMagnitude(10, 10u)|(64);
            var result14 = |long.MinMagnitude(10, c)|(65);
            var result15 = |long.MinMagnitude(97, 'a')|(66);

            long result21 = |long.MinMagnitude(10, 0x0A)|(67);
            long result22 = |long.MinMagnitude(10, 10L)|(68);
            long result23 = |long.MinMagnitude(10, 10u)|(69);
            long result24 = |long.MinMagnitude(10, c)|(70);
            long result25 = |long.MinMagnitude(97, 'a')|(71);
        }

        public void RotateLeft(long n)
        {
            const int c = 1;

            var result11 = |long.RotateLeft(n, 0)|(72);
            var result12 = |long.RotateLeft(0x01, 0)|(73);
            var result13 = |long.RotateLeft(0x01u, 0)|(74);
            var result14 = |long.RotateLeft(0x01L, 0)|(75);
            var result15 = |long.RotateLeft(1 + 1, 0)|(76);
            var result16 = |long.RotateLeft(1u + 1u, 0)|(77);
            var result17 = |long.RotateLeft(1L + 1L, 0)|(78);
            var result18 = |long.RotateLeft(c, 0)|(79);
            var result19 = |long.RotateLeft('a', 0)|(80);

            long result21 = |long.RotateLeft(n, 0)|(81);
            long result22 = |long.RotateLeft(0x01, 0)|(82);
            long result23 = |long.RotateLeft(0x01u, 0)|(83);
            long result24 = |long.RotateLeft(0x01L, 0)|(84);
            long result25 = |long.RotateLeft(1 + 1, 0)|(85);
            long result26 = |long.RotateLeft(1u + 1u, 0)|(86);
            long result27 = |long.RotateLeft(1L + 1L, 0)|(87);
            long result28 = |long.RotateLeft(c, 0)|(88);
            long result29 = |long.RotateLeft('a', 0)|(89);
        }

        public void RotateRight(long n)
        {
            const int c = 1;

            var result11 = |long.RotateRight(n, 0)|(90);
            var result12 = |long.RotateRight(0x01, 0)|(91);
            var result13 = |long.RotateRight(0x01u, 0)|(92);
            var result14 = |long.RotateRight(0x01L, 0)|(93);
            var result15 = |long.RotateRight(1 + 1, 0)|(94);
            var result16 = |long.RotateRight(1u + 1u, 0)|(95);
            var result17 = |long.RotateRight(1L + 1L, 0)|(96);
            var result18 = |long.RotateRight(c, 0)|(97);
            var result19 = |long.RotateRight('a', 0)|(98);

            long result21 = |long.RotateRight(n, 0)|(99);
            long result22 = |long.RotateRight(0x01, 0)|(100);
            long result23 = |long.RotateRight(0x01u, 0)|(101);
            long result24 = |long.RotateRight(0x01L, 0)|(102);
            long result25 = |long.RotateRight(1 + 1, 0)|(103);
            long result26 = |long.RotateRight(1u + 1u, 0)|(104);
            long result27 = |long.RotateRight(1L + 1L, 0)|(105);
            long result28 = |long.RotateRight(c, 0)|(106);
            long result29 = |long.RotateRight('a', 0)|(107);
        }
    }
}
------------------------------------------------
0: The expression is always 1.
QUICKFIXES:
Replace with '0x0001L'
Replace with '1L'
1: The expression is always 1.
QUICKFIXES:
Replace with '0x0001L'
Replace with '1L'
2: The expression is always 1.
QUICKFIXES:
Replace with '0x0001L'
Replace with '1L'
3: The expression is always 1.
QUICKFIXES:
Replace with '(long)c'
Replace with '1L'
4: The expression is always 97.
QUICKFIXES:
Replace with '(long)'a''
Replace with '97L'
5: The expression is always 1.
QUICKFIXES:
Replace with '0x0001'
Replace with '1'
6: The expression is always 1.
QUICKFIXES:
Replace with '0x0001L'
Replace with '1'
7: The expression is always 1.
QUICKFIXES:
Replace with '0x0001u'
Replace with '1'
8: The expression is always 1.
QUICKFIXES:
Replace with 'c'
Replace with '1'
9: The expression is always 97.
QUICKFIXES:
Replace with ''a''
Replace with '97'
10: The expression is always the same as the first argument.
QUICKFIXES:
Replace with 'number'
11: The expression is always the same as the first argument.
QUICKFIXES:
Replace with '1L'
12: The expression is always the same as the first argument.
QUICKFIXES:
Replace with '1L'
13: The expression is always the same as the first argument.
QUICKFIXES:
Replace with '1L'
14: The expression is always the same as the first argument.
QUICKFIXES:
Replace with '(long)c'
15: The expression is always the same as the first argument.
QUICKFIXES:
Replace with '(long)'a''
16: The expression is always the same as the first argument.
QUICKFIXES:
Replace with 'number'
17: The expression is always the same as the first argument.
QUICKFIXES:
Replace with '1'
18: The expression is always the same as the first argument.
QUICKFIXES:
Replace with '1L'
19: The expression is always the same as the first argument.
QUICKFIXES:
Replace with '1u'
20: The expression is always the same as the first argument.
QUICKFIXES:
Replace with 'c'
21: The expression is always the same as the first argument.
QUICKFIXES:
Replace with ''a''
22: The expression is always 1.
QUICKFIXES:
Replace with '1L'
23: The expression is always the same as the first argument.
QUICKFIXES:
Replace with 'number'
24: The expression is always (0, 0).
QUICKFIXES:
Replace with '(Quotient: 0L, Remainder: 0L)'
25: The expression is always (0, 0).
QUICKFIXES:
Replace with '(0, 0)'
26: The expression is always (0, 0).
QUICKFIXES:
Replace with '(0, 0)'
27: The expression is always (0, 0).
QUICKFIXES:
Replace with '(Quotient: 0L, Remainder: 0L)'
28: The expression is always false.
QUICKFIXES:
Replace with 'false'
29: The expression is always TypeCode.Int64.
QUICKFIXES:
Replace with 'TypeCode.Int64'
30: The expression is always 10.
QUICKFIXES:
Replace with '0x0AL'
Replace with '10L'
31: The expression is always 10.
QUICKFIXES:
Replace with '10L'
32: The expression is always 10.
QUICKFIXES:
Replace with '10L'
33: The expression is always 10.
QUICKFIXES:
Replace with '(long)c'
Replace with '10L'
34: The expression is always 97.
QUICKFIXES:
Replace with '(long)'a''
Replace with '97L'
35: The expression is always 10.
QUICKFIXES:
Replace with '0x0A'
Replace with '10'
36: The expression is always 10.
QUICKFIXES:
Replace with '10L'
Replace with '10'
37: The expression is always 10.
QUICKFIXES:
Replace with '10u'
Replace with '10'
38: The expression is always 10.
QUICKFIXES:
Replace with 'c'
Replace with '10'
39: The expression is always 97.
QUICKFIXES:
Replace with ''a''
Replace with '97'
40: The expression is always 10.
QUICKFIXES:
Replace with '10L'
41: The expression is always 10.
QUICKFIXES:
Replace with '0x0AL'
Replace with '10L'
42: The expression is always 10.
QUICKFIXES:
Replace with '10L'
43: The expression is always 10.
QUICKFIXES:
Replace with '10L'
44: The expression is always 10.
QUICKFIXES:
Replace with '(long)c'
Replace with '10L'
45: The expression is always 97.
QUICKFIXES:
Replace with '(long)'a''
Replace with '97L'
46: The expression is always 10.
QUICKFIXES:
Replace with '0x0A'
Replace with '10'
47: The expression is always 10.
QUICKFIXES:
Replace with '10L'
Replace with '10'
48: The expression is always 10.
QUICKFIXES:
Replace with '10u'
Replace with '10'
49: The expression is always 10.
QUICKFIXES:
Replace with 'c'
Replace with '10'
50: The expression is always 97.
QUICKFIXES:
Replace with ''a''
Replace with '97'
51: The expression is always 10.
QUICKFIXES:
Replace with '0x0AL'
Replace with '10L'
52: The expression is always 10.
QUICKFIXES:
Replace with '10L'
53: The expression is always 10.
QUICKFIXES:
Replace with '10L'
54: The expression is always 10.
QUICKFIXES:
Replace with '(long)c'
Replace with '10L'
55: The expression is always 97.
QUICKFIXES:
Replace with '(long)'a''
Replace with '97L'
56: The expression is always 10.
QUICKFIXES:
Replace with '0x0A'
Replace with '10'
57: The expression is always 10.
QUICKFIXES:
Replace with '10L'
Replace with '10'
58: The expression is always 10.
QUICKFIXES:
Replace with '10u'
Replace with '10'
59: The expression is always 10.
QUICKFIXES:
Replace with 'c'
Replace with '10'
60: The expression is always 97.
QUICKFIXES:
Replace with ''a''
Replace with '97'
61: The expression is always 10.
QUICKFIXES:
Replace with '10L'
62: The expression is always 10.
QUICKFIXES:
Replace with '0x0AL'
Replace with '10L'
63: The expression is always 10.
QUICKFIXES:
Replace with '10L'
64: The expression is always 10.
QUICKFIXES:
Replace with '10L'
65: The expression is always 10.
QUICKFIXES:
Replace with '(long)c'
Replace with '10L'
66: The expression is always 97.
QUICKFIXES:
Replace with '(long)'a''
Replace with '97L'
67: The expression is always 10.
QUICKFIXES:
Replace with '0x0A'
Replace with '10'
68: The expression is always 10.
QUICKFIXES:
Replace with '10L'
Replace with '10'
69: The expression is always 10.
QUICKFIXES:
Replace with '10u'
Replace with '10'
70: The expression is always 10.
QUICKFIXES:
Replace with 'c'
Replace with '10'
71: The expression is always 97.
QUICKFIXES:
Replace with ''a''
Replace with '97'
72: The expression is always the same as the first argument.
QUICKFIXES:
Replace with 'n'
73: The expression is always the same as the first argument.
QUICKFIXES:
Replace with '0x01L'
74: The expression is always the same as the first argument.
QUICKFIXES:
Replace with '0x01L'
75: The expression is always the same as the first argument.
QUICKFIXES:
Replace with '0x01L'
76: The expression is always the same as the first argument.
QUICKFIXES:
Replace with '(long)(1 + 1)'
77: The expression is always the same as the first argument.
QUICKFIXES:
Replace with '(long)(1u + 1u)'
78: The expression is always the same as the first argument.
QUICKFIXES:
Replace with '1L + 1L'
79: The expression is always the same as the first argument.
QUICKFIXES:
Replace with '(long)c'
80: The expression is always the same as the first argument.
QUICKFIXES:
Replace with '(long)'a''
81: The expression is always the same as the first argument.
QUICKFIXES:
Replace with 'n'
82: The expression is always the same as the first argument.
QUICKFIXES:
Replace with '0x01'
83: The expression is always the same as the first argument.
QUICKFIXES:
Replace with '0x01u'
84: The expression is always the same as the first argument.
QUICKFIXES:
Replace with '0x01L'
85: The expression is always the same as the first argument.
QUICKFIXES:
Replace with '1 + 1'
86: The expression is always the same as the first argument.
QUICKFIXES:
Replace with '1u + 1u'
87: The expression is always the same as the first argument.
QUICKFIXES:
Replace with '1L + 1L'
88: The expression is always the same as the first argument.
QUICKFIXES:
Replace with 'c'
89: The expression is always the same as the first argument.
QUICKFIXES:
Replace with ''a''
90: The expression is always the same as the first argument.
QUICKFIXES:
Replace with 'n'
91: The expression is always the same as the first argument.
QUICKFIXES:
Replace with '0x01L'
92: The expression is always the same as the first argument.
QUICKFIXES:
Replace with '0x01L'
93: The expression is always the same as the first argument.
QUICKFIXES:
Replace with '0x01L'
94: The expression is always the same as the first argument.
QUICKFIXES:
Replace with '(long)(1 + 1)'
95: The expression is always the same as the first argument.
QUICKFIXES:
Replace with '(long)(1u + 1u)'
96: The expression is always the same as the first argument.
QUICKFIXES:
Replace with '1L + 1L'
97: The expression is always the same as the first argument.
QUICKFIXES:
Replace with '(long)c'
98: The expression is always the same as the first argument.
QUICKFIXES:
Replace with '(long)'a''
99: The expression is always the same as the first argument.
QUICKFIXES:
Replace with 'n'
100: The expression is always the same as the first argument.
QUICKFIXES:
Replace with '0x01'
101: The expression is always the same as the first argument.
QUICKFIXES:
Replace with '0x01u'
102: The expression is always the same as the first argument.
QUICKFIXES:
Replace with '0x01L'
103: The expression is always the same as the first argument.
QUICKFIXES:
Replace with '1 + 1'
104: The expression is always the same as the first argument.
QUICKFIXES:
Replace with '1u + 1u'
105: The expression is always the same as the first argument.
QUICKFIXES:
Replace with '1L + 1L'
106: The expression is always the same as the first argument.
QUICKFIXES:
Replace with 'c'
107: The expression is always the same as the first argument.
QUICKFIXES:
Replace with ''a''
