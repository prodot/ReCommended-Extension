using System;
using System.Globalization;

namespace Test
{
    public class TimesOnly
    {
        public void RedundantArgumentRange(string s, ReadOnlySpan<char> s1, string format, string[] formats, out TimeOnly result)
        {
            var result11 = TimeOnly.TryParseExact(s, format, null, DateTimeStyles.None, out result);
            var result12 = TimeOnly.TryParseExact(s1, format, null, DateTimeStyles.None, out result);

            var result21 = TimeOnly.TryParseExact(s, formats, null, DateTimeStyles.None, out result);
            var result22 = TimeOnly.TryParseExact(s1, formats, null, DateTimeStyles.None, out result);
        }

        public void OtherArgument(string s, ReadOnlySpan<char> s1, string format, IFormatProvider provider, DateTimeStyles style, out TimeOnly result)
        {
            var result1 = TimeOnly.TryParseExact(s, "R", |provider|(0), style, out result);
            var result2 = TimeOnly.TryParseExact(s, |[format]|(1), out result);
            var result3 = TimeOnly.TryParseExact(s, |[format]|(2), provider, style, out result);
            var result4 = TimeOnly.TryParseExact(s, ["o", "r"], |provider|(3), style, out result);
            var result5 = TimeOnly.TryParseExact(s1, ["o", "r"], |provider|(4), style, out result);
        }

        public void RedundantElement(string s, ReadOnlySpan<char> s1, IFormatProvider provider, DateTimeStyles style, out TimeOnly result)
        {
            var result11 = TimeOnly.TryParseExact(s, ["t", |"t"|(5), "T", "o", |"O"|(6), "r", |"R"|(7)], out result);
            var result12 = TimeOnly.TryParseExact(s, (string[])["t", |"t"|(8), "T", "o", |"O"|(9), "r", |"R"|(10)], out result);
            var result13 = TimeOnly.TryParseExact(s, new[] { "t", |"t"|(11), "T", "o", |"O"|(12), "r", |"R"|(13) }, out result);
            var result14 = TimeOnly.TryParseExact(s, new string[] { "t", |"t"|(14), "T", "o", |"O"|(15), "r", |"R"|(16) }, out result);

            var result21 = TimeOnly.TryParseExact(s1, ["t", |"t"|(17), "T", "o", |"O"|(18), "r", |"R"|(19)], out result);
            var result22 = TimeOnly.TryParseExact(s1, (string[])["t", |"t"|(20), "T", "o", |"O"|(21), "r", |"R"|(22)], out result);
            var result23 = TimeOnly.TryParseExact(s1, new[] { "t", |"t"|(23), "T", "o", |"O"|(24), "r", |"R"|(25) }, out result);
            var result24 = TimeOnly.TryParseExact(s1, new string[] { "t", |"t"|(26), "T", "o", |"O"|(27), "r", |"R"|(28) }, out result);

            var result31 = TimeOnly.TryParseExact(s, ["t", |"t"|(29), "T", "o", |"O"|(30), "r", |"R"|(31)], provider, style, out result);
            var result32 = TimeOnly.TryParseExact(s, (string[])["t", |"t"|(32), "T", "o", |"O"|(33), "r", |"R"|(34)], provider, style, out result);
            var result33 = TimeOnly.TryParseExact(s, new[] { "t", |"t"|(35), "T", "o", |"O"|(36), "r", |"R"|(37) }, provider, style, out result);
            var result34 = TimeOnly.TryParseExact(s, new string[] { "t", |"t"|(38), "T", "o", |"O"|(39), "r", |"R"|(40) }, provider, style, out result);

            var result41 = TimeOnly.TryParseExact(s1, ["t", |"t"|(41), "T", "o", |"O"|(42), "r", |"R"|(43)], provider, style, out result);
            var result42 = TimeOnly.TryParseExact(s1, (string[])["t", |"t"|(44), "T", "o", |"O"|(45), "r", |"R"|(46)], provider, style, out result);
            var result43 = TimeOnly.TryParseExact(s1, new[] { "t", |"t"|(47), "T", "o", |"O"|(48), "r", |"R"|(49) }, provider, style, out result);
            var result44 = TimeOnly.TryParseExact(s1, new string[] { "t", |"t"|(50), "T", "o", |"O"|(51), "r", |"R"|(52) }, provider, style, out result);
        }

        public void NoDetection(string s, ReadOnlySpan<char> s1, string format, IFormatProvider provider, DateTimeStyles style, out TimeOnly result)
        {
            var result11 = TimeOnly.TryParseExact(s, format, provider, style, out result);
            var result12 = TimeOnly.TryParseExact(s1, format, provider, style, out result);

            var result21 = TimeOnly.TryParseExact(s, [format, format], out result);
            var result22 = TimeOnly.TryParseExact(s, ["t", "T", "o", "r"], out result);

            var result31 = TimeOnly.TryParseExact(s1, [format, format], out result);
            var result32 = TimeOnly.TryParseExact(s1, ["t", "T", "o", "r"], out result);

            var result41 = TimeOnly.TryParseExact(s, [format, format], provider, style, out result);
            var result42 = TimeOnly.TryParseExact(s1, [format, format], provider, style, out result);
        }
    }
}
---------------------------------------------------------
(0): ReSharper Suggestion: The format provider is ignored (pass null instead).
(1): ReSharper Suggestion: The only collection element should be passed directly.
(2): ReSharper Suggestion: The only collection element should be passed directly.
(3): ReSharper Suggestion: The format provider is ignored (pass null instead).
(4): ReSharper Suggestion: The format provider is ignored (pass null instead).
(5): ReSharper Dead Code: The string is already passed.
(6): ReSharper Dead Code: The equivalent string is already passed.
(7): ReSharper Dead Code: The equivalent string is already passed.
(8): ReSharper Dead Code: The string is already passed.
(9): ReSharper Dead Code: The equivalent string is already passed.
(10): ReSharper Dead Code: The equivalent string is already passed.
(11): ReSharper Dead Code: The string is already passed.
(12): ReSharper Dead Code: The equivalent string is already passed.
(13): ReSharper Dead Code: The equivalent string is already passed.
(14): ReSharper Dead Code: The string is already passed.
(15): ReSharper Dead Code: The equivalent string is already passed.
(16): ReSharper Dead Code: The equivalent string is already passed.
(17): ReSharper Dead Code: The string is already passed.
(18): ReSharper Dead Code: The equivalent string is already passed.
(19): ReSharper Dead Code: The equivalent string is already passed.
(20): ReSharper Dead Code: The string is already passed.
(21): ReSharper Dead Code: The equivalent string is already passed.
(22): ReSharper Dead Code: The equivalent string is already passed.
(23): ReSharper Dead Code: The string is already passed.
(24): ReSharper Dead Code: The equivalent string is already passed.
(25): ReSharper Dead Code: The equivalent string is already passed.
(26): ReSharper Dead Code: The string is already passed.
(27): ReSharper Dead Code: The equivalent string is already passed.
(28): ReSharper Dead Code: The equivalent string is already passed.
(29): ReSharper Dead Code: The string is already passed.
(30): ReSharper Dead Code: The equivalent string is already passed.
(31): ReSharper Dead Code: The equivalent string is already passed.
(32): ReSharper Dead Code: The string is already passed.
(33): ReSharper Dead Code: The equivalent string is already passed.
(34): ReSharper Dead Code: The equivalent string is already passed.
(35): ReSharper Dead Code: The string is already passed.
(36): ReSharper Dead Code: The equivalent string is already passed.
(37): ReSharper Dead Code: The equivalent string is already passed.
(38): ReSharper Dead Code: The string is already passed.
(39): ReSharper Dead Code: The equivalent string is already passed.
(40): ReSharper Dead Code: The equivalent string is already passed.
(41): ReSharper Dead Code: The string is already passed.
(42): ReSharper Dead Code: The equivalent string is already passed.
(43): ReSharper Dead Code: The equivalent string is already passed.
(44): ReSharper Dead Code: The string is already passed.
(45): ReSharper Dead Code: The equivalent string is already passed.
(46): ReSharper Dead Code: The equivalent string is already passed.
(47): ReSharper Dead Code: The string is already passed.
(48): ReSharper Dead Code: The equivalent string is already passed.
(49): ReSharper Dead Code: The equivalent string is already passed.
(50): ReSharper Dead Code: The string is already passed.
(51): ReSharper Dead Code: The equivalent string is already passed.
(52): ReSharper Dead Code: The equivalent string is already passed.
