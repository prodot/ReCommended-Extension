using System;
using System.Globalization;

namespace Test
{
    public class TimesOnly
    {
        public void RedundantArgumentRange(string s, ReadOnlySpan<char> s1, string format, string[] formats, out TimeOnly result)
        {
            var result11 = TimeOnly.TryParseExact(s, format, null, DateTimeStyles.None, out result);
            var result12 = TimeOnly.TryParseExact(s1, format, null, DateTimeStyles.None, out result);

            var result21 = TimeOnly.TryParseExact(s, formats, null, DateTimeStyles.None, out result);
            var result22 = TimeOnly.TryParseExact(s1, formats, null, DateTimeStyles.None, out result);
        }

        public void OtherArgument(string s, ReadOnlySpan<char> s1, string format, IFormatProvider provider, DateTimeStyles style, out TimeOnly result)
        {
            var result1 = TimeOnly.TryParseExact(s, "R", |provider|(0), style, out result);
            var result2 = TimeOnly.TryParseExact(s, |[format]|(1), out result);
            var result3 = TimeOnly.TryParseExact(s, |[format]|(2), provider, style, out result);
            var result4 = TimeOnly.TryParseExact(s, ["o", "r"], |provider|(3), style, out result);
            var result5 = TimeOnly.TryParseExact(s1, ["o", "r"], |provider|(4), style, out result);
        }

        public void RedundantElement(string s, ReadOnlySpan<char> s1, IFormatProvider provider, DateTimeStyles style, out TimeOnly result)
        {
            var result11 = TimeOnly.TryParseExact(s, ["t", "t", "T", "o", "O", "r", "R"], out result);
            var result12 = TimeOnly.TryParseExact(s, (string[])["t", "t", "T", "o", "O", "r", "R"], out result);
            var result13 = TimeOnly.TryParseExact(s, new[] { "t", "t", "T", "o", "O", "r", "R" }, out result);
            var result14 = TimeOnly.TryParseExact(s, new string[] { "t", "t", "T", "o", "O", "r", "R" }, out result);

            var result21 = TimeOnly.TryParseExact(s1, ["t", "t", "T", "o", "O", "r", "R"], out result);
            var result22 = TimeOnly.TryParseExact(s1, (string[])["t", "t", "T", "o", "O", "r", "R"], out result);
            var result23 = TimeOnly.TryParseExact(s1, new[] { "t", "t", "T", "o", "O", "r", "R" }, out result);
            var result24 = TimeOnly.TryParseExact(s1, new string[] { "t", "t", "T", "o", "O", "r", "R" }, out result);

            var result31 = TimeOnly.TryParseExact(s, ["t", "t", "T", "o", "O", "r", "R"], provider, style, out result);
            var result32 = TimeOnly.TryParseExact(s, (string[])["t", "t", "T", "o", "O", "r", "R"], provider, style, out result);
            var result33 = TimeOnly.TryParseExact(s, new[] { "t", "t", "T", "o", "O", "r", "R" }, provider, style, out result);
            var result34 = TimeOnly.TryParseExact(s, new string[] { "t", "t", "T", "o", "O", "r", "R" }, provider, style, out result);

            var result41 = TimeOnly.TryParseExact(s1, ["t", "t", "T", "o", "O", "r", "R"], provider, style, out result);
            var result42 = TimeOnly.TryParseExact(s1, (string[])["t", "t", "T", "o", "O", "r", "R"], provider, style, out result);
            var result43 = TimeOnly.TryParseExact(s1, new[] { "t", "t", "T", "o", "O", "r", "R" }, provider, style, out result);
            var result44 = TimeOnly.TryParseExact(s1, new string[] { "t", "t", "T", "o", "O", "r", "R" }, provider, style, out result);
        }

        public void NoDetection(string s, ReadOnlySpan<char> s1, string format, IFormatProvider provider, DateTimeStyles style, out TimeOnly result)
        {
            var result11 = TimeOnly.TryParseExact(s, format, provider, style, out result);
            var result12 = TimeOnly.TryParseExact(s1, format, provider, style, out result);

            var result21 = TimeOnly.TryParseExact(s, [format, format], out result);
            var result22 = TimeOnly.TryParseExact(s, ["t", "T", "o", "r"], out result);

            var result31 = TimeOnly.TryParseExact(s1, [format, format], out result);
            var result32 = TimeOnly.TryParseExact(s1, ["t", "T", "o", "r"], out result);

            var result41 = TimeOnly.TryParseExact(s, [format, format], provider, style, out result);
            var result42 = TimeOnly.TryParseExact(s1, [format, format], provider, style, out result);
        }
    }
}
---------------------------------------------------------
(0): ReSharper Suggestion: The format provider is ignored (pass null instead).
(1): ReSharper Suggestion: The only collection element should be passed directly.
(2): ReSharper Suggestion: The only collection element should be passed directly.
(3): ReSharper Suggestion: The format provider is ignored (pass null instead).
(4): ReSharper Suggestion: The format provider is ignored (pass null instead).
