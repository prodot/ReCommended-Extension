using System;

namespace Test
{
    public class Enums
    {
        public enum SampleEnum
        {
            Red,
            Green,
            Blue,
        }

        public void Parse(string value, ReadOnlySpan<char> value1)
        {
            var result11 = Enum.Parse<SampleEnum>(value, |false|(0));
            var result12 = Enum.Parse<SampleEnum>(value1, |false|(1));

            var result21 = Enum.Parse(typeof(SampleEnum), value, |false|(2));
            var result22 = Enum.Parse(typeof(SampleEnum), value1, |false|(3));
        }

        public void TryParse(string value, ReadOnlySpan<char> value1, out SampleEnum result, out object resultObject)
        {
            var result11 = Enum.TryParse<SampleEnum>(value, |false|(4), out result);
            var result12 = Enum.TryParse<SampleEnum>(value1, |false|(5), out result);

            var result21 = Enum.TryParse(typeof(SampleEnum), value, |false|(6), out resultObject);
            var result22 = Enum.TryParse(typeof(SampleEnum), value1, |false|(7), out resultObject);
        }
    }
}
------------------------------------------------
0: Passing false is redundant.
QUICKFIXES:
Remove argument
1: Passing false is redundant.
QUICKFIXES:
Remove argument
2: Passing false is redundant.
QUICKFIXES:
Remove argument
3: Passing false is redundant.
QUICKFIXES:
Remove argument
4: Passing false is redundant.
QUICKFIXES:
Remove argument
5: Passing false is redundant.
QUICKFIXES:
Remove argument
6: Passing false is redundant.
QUICKFIXES:
Remove argument
7: Passing false is redundant.
QUICKFIXES:
Remove argument
