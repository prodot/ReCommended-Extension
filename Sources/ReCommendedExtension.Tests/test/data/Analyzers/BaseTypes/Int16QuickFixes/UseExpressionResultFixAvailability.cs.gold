using System;

namespace Test
{
    public class Int16s
    {
        public void Clamp(short number)
        {
            var result11 = |short.Clamp(number, 1, 0x01)|(0);

            short result21 = |short.Clamp(number, 1, 0x01)|(1);

            var result31 = |short.Clamp(number, short.MinValue, short.MaxValue)|(2);
            var result32 = |short.Clamp(1, short.MinValue, short.MaxValue)|(3);

            short result41 = |short.Clamp(number, short.MinValue, short.MaxValue)|(4);
            short result42 = |short.Clamp(1, short.MinValue, short.MaxValue)|(5);

            var result51 = |Math.Clamp(number, (short)1, (short)1)|(6);
            var result52 = |Math.Clamp(number, short.MinValue, short.MaxValue)|(7);
        }

        public void DivRem(short left)
        {
            const int c = 1;

            var result11 = |short.DivRem(0, 10)|(8);

            (short, short) result21 = |short.DivRem(0, 10)|(9);

            (short quotient, short remainder) result32 = |short.DivRem(0, 10)|(10);

            var result31 = |short.DivRem(left, 1)|(11);
            var result32 = |short.DivRem(0x10, 1)|(12);
            var result32 = |short.DivRem(c, 1)|(13);

            (short, short) result41 = |short.DivRem(left, 1)|(14);
            (short, short) result42 = |short.DivRem(0x10, 1)|(15);
            (short, short) result42 = |short.DivRem(c, 1)|(16);

            (short quotient, short remainder) result51 = |short.DivRem(left, 1)|(17);
            (short quotient, short remainder) result52 = |short.DivRem(0x10, 1)|(18);
            (short quotient, short remainder) result52 = |short.DivRem(c, 1)|(19);

            var result61 = |Math.DivRem((short)0, (short)10)|(20);
            var result62 = |Math.DivRem(left, (short)1)|(21);
        }

        public void Equals(short number)
        {
            var result = |number.Equals(null)|(22);
        }

        public void GetTypeCode(short number)
        {
            var result = |number.GetTypeCode()|(23);
        }

        public void Max()
        {
            var result1 = |short.Max(10, 0x0A)|(24);

            short result2 = |short.Max(10, 0x0A)|(25);

            var result2 = |Math.Max((short)10, (short)10)|(26);
        }
    }
}
------------------------------------------------
0: The expression is always 1.
QUICKFIXES:
Replace with '(short)0x01'
Replace with '(short)1'
1: The expression is always 1.
QUICKFIXES:
Replace with '0x01'
Replace with '1'
2: The expression is always the same as the first argument.
QUICKFIXES:
Replace with 'number'
3: The expression is always the same as the first argument.
QUICKFIXES:
Replace with '(short)1'
4: The expression is always the same as the first argument.
QUICKFIXES:
Replace with 'number'
5: The expression is always the same as the first argument.
QUICKFIXES:
Replace with '1'
6: The expression is always 1.
QUICKFIXES:
Replace with '(short)1'
7: The expression is always the same as the first argument.
QUICKFIXES:
Replace with 'number'
8: The expression is always (0, 0).
QUICKFIXES:
Replace with '(Quotient: (short)0, Remainder: (short)0)'
9: The expression is always (0, 0).
QUICKFIXES:
Replace with '(0, 0)'
10: The expression is always (0, 0).
QUICKFIXES:
Replace with '(0, 0)'
11: The expression is always the same as the first argument with no remainder.
QUICKFIXES:
Replace with '(Quotient: left, Remainder: (short)0)'
12: The expression is always the same as the first argument with no remainder.
QUICKFIXES:
Replace with '(Quotient: (short)0x10, Remainder: (short)0)'
13: The expression is always the same as the first argument with no remainder.
QUICKFIXES:
Replace with '(Quotient: (short)c, Remainder: (short)0)'
14: The expression is always the same as the first argument with no remainder.
QUICKFIXES:
Replace with '(left, 0)'
15: The expression is always the same as the first argument with no remainder.
QUICKFIXES:
Replace with '(0x10, 0)'
16: The expression is always the same as the first argument with no remainder.
QUICKFIXES:
Replace with '(c, 0)'
17: The expression is always the same as the first argument with no remainder.
QUICKFIXES:
Replace with '(left, 0)'
18: The expression is always the same as the first argument with no remainder.
QUICKFIXES:
Replace with '(0x10, 0)'
19: The expression is always the same as the first argument with no remainder.
QUICKFIXES:
Replace with '(c, 0)'
20: The expression is always (0, 0).
QUICKFIXES:
Replace with '(Quotient: (short)0, Remainder: (short)0)'
21: The expression is always the same as the first argument with no remainder.
QUICKFIXES:
Replace with '(Quotient: left, Remainder: (short)0)'
22: The expression is always false.
QUICKFIXES:
Replace with 'false'
23: The expression is always TypeCode.Int16.
QUICKFIXES:
Replace with 'TypeCode.Int16'
24: The expression is always 10.
QUICKFIXES:
Replace with '(short)0x0A'
Replace with '(short)10'
25: The expression is always 10.
QUICKFIXES:
Replace with '0x0A'
Replace with '10'
26: The expression is always 10.
QUICKFIXES:
Replace with '(short)10'
