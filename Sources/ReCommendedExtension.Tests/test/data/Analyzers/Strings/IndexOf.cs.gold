using System;

namespace Test
{
    public class Strings
    {
        public void Comparison(string text, char c, string s)
        {
            var result11 = text.|IndexOf(c) == 0|(0);
            var result12 = text.|IndexOf('a') == 0|(1);

            var result21 = text.|IndexOf(c) != 0|(2);
            var result22 = text.|IndexOf('a') != 0|(3);
            var result23 = text.|IndexOf(c) > -1|(4);
            var result24 = text.|IndexOf(c) != -1|(5);
            var result25 = text.|IndexOf(c) >= 0|(6);

            var result31 = text.|IndexOf(c) == -1|(7);
            var result32 = text.|IndexOf(c) < 0|(8);

            var result41 = text.|IndexOf(c, StringComparison.CurrentCulture) > -1|(9);
            var result42 = text.|IndexOf(c, StringComparison.CurrentCulture) != -1|(10);
            var result43 = text.|IndexOf(c, StringComparison.CurrentCulture) >= 0|(11);
            var result44 = text.|IndexOf(c, StringComparison.OrdinalIgnoreCase) == -1|(12);
            var result45 = text.|IndexOf(c, StringComparison.OrdinalIgnoreCase) < 0|(13);

            var result51 = text.|IndexOf(s) == 0|(14);
            var result52 = text.|IndexOf(s) != 0|(15);

            var result61 = text.|IndexOf(s) > -1|(16);
            var result62 = text.|IndexOf(s) != -1|(17);
            var result63 = text.|IndexOf(s) >= 0|(18);
            var result64 = text.|IndexOf(s) == -1|(19);
            var result65 = text.|IndexOf(s) < 0|(20);

            var result71 = text.|IndexOf(s, StringComparison.CurrentCulture) == 0|(21);
            var result72 = text.|IndexOf(s, StringComparison.OrdinalIgnoreCase) != 0|(22);

            var result81 = text.|IndexOf(s, StringComparison.CurrentCulture) > -1|(23);
            var result82 = text.|IndexOf(s, StringComparison.CurrentCulture) != -1|(24);
            var result83 = text.|IndexOf(s, StringComparison.CurrentCulture) >= 0|(25);
            var result84 = text.|IndexOf(s, StringComparison.OrdinalIgnoreCase) == -1|(26);
            var result85 = text.|IndexOf(s, StringComparison.OrdinalIgnoreCase) < 0|(27);
        }

        public void RedundantArguments(string text, char c, string s)
        {
            var result1 = text.IndexOf(c, |0|(28));
            var result2 = text.IndexOf(c, |startIndex: 0|(29));

            var result3 = text.IndexOf(s, |0|(30));
            var result4 = text.IndexOf(s, |startIndex: 0|(31));

            var result5 = text.IndexOf(s, |0|(32), StringComparison.CurrentCulture);
            var result6 = text.IndexOf(s, |startIndex: 0|(33), StringComparison.CurrentCulture);
        }

        public void ExpressionResult(string text)
        {
            var result1 = |text.IndexOf("")|(34);
            var result2 = |text.IndexOf("", StringComparison.CurrentCulture)|(35);
        }

        public void AsCharacter(string text)
        {
            var result1 = text.IndexOf(|"a"|(36));
            var result1 = text.IndexOf(|"a"|(37), StringComparison.OrdinalIgnoreCase);
        }

        public void NoDetection(string text, char c, int startIndex)
        {
            var result1 = text.IndexOf(c, 1);
            var result2 = text.IndexOf(c, startIndex);

            text.IndexOf("");
            text.IndexOf("", StringComparison.CurrentCulture);
        }
    }
}
---------------------------------------------------------
(0): ReSharper Suggestion: Use list pattern
(1): ReSharper Suggestion: Use list pattern
(2): ReSharper Suggestion: Use list pattern
(3): ReSharper Suggestion: Use list pattern
(4): ReSharper Suggestion: Use the 'Contains' method
(5): ReSharper Suggestion: Use the 'Contains' method
(6): ReSharper Suggestion: Use the 'Contains' method
(7): ReSharper Suggestion: Use the 'Contains' method
(8): ReSharper Suggestion: Use the 'Contains' method
(9): ReSharper Suggestion: Use the 'Contains' method
(10): ReSharper Suggestion: Use the 'Contains' method
(11): ReSharper Suggestion: Use the 'Contains' method
(12): ReSharper Suggestion: Use the 'Contains' method
(13): ReSharper Suggestion: Use the 'Contains' method
(14): ReSharper Suggestion: Use the 'StartsWith' method
(15): ReSharper Suggestion: Use the 'StartsWith' method
(16): ReSharper Suggestion: Use the 'Contains' method
(17): ReSharper Suggestion: Use the 'Contains' method
(18): ReSharper Suggestion: Use the 'Contains' method
(19): ReSharper Suggestion: Use the 'Contains' method
(20): ReSharper Suggestion: Use the 'Contains' method
(21): ReSharper Suggestion: Use the 'StartsWith' method
(22): ReSharper Suggestion: Use the 'StartsWith' method
(23): ReSharper Suggestion: Use the 'Contains' method
(24): ReSharper Suggestion: Use the 'Contains' method
(25): ReSharper Suggestion: Use the 'Contains' method
(26): ReSharper Suggestion: Use the 'Contains' method
(27): ReSharper Suggestion: Use the 'Contains' method
(28): ReSharper Dead Code: Argument 0 is redundant
(29): ReSharper Dead Code: Argument 0 is redundant
(30): ReSharper Dead Code: Argument 0 is redundant
(31): ReSharper Dead Code: Argument 0 is redundant
(32): ReSharper Dead Code: Argument 0 is redundant
(33): ReSharper Dead Code: Argument 0 is redundant
(34): ReSharper Suggestion: The expression is always 0
(35): ReSharper Suggestion: The expression is always 0
(36): ReSharper Suggestion: Use as character
(37): ReSharper Suggestion: Use as character
