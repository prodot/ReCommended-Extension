using System;

namespace Test
{
    public class Strings
    {
        public void ExpressionResult(string text, string s, int count, StringSplitOptions options)
        {
            var result11 = |text.Split('a', 0)|(0);
            var result12 = |text.Split('a', 0, options)|(1);
            var result13 = |text.Split('a', 1)|(2);
            var result14 = |text.Split('a', 1, StringSplitOptions.None)|(3);
            var result15 = |text.Split('a', 1, StringSplitOptions.TrimEntries)|(4);

            var result21 = |text.Split(['a'], 0)|(5);
            var result22 = |text.Split(['a'], 1)|(6);

            var result31 = |text.Split(['a'], 0, options)|(7);
            var result32 = |text.Split(['a'], 1, StringSplitOptions.None)|(8);
            var result33 = |text.Split(['a'], 1, StringSplitOptions.TrimEntries)|(9);

            var result41 = |text.Split(null as string)|(10);
            var result42 = |text.Split((string?)null)|(11);
            var result43 = |text.Split("")|(12);
            var result44 = |text.Split(null as string, StringSplitOptions.None)|(13);
            var result45 = |text.Split((string?)null, StringSplitOptions.None)|(14);
            var result46 = |text.Split("", StringSplitOptions.None)|(15);
            var result47 = |text.Split(null as string, StringSplitOptions.TrimEntries)|(16);
            var result48 = |text.Split((string?)null, StringSplitOptions.TrimEntries)|(17);
            var result49 = |text.Split("", StringSplitOptions.TrimEntries)|(18);

            var result51 = |text.Split(s, 0)|(19);
            var result52 = |text.Split(s, 0, options)|(20);
            var result53 = |text.Split(s, 1)|(21);
            var result54 = |text.Split(s, 1, StringSplitOptions.None)|(22);
            var result55 = |text.Split(s, 1, StringSplitOptions.TrimEntries)|(23);
            var result56 = |text.Split(null as string, count)|(24);
            var result57 = |text.Split(null as string, count, StringSplitOptions.None)|(25);
            var result58 = |text.Split(null as string, count, StringSplitOptions.TrimEntries)|(26);
            var result59 = |text.Split("", count)|(27);
            var result50 = |text.Split("", count, StringSplitOptions.None)|(28);
            var result5A = |text.Split("", count, StringSplitOptions.TrimEntries)|(29);

            var result61 = |text.Split([""], StringSplitOptions.None)|(30);
            var result62 = |text.Split([""], StringSplitOptions.TrimEntries)|(31);
            var result63 = |text.Split(new[] { "" }, StringSplitOptions.None)|(32);
            var result64 = |text.Split(new[] { "" }, StringSplitOptions.TrimEntries)|(33);

            var result71 = |text.Split([s], 0, options)|(34);
            var result72 = |text.Split([s], 1, StringSplitOptions.None)|(35);
            var result73 = |text.Split([s], 1, StringSplitOptions.TrimEntries)|(36);
            var result74 = |text.Split([""], count, StringSplitOptions.None)|(37);
            var result75 = |text.Split([""], count, StringSplitOptions.TrimEntries)|(38);
            var result76 = |text.Split(new[] { "" }, count, StringSplitOptions.None)|(39);
            var result77 = |text.Split(new[] { "" }, count, StringSplitOptions.TrimEntries)|(40);
        }

        public void DuplicateItems(string text, int count, StringSplitOptions options)
        {
            var result11 = text.Split('a', 'b', |'a'|(41));
            var result12 = text.Split(['a', 'b', |'a'|(42)]);
            var result13 = text.Split(new[] { 'a', 'b', |'a'|(43) });

            var result21 = text.Split(['a', 'b', |'a'|(44)], count);
            var result22 = text.Split(new[] { 'a', 'b', |'a'|(45) }, count);

            var result31 = text.Split(['a', 'b', |'a'|(46)], options);
            var result32 = text.Split(new[] { 'a', 'b', |'a'|(47) }, options);

            var result41 = text.Split(['a', 'b', |'a'|(48)], count, options);
            var result42 = text.Split(new[] { 'a', 'b', |'a'|(49) }, count, options);

            var result51 = text.Split(["aa", "bb", |"aa"|(50)], options);
            var result52 = text.Split(new[] { "aa", "bb", |"aa"|(51) }, options);

            var result61 = text.Split(["aa", "bb", |"aa"|(52)], count, options);
            var result62 = text.Split(new[] { "aa", "bb", |"aa"|(53) }, count, options);
        }

        public void PassSingleCharacter(string text, int count, StringSplitOptions options)
        {
            var result11 = text.Split(|"a"|(54));
            var result12 = text.Split(|"a"|(55), options);

            var result21 = text.Split(|"a"|(56), count);
            var result22 = text.Split(|"a"|(57), count, options);

            var result31 = text.Split([|"a"|(58), |"a"|(59)], options);
            var result32 = text.Split(new[] { |"a"|(60), |"a"|(61) }, options);

            var result41 = text.Split([|"a"|(62), |"a"|(63)], count, options);
            var result42 = text.Split(new[] { |"a"|(64), |"a"|(65) }, count, options);
        }

        public void NoDetection(string text, int count, StringSplitOptions options, char c, string s)
        {
            var result11 = text.Split('a', count);
            var result12 = text.Split('a', 2);
            var result13 = text.Split('a', 1, StringSplitOptions.RemoveEmptyEntries);
            var result14 = text.Split('a', 1, StringSplitOptions.RemoveEmptyEntries | StringSplitOptions.TrimEntries);
            var result14 = text.Split('a', 1, options);

            var result21 = text.Split(c, 'b', c);
            var result22 = text.Split([c, 'b', c]);
            var result23 = text.Split(new[] { c, 'b', c });

            var result31 = text.Split();
            var result32 = text.Split([]);
            var result33 = text.Split(new char[] { });
            var result34 = text.Split(new char[0]);
            var result35 = text.Split(Array.Empty<char>());

            var result41 = text.Split('a');
            var result42 = text.Split(['a']);
            var result43 = text.Split(new[] { 'a' });

            var result51 = text.Split('a', 'b', 'c');
            var result52 = text.Split(['a', 'b', 'c']);
            var result53 = text.Split(new[] { 'a', 'b', 'c' });

            var result61 = text.Split(['a'], 2);
            var result62 = text.Split(['a'], count);
            var result63 = text.Split(['a', 'b', 'c'], count);
            var result64 = text.Split(new[] { 'a', 'b', 'c' }, count);

            var result71 = text.Split(['a', 'b', 'c'], options);
            var result72 = text.Split(new[] { 'a', 'b', 'c' }, options);

            var result81 = text.Split(['a'], count, options);
            var result82 = text.Split(['a'], 1, StringSplitOptions.RemoveEmptyEntries);
            var result83 = text.Split(['a'], 1, StringSplitOptions.RemoveEmptyEntries | StringSplitOptions.TrimEntries);
            var result84 = text.Split(['a'], 1, options);

            var result91 = text.Split(null as string, options);
            var result92 = text.Split((string?)null, options);
            var result93 = text.Split("", options);
            var result94 = text.Split("aa");
            var result95 = text.Split("aa", options);

            var result54 = text.Split(s, 1, options);
            var result55 = text.Split("aa", count, options);

            var result61 = text.Split(new string[] { }, options);
            var result62 = text.Split(["a", "bb"], options);
            var result63 = text.Split(["a", s], options);

            var result71 = text.Split([s], 1, options);
            var result72 = text.Split([""], count, options);
            var result73 = text.Split(["aa", "bb"], count, options);
            var result74 = text.Split(["a", "bb"], count, options);

            text.Split('a', 0);
            text.Split('a', 0, StringSplitOptions.RemoveEmptyEntries);
            text.Split('a', 1);
            text.Split('a', 1, StringSplitOptions.None);
            text.Split('a', 1, StringSplitOptions.TrimEntries);

            text.Split(['a'], 0);
            text.Split(['a'], 1);

            text.Split(['a'], 0, options);
            text.Split(['a'], 1, StringSplitOptions.None);
            text.Split(['a'], 1, StringSplitOptions.TrimEntries);

            text.Split(null as string);
            text.Split((string?)null);
            text.Split("");
            text.Split(null as string, StringSplitOptions.None);
            text.Split((string?)null, StringSplitOptions.None);
            text.Split("", StringSplitOptions.None);
            text.Split(null as string, StringSplitOptions.TrimEntries);
            text.Split((string?)null, StringSplitOptions.TrimEntries);
            text.Split("", StringSplitOptions.TrimEntries);

            text.Split(s, 0);
            text.Split(s, 0, options);
            text.Split(s, 1);
            text.Split(s, 1, StringSplitOptions.None);
            text.Split(s, 1, StringSplitOptions.TrimEntries);
            text.Split(null as string, count);
            text.Split(null as string, count, StringSplitOptions.None);
            text.Split(null as string, count, StringSplitOptions.TrimEntries);
            text.Split("", count);
            text.Split("", count, StringSplitOptions.None);
            text.Split("", count, StringSplitOptions.TrimEntries);

            text.Split([""], StringSplitOptions.None);
            text.Split([""], StringSplitOptions.TrimEntries);
            text.Split(new[] { "" }, StringSplitOptions.None);
            text.Split(new[] { "" }, StringSplitOptions.TrimEntries);

            text.Split([s], 0, options);
            text.Split([s], 1, StringSplitOptions.None);
            text.Split([s], 1, StringSplitOptions.TrimEntries);
            text.Split([""], count, StringSplitOptions.None);
            text.Split([""], count, StringSplitOptions.TrimEntries);
            text.Split(new[] { "" }, count, StringSplitOptions.None);
            text.Split(new[] { "" }, count, StringSplitOptions.TrimEntries);
        }

        public void NoDetection(string? text, StringSplitOptions options, string s, char c)
        {
            var result11 = text?.Split(c, 0);
            var result12 = text?.Split(c, 0, options);
            var result13 = text?.Split(c, 1);
            var result14 = text?.Split(c, 1, StringSplitOptions.None);
            var result15 = text?.Split(c, 1, StringSplitOptions.TrimEntries);

            var result21 = text?.Split(['a'], 0);
            var result22 = text?.Split(['a'], 1);

            var result31 = text?.Split(['a'], 0, options);
            var result32 = text?.Split(['a'], 1, StringSplitOptions.None);
            var result33 = text?.Split(['a'], 1, StringSplitOptions.TrimEntries);

            var result41 = text?.Split(null as string);
            var result42 = text?.Split((string?)null);
            var result43 = text?.Split("");
            var result44 = text?.Split(null as string, StringSplitOptions.None);
            var result45 = text?.Split((string?)null, StringSplitOptions.None);
            var result46 = text?.Split("", StringSplitOptions.None);
            var result47 = text?.Split(null as string, StringSplitOptions.TrimEntries);
            var result48 = text?.Split((string?)null, StringSplitOptions.TrimEntries);
            var result49 = text?.Split("", StringSplitOptions.TrimEntries);

            var result51 = text?.Split(s, 0);
            var result52 = text?.Split(s, 0, options);
            var result53 = text?.Split(s, 1);
            var result54 = text?.Split(s, 1, StringSplitOptions.None);
            var result55 = text?.Split(s, 1, StringSplitOptions.TrimEntries);
            var result56 = text?.Split(null as string, count);
            var result57 = text?.Split(null as string, count, StringSplitOptions.None);
            var result58 = text?.Split(null as string, count, StringSplitOptions.TrimEntries);
            var result59 = text?.Split("", count);
            var result50 = text?.Split("", count, StringSplitOptions.None);
            var result5A = text?.Split("", count, StringSplitOptions.TrimEntries);

            var result61 = text?.Split([""], StringSplitOptions.None);
            var result62 = text?.Split([""], StringSplitOptions.TrimEntries);
            var result63 = text?.Split(new[] { "" }, StringSplitOptions.None);
            var result64 = text?.Split(new[] { "" }, StringSplitOptions.TrimEntries);

            var result71 = text?.Split([s], 0, options);
            var result72 = text?.Split([s], 1, StringSplitOptions.None);
            var result73 = text?.Split([s], 1, StringSplitOptions.TrimEntries);
            var result74 = text?.Split([""], count, StringSplitOptions.None);
            var result75 = text?.Split([""], count, StringSplitOptions.TrimEntries);
            var result76 = text?.Split(new[] { "" }, count, StringSplitOptions.None);
            var result77 = text?.Split(new[] { "" }, count, StringSplitOptions.TrimEntries);
        }
    }
}
---------------------------------------------------------
(0): ReSharper Suggestion: The expression is always an empty array.
(1): ReSharper Suggestion: The expression is always an empty array.
(2): ReSharper Suggestion: The expression is always an array with a single element.
(3): ReSharper Suggestion: The expression is always an array with a single element.
(4): ReSharper Suggestion: The expression is always an array with a single trimmed element.
(5): ReSharper Suggestion: The expression is always an empty array.
(6): ReSharper Suggestion: The expression is always an array with a single element.
(7): ReSharper Suggestion: The expression is always an empty array.
(8): ReSharper Suggestion: The expression is always an array with a single element.
(9): ReSharper Suggestion: The expression is always an array with a single trimmed element.
(10): ReSharper Suggestion: The expression is always an array with a single element.
(11): ReSharper Suggestion: The expression is always an array with a single element.
(12): ReSharper Suggestion: The expression is always an array with a single element.
(13): ReSharper Suggestion: The expression is always an array with a single element.
(14): ReSharper Suggestion: The expression is always an array with a single element.
(15): ReSharper Suggestion: The expression is always an array with a single element.
(16): ReSharper Suggestion: The expression is always an array with a single trimmed element.
(17): ReSharper Suggestion: The expression is always an array with a single trimmed element.
(18): ReSharper Suggestion: The expression is always an array with a single trimmed element.
(19): ReSharper Suggestion: The expression is always an empty array.
(20): ReSharper Suggestion: The expression is always an empty array.
(21): ReSharper Suggestion: The expression is always an array with a single element.
(22): ReSharper Suggestion: The expression is always an array with a single element.
(23): ReSharper Suggestion: The expression is always an array with a single trimmed element.
(24): ReSharper Suggestion: The expression is always an array with a single element.
(25): ReSharper Suggestion: The expression is always an array with a single element.
(26): ReSharper Suggestion: The expression is always an array with a single trimmed element.
(27): ReSharper Suggestion: The expression is always an array with a single element.
(28): ReSharper Suggestion: The expression is always an array with a single element.
(29): ReSharper Suggestion: The expression is always an array with a single trimmed element.
(30): ReSharper Suggestion: The expression is always an array with a single element.
(31): ReSharper Suggestion: The expression is always an array with a single trimmed element.
(32): ReSharper Suggestion: The expression is always an array with a single element.
(33): ReSharper Suggestion: The expression is always an array with a single trimmed element.
(34): ReSharper Suggestion: The expression is always an empty array.
(35): ReSharper Suggestion: The expression is always an array with a single element.
(36): ReSharper Suggestion: The expression is always an array with a single trimmed element.
(37): ReSharper Suggestion: The expression is always an array with a single element.
(38): ReSharper Suggestion: The expression is always an array with a single trimmed element.
(39): ReSharper Suggestion: The expression is always an array with a single element.
(40): ReSharper Suggestion: The expression is always an array with a single trimmed element.
(41): ReSharper Dead Code: The character is already passed.
(42): ReSharper Dead Code: The character is already passed.
(43): ReSharper Dead Code: The character is already passed.
(44): ReSharper Dead Code: The character is already passed.
(45): ReSharper Dead Code: The character is already passed.
(46): ReSharper Dead Code: The character is already passed.
(47): ReSharper Dead Code: The character is already passed.
(48): ReSharper Dead Code: The character is already passed.
(49): ReSharper Dead Code: The character is already passed.
(50): ReSharper Dead Code: The string is already passed.
(51): ReSharper Dead Code: The string is already passed.
(52): ReSharper Dead Code: The string is already passed.
(53): ReSharper Dead Code: The string is already passed.
(54): ReSharper Suggestion: Pass the single character
(55): ReSharper Suggestion: Pass the single character
(56): ReSharper Suggestion: Pass the single character
(57): ReSharper Suggestion: Pass the single character
(58): ReSharper Suggestion: Pass the single character
(59): ReSharper Suggestion: Pass the single character
(60): ReSharper Suggestion: Pass the single character
(61): ReSharper Suggestion: Pass the single character
(62): ReSharper Suggestion: Pass the single character
(63): ReSharper Suggestion: Pass the single character
(64): ReSharper Suggestion: Pass the single character
(65): ReSharper Suggestion: Pass the single character
